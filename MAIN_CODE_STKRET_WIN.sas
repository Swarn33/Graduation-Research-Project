LIBNAME HOLDINGS "\\RESEARCH\RESEARCH\SAS - RESEARCH\SWARN_RESEARCH\SAS_DATASETS\HOLDINGS_DATA\ALL_DATASET_HOLDINGS";
LIBNAME NZD "\\research\research\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\Holdings_data\NZD";
LIBNAME FUND_NZD "\\research\research\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD";
LIBNAME FILE_SET "\\research\research\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\Holdings_data\NZD\OTHER_FILES";
LIBNAME FUND_SET "\\research\research\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\Supporting_files";



/* ************************************* RUN ALL THE MACROS ******************************** */

/* MERGE GENERAL MACRO */
%MACRO MERGE_CODE_1(INPUT_FILE_1, INPUT_FILE_2, SORT_VARS, OUTPUT_FILE);	
	PROC SORT DATA = &INPUT_FILE_1. OUT = LINK_FILE; BY &SORT_VARS.; RUN;
	PROC SORT DATA = &INPUT_FILE_2.; BY &SORT_VARS.; RUN;

	DATA &OUTPUT_FILE.;
		MERGE LINK_FILE (IN=A) &INPUT_FILE_2. (IN=B);
		BY &SORT_VARS.;
		IF A;
	RUN;
	
	PROC DATASETS LIB = WORK;		/*DELETING INTERMEDIARY DATASET FOR SPACE MANAGEMENT*/
		DELETE LINK_FILE;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT;
%MEND MERGE_CODE_1;

/* IMPORT MACRO 1 */
%MACRO IMPORT_MACROS(INPUTFILE, OUTPUT_FILE);
	FILENAME REFFILE "&INPUTFILE.";  

	    PROC IMPORT DATAFILE=REFFILE
	        DBMS=CSV
	        REPLACE
	        OUT=&OUTPUT_FILE.;
	        GETNAMES=YES;
	        GUESSINGROWS=33000;
	    RUN;

	    PROC CONTENTS DATA = &OUTPUT_FILE.; RUN;
%MEND IMPORT_MACROS;

/* IMPORT MACRO 2 - FOR STATA DATASET */
%MACRO IMPORT_MACRO(INPUT_FILE, DBMS_TYPE, OUTPUT_DATASET);

	FILENAME REFFILE "&INPUT_FILE.";
		OPTIONS MSGLEVEL=I;			/* RUN V9 ENGINE OPTIONS IF REQURED */

	    PROC IMPORT DATAFILE=REFFILE
	        DBMS=&DBMS_TYPE.
	        OUT=&OUTPUT_DATASET.;
	    RUN;

%MEND IMPORT_MACRO;

/* ******************************** PROC SUMMARY MACRO *************************************** */
/* PROC SUMMARY MACRO 1 */
%MACRO PROC_SUMMARY_OVERALL(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/
		&STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_OVERALL;

/* PROC SUMMARY MACRO 2 */
%MACRO PROC_SUMMARY_KIWISAVER(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		WHERE BINARYVAR = 1;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/
		&STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_KIWISAVER;

/* PROC SUMMARY MACRO 6 */
%MACRO PROC_SUMMARY_KIWIPENSION(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		WHERE BINARYVAR IN(1,2);
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/ 
		&STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_KIWIPENSION;

/* PROC SUMMARY MACRO 3 */
%MACRO PROC_SUMMARY_ESG1(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA=&INPUT_FILE. NWAY MISSING ;					
		WHERE ESG =1;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT = &OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/
		&STATS_OPS.(&VARIABLES.) = &CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_ESG1;

/* PROC SUMMARY MACRO 4 */
%MACRO PROC_SUMMARY_WEIGHT(INPUT_FILE, WEIGHT_VAR, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
    PROC SUMMARY DATA=&INPUT_FILE. NWAY MISSING;					
		WEIGHT &WEIGHT_VAR.;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/
		&STATS_OPS.(&VARIABLES.) = &CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_WEIGHT;

/* PROC SUMMARY MACRO 5 */
%MACRO PROC_SUMMARY_OPENEND(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		WHERE BINARYVAR = 3;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/ 
		&STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_OPENEND;

/* MACRO TO CREATE CARRY FORWARD VARIABLES */
%MACRO CREATE_FORWARD_VAR(INPUT_FILE, VAR1, VAR2, VAR3, OUTPUT_FILE, VAR_TOBE_CARRY, FILTER_VAR);
	PROC SORT DATA = &INPUT_FILE. OUT = DATA_123; BY &VAR1. DESCENDING &VAR2. DESCENDING &VAR3.; RUN;
	DATA &OUTPUT_FILE.;
		SET DATA_123;
		BY &VAR1. DESCENDING &VAR2. DESCENDING &VAR3.;
		TEMP_LAG_VAR = LAG(&VAR_TOBE_CARRY.);	
		IF FIRST.&FILTER_VAR. THEN &VAR_TOBE_CARRY._FRWRD = .;
		ELSE &VAR_TOBE_CARRY._FRWRD = TEMP_LAG_VAR;
		DROP TEMP_LAG_VAR;
	RUN;

%MEND CREATE_FORWARD_VAR;


/* *************************************************************** PART A ******************************************************************************** */
/*-----------------------------------------------------------------STEP 1--------------------------------------------------------------------------------- */
/* *************************************************************** HD FILES ****************************************************************************** */
%MACRO DATA_CONVERSION(INPUT_FILE, OUTPUT_DATASET, FINAL_DATASET);
    FILENAME REFFILE "&INPUT_FILE.";
    
    PROC IMPORT DATAFILE=REFFILE
        DBMS=CSV
        REPLACE
        OUT=&OUTPUT_DATASET.;
        GETNAMES=YES;
        GUESSINGROWS=1000000;
    RUN;

	DATA &FINAL_DATASET.;
		/*LENGTH FUNDNAME $50 SECID $12 NAME $90 DETAILHOLDINGTYPE $50;		TAKING TOO MUCH SPACE*/
        SET &OUTPUT_DATASET.  ;
		FUNDNAME = COMPRESS(FUNDNAME, '', 'KW');
		FUNDID = COMPRESS(FUNDID, '', 'KW');
		SECID = COMPRESS(SECID, '', 'KW');
		NAME = COMPRESS(NAME, '', 'KW');
		DETAILHOLDINGTYPE = COMPRESS(DETAILHOLDINGTYPE, '', 'KW');
		NUMBEROFSHARES = COMPRESS(NUMBEROFSHARES, '', 'KW'); 	/* THIS IS CHARACTER */
		/* CHECK IF DATE IS CHARACTER */
        IF VTYPE(DATE) = 'C' THEN DO;
			DATE_CHAR = DATE;										/* RENAMING THE DATE VARIABLE TO BE DROPPED AFTERWARDS AND REASSIGN THE DATE VARIABLE TO NUMERIC VTYPE */
            DATE_NUM = INPUT(DATE_CHAR, DDMMYY10.); 				/* CONVERT CHARACTER DATE TO NUMERIC SAS DATE */
            DROP  DATE_CHAR; 										/* DROP CREATED CHARACTER DATE */
        END;
        /* THIS LINE IS AN EVIL NECESSITY AS DATE IF CHARACTER IS NOT GETTING RENAMED OR RECREATED AFTER DROPPING ORIGINAL DATE COLUMN */
		/* IF DATE IS NUMERIC CREATE A COLUMN DATE_NUM WHICH IS IN SYNC WITH WHOLE DATASET AND REST OF THE CODE*/
		IF VTYPE (DATE) = 'N' THEN DO;
			DATE_NUM = DATE ;
		END;
		/* EXTRACT MONTH AND YEAR FROM THE NUMERIC DATE */
		MONTH = MONTH(DATE_NUM);
        YEAR = YEAR(DATE_NUM);
		FORMAT DATE_NUM DDMMYY10. ;
		DROP DATE;
	RUN;
	/* DROPPING THE INTERMEDIATE DATASET TO FREE UP THE DISK SPACE*/
	PROC DATASETS LIB = WORK;
		DELETE &OUTPUT_DATASET.;
	QUIT;

    PROC CONTENTS DATA=&FINAL_DATASET.;
    RUN;

	PROC SORT DATA=&FINAL_DATASET. ; BY FUNDID YEAR MONTH ; 
	RUN ;

%MEND DATA_CONVERSION;

%MACRO FILE_PROCESSING ;
	 %DO I = 1 %TO 22 ; 
		%DATA_CONVERSION (
				INPUT_FILE = C:\SWARN\ESG PROJECT\CSV_DATASET\KIWISAVER_HD\FILE_HD_&I..CSV,
				OUTPUT_DATASET=LINK_FILE_&I,
				FINAL_DATASET=HD_&I
			);
	%END;
%MEND FILE_PROCESSING;

%FILE_PROCESSING ;

/* DONT RUN WITH ABOVE CODE*/

%MACRO SET_HD(START=1, END=22);
    DATA KS_HD_1TO409;
        SET	%DO I = &START %TO &END;
            	HD_&I.
       		%END;
		;
    RUN;
%MEND SET_HD;

%SET_HD(START=1, END=22);

/* MERGING BINARY FILE INTO FINAL SET*/

PROC SORT DATA = FILE_SET.binaryfile; BY FUNDID; RUN;

PROC SORT DATA = KS_HD_1TO409 OUT = HD_DATA; BY FUNDID; RUN;	/* HOLDINGS.HD_ALL_DATA */

DATA HD_ALL_DATA;
	MERGE HD_DATA (IN=A) FILE_SET.binaryfile (IN=B);
	BY FUNDID;
	IF A;
	WHERE NOT MISSING(FUNDID);
RUN;

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/* CREATING FILE IN ORIGINAL LIBRARY*/
/*DATA HOLDINGS.HD_ALL_DATA;
	SET HD_ALL_DATA;
	WHERE NOT MISSING(FUNDNAME);
RUN;*/

/*-----------------------------------------------------------------STEP 2--------------------------------------------------------------------------------- */
/* *************************************************************** SD FILES ****************************************************************************** */
%MACRO DATA_CONVERSION(INPUT_FILE, OUTPUT_DATASET, FINAL_DATASET);
    FILENAME REFFILE "&INPUT_FILE.";
    
    PROC IMPORT DATAFILE=REFFILE
        DBMS=CSV
        REPLACE
        OUT=&OUTPUT_DATASET.;
        GETNAMES=YES;
        GUESSINGROWS=1000000;
    RUN;

	DATA &FINAL_DATASET.;
		/*LENGTH FUNDNAME $50 SECID $12 NAME $90;		TAKING TOO MUCH SPACE*/
        SET &OUTPUT_DATASET.  ;
		FUNDNAME = COMPRESS(FUNDNAME, '', 'KW');
		FUNDID = COMPRESS(FUNDID, '', 'KW');
		SECID = COMPRESS(SECID, '', 'KW');
		NAME = COMPRESS(NAME, '', 'KW');
		Percentholdings = COMPRESS(Percentholdings, '', 'KW'); 	/* THIS IS CHARACTER */
		/* CHECK IF DATE IS CHARACTER */
        IF VTYPE(DATE) = 'C' THEN DO;
			DATE_CHAR = DATE;										/* RENAMING THE DATE VARIABLE TO BE DROPPED AFTERWARDS AND REASSIGN THE DATE VARIABLE TO NUMERIC VTYPE */
            DATE_NUM = INPUT(DATE_CHAR, DDMMYY10.); 				/* CONVERT CHARACTER DATE TO NUMERIC SAS DATE */
            DROP  DATE_CHAR; 										/* DROP CREATED CHARACTER DATE */
        END;
        /* THIS LINE IS AN EVIL NECESSITY AS DATE IF CHARACTER IS NOT GETTING RENAMED OR RECREATED AFTER DROPPING ORIGINAL DATE COLUMN */
		/* IF DATE IS NUMERIC CREATE A COLUMN DATE_NUM WHICH IS IN SYNC WITH WHOLE DATASET AND REST OF THE CODE*/
		IF VTYPE (DATE) = 'N' THEN DO;
			DATE_NUM = DATE ;
		END;
		/* EXTRACT MONTH AND YEAR FROM THE NUMERIC DATE */
		MONTH = MONTH(DATE_NUM);
        YEAR = YEAR(DATE_NUM);
		FORMAT DATE_NUM DDMMYY10. ;
		DROP DATE;
	RUN;
	/* DROPPING THE INTERMEDIATE DATASET TO FREE UP THE DISK SPACE*/
	PROC DATASETS LIB = WORK;
		DELETE &OUTPUT_DATASET.;
	QUIT;

    PROC CONTENTS DATA=&FINAL_DATASET.;
    RUN;

	PROC SORT DATA=&FINAL_DATASET. ; BY FUNDID YEAR MONTH ; 
	RUN ;

%MEND DATA_CONVERSION;

%MACRO FILE_PROCESSING ;
	 %DO I = 1 %TO 23 ; 
		%DATA_CONVERSION (
				INPUT_FILE = C:\SWARN\ESG Project\CSV_dataset\Kiwisaver_sd\FILE_SD_&I..CSV,
				OUTPUT_DATASET=LINK_FILE_&I,
				FINAL_DATASET=SD_&I
			);
	%END;
%MEND FILE_PROCESSING;

%FILE_PROCESSING ;

/* DONT RUN WITH ABOVE CODE - FIRST TEST THE DATA */

%MACRO SET_SD(START=1, END=23);
    DATA KS_SD_1TO409;
        SET	%DO I = &START %TO &END;
            	SD_&I.
       		%END;
		;
    RUN;
%MEND SET_SD;

%SET_SD(START=1, END=23);

/* MERGING BINARY FILE INTO FINAL SET */
PROC SORT DATA = FILE_SET.binaryfile; BY FUNDID; RUN;

PROC SORT DATA = KS_SD_1TO409; BY FUNDID; RUN;	

DATA SD_ALL_DATA;
	MERGE KS_SD_1TO409 (IN=A)	FILE_SET.binaryfile (IN=B);
	BY FUNDID;
	IF A;
RUN;

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/* CREATING FILE IN ORIGINAL LIBRARY*/
/*DATA HOLDINGS.SD_ALL_DATA;
	SET SD_ALL_DATA;
	WHERE NOT MISSING(FUNDID);
RUN;*/


/*-----------------------------------------------------------------STEP 3--------------------------------------------------------------------------------- */
/* ************************************* CODE FOR EXTRACTING UNIQUE NAME FROM CORRESPONDING UNIQUE SECID ************************************************* */
/* THE OBJECTIVE OF THE CODE IS TO GET A COMMON NAME OF SECID AS USED BY FUNDS - WITHIN DATA A SECID IS NAMED DIFFERENTLY BY DIFFERENT FUNDS, 
	THE CODE WILL CREATE A UNIQUE NAME TILL THIRD PLACE OT WORD OF THE STRING SO THAT EACH SECID HAVE A COMMON NAME*/
/* MACRO CODE */
%MACRO SECID_NAME_EXTRACTION(INPUT_FILE, OUTPUT_FILE);

	PROC SQL;
		CREATE TABLE LINK_FILE_1 AS
		SELECT DISTINCT SECID, NAME
		FROM &INPUT_FILE
		WHERE NOT MISSING(SECID);
	QUIT;

	/* BREAKING DOWN THE NAME STRING INTO THREE PARTS TO BE ABLE TO PICK UP THE COMMON WORDS */
	DATA LINK_FILE_2;
		SET LINK_FILE_1;
		LENGTH FIRST_WORD $200 SECOND_WORD $200 THIRD_WORD $200 ;	/*INITIALIZING TWO STRING VARIABLES WITH DEFINED VARIABLES*/
		FIRST_WORD = "";			/*INITIALIZING THE MAIN RESULT STRING*/
		SECOND_WORD = "";
		THIRD_WORD = "";
		FIRST_WORD = COMPRESS(LOWCASE(SCAN(NAME, 1, ' ')), '.,-:');
		SECOND_WORD = COMPRESS(LOWCASE(SCAN(NAME, 2, ' ')), '.,-:');
		THIRD_WORD = COMPRESS(LOWCASE(SCAN(NAME, 3, ' ' )), '.,-:');
	RUN;

	/* IF SECID IS SAME AND FIRST WORD AND SECOND WORD IS SAME, THEN PICK UP THOSE DISTINCT VALUES IN A DATASET */
	/* DROP NAME COLUMN SO THAT UNIQUE SEARCH CAN BE RAN IN THAT */
	DATA LINK_FILE_3;
		SET LINK_FILE_2;
		DROP NAME;
	RUN;

	PROC SQL;
		CREATE TABLE LINK_FILE_4 AS
		SELECT DISTINCT SECID, FIRST_WORD, SECOND_WORD, THIRD_WORD
		FROM LINK_FILE_3;
	QUIT;

	PROC SORT DATA = LINK_FILE_4; BY SECID; RUN;

	DATA &OUTPUT_FILE.;
		SET LINK_FILE_4;
		BY SECID;

		RETAIN COMBINED_NAME_1 COMBINED_NAME_2 COMBINED_NAME_3;
		LENGTH COMBINED_NAME_1 $200 COMBINED_NAME_2 $200 COMBINED_NAME_3 $200;

		IF FIRST.SECID THEN DO;
			COMBINED_NAME_1 = FIRST_WORD;
			COMBINED_NAME_2 = SECOND_WORD;
			COMBINED_NAME_3 = THIRD_WORD;
		END;
		ELSE DO;
			COMBINED_NAME_1 = CATX(' OR ', COMBINED_NAME_1, FIRST_WORD);
			COMBINED_NAME_2 = CATX(' OR ', COMBINED_NAME_2, SECOND_WORD);
			COMBINED_NAME_3 = CATX(' OR ', COMBINED_NAME_3, THIRD_WORD);
		END;
		IF LAST.SECID THEN OUTPUT;
		DROP FIRST_WORD SECOND_WORD THIRD_WORD;
	RUN;

	/*PROC DATASET LIBNAME = WORK;
		DELETE LINK_FILE_1 LINK_FILE_2 LINK_FILE_3 LINK_FILE_4 ;
	RUN;*/

%MEND SECID_NAME_EXTRACTION;

%SECID_NAME_EXTRACTION(INPUT_FILE = HD_ALL_DATA, OUTPUT_FILE = SECID_HD_DATA);

%SECID_NAME_EXTRACTION(INPUT_FILE = SD_ALL_DATA, OUTPUT_FILE = SECID_SD_DATA);


/*-------------------------------------------------------------------------------STEP 4----------------------------------------------------------------------------------------- */
/* ********************************************************************* CREATING RIC CODE FILE ******************************************************************************** */ 
/* IMPORTING RICCODE FILE. */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\isin_data_fr_sas.CSV',
			   OUTPUT_FILE=RIC_CODE_IMPORT);

%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\ISIN_DATA_HD_ALL.CSV',
 			   OUTPUT_FILE=ISIN_DATA_IMPORT);

%MERGE_CODE_1(INPUT_FILE_1=RIC_CODE_IMPORT, INPUT_FILE_2=ISIN_DATA_IMPORT, SORT_VARS=ISIN, OUTPUT_FILE=RIC_CODE);

DATA RIC_CODE_123;
	SET RIC_CODE;
	WHERE NOT MISSING(ISIN) AND NOT MISSING(SECID);
RUN;

/* REMOVING DUPLICATE VALUES BY SECID */
PROC SORT DATA = RIC_CODE_123 NODUPKEY; BY SECID;  RUN;

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/*DATA FILE_SET.RIC_CODE;
	SET RIC_CODE;
	WHERE NOT MISSING(SECID);
RUN;*/

/* CREATING LIGHT WEIGHT FILE TO MERGE WITH MAIN DATASETS */
DATA RIC_MERGE;
	SET FILE_SET.RIC_CODE;
	DROP COMBINED_NAME_1 COMBINED_NAME_2 COMBINED_NAME_3;
RUN;

/* MERGING WITH FINAL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=HD_ALL_DATA, INPUT_FILE_2=RIC_MERGE, SORT_VARS=SECID, OUTPUT_FILE=HD_1TOALL);

%MERGE_CODE_1(INPUT_FILE_1=SD_ALL_DATA, INPUT_FILE_2=RIC_MERGE, SORT_VARS=SECID, OUTPUT_FILE=SD_1TOALL);

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/* CREATING FILE IN ORIGINAL LIBRARY*/
/*DATA HOLDINGS.HD_ALL_STEP1_MERGE;
	SET HD_1TOALL;
RUN;*/

/*DATA HOLDINGS.SD_ALL_STEP1_MERGE;
	SET SD_1TOALL;
RUN;*/


/*-----------------------------------------------------------------STEP 5--------------------------------------------------------------------------------- */
/* ********************************************************** REFINITIV LEVEL PARAMETERS ***************************************************************** */
/* CHANGE DATES IN HEADER COLUMNS AND TRANSPOSE THE RETURNS */
%MACRO TRANSPOSE_GEN_MACROS(INPUTFILE, PREFIX, OUTPUT_FILE);
    FILENAME REFFILE "&INPUTFILE.";  /* "C:\Users\em18921\Documents\ESG_NZ_DATA_Excel\Monthlyreturns_5.csv"; */

    PROC IMPORT DATAFILE=REFFILE
        DBMS=CSV
        REPLACE
        OUT=MAIN_FILE;
        GETNAMES=YES;
        GUESSINGROWS=30000;
    RUN;

    PROC CONTENTS DATA = MAIN_FILE; RUN;
	DATA MAIN_FILE_1;
		SET MAIN_FILE;
		DROP &VAR_NAME.;
	RUN;

    PROC SQL NOPRINT; /* Counting total number of rows and putting columns in a list */
        SELECT NAME
        INTO :COL_NAMES SEPARATED BY ' '
        FROM DICTIONARY.COLUMNS
        WHERE LIBNAME = "WORK" AND 
              MEMNAME = "MAIN_FILE_1" AND 
              NAME LIKE '%_%' AND NOT NAME="RICCODE"; /* '_%_%_' for monthlyreturns */
    QUIT;

    %PUT COLUMN NAMES: &COL_NAMES;
    %LET NUM_VARS = %SYSFUNC(COUNTW(&COL_NAMES));
    %PUT NUMBER OF VARIABLES: &NUM_VARS;

    PROC SORT DATA = MAIN_FILE_1; BY RICCODE; RUN;

     /* Step 2: Transpose */
    PROC TRANSPOSE DATA=MAIN_FILE_1
        OUT=LINK_FILE_1
        PREFIX=&PREFIX.;
        BY RICCODE;
        VAR &COL_NAMES.;
    RUN;

    DATA LINK_FILE_2;
        SET LINK_FILE_1;
        YEAR = SCAN(_NAME_, 2, '_')*1;	 /*DATE = SCAN(_NAME_, 1, '_')*1	MONTH = SCAN(_NAME_, 2, '_')*1; */
        DROP _NAME_;
    RUN;
    PROC SORT DATA = LINK_FILE_2; BY RICCODE YEAR; RUN;		/*MONTH*/
	
	DATA &OUTPUT_FILE.;
		SET LINK_FILE_2(RENAME=(&PREFIX.1=&PREFIX.));
		DROP &PREFIX.2 &PREFIX.3;
	RUN;

    /* DATA LINK_FILE_3;
        SET LINK_FILE_2;
        RETURNS = INPUT(MONTHLYRETURNS1, BEST32.);
        DROP MONTHLYRETURNS2-MONTHLYRETURNS6;
    RUN;

    DATA OUTPUT_FILE_&I.;
        SET LINK_FILE_3;
        WHERE RETURNS NE .;
    RUN; 

    PROC DATASETS LIBNAME = WORK;
        DELETE LINK_FILE_1 LINK_FILE_2 LINK_FILE_3;
    RUN;*/

%MEND TRANSPOSE_GEN_MACROS;

/* *************************************MONTHLYRETURNS PROCESSING ******************************************* */
%MACRO REFINITIV_FILES;
    %DO I = 1 %TO 5; 		/* OUTPUT_FILE = CHANGE THIS TO MONTHLYRETURNS_1 */
        %TRANSPOSE_GEN_MACROS(
            INPUTFILE = C:\Users\em18921\Documents\ESG_NZ_DATA_Excel\Monthlyreturns_&I..csv,
			PREFIX=MONTHLYRETURNS );	/* FOR OUTPUT FILE WRITE MONTHLYRETURNS_&I */
    %END;
%MEND REFINITIV_FILES;

%REFINITIV_FILES;

/* **********************************MACRO FOR ALL OTHER TIME SERIES DATASET******************************************* */
%MACRO SECID_DATA(VAR_ARRAY);
	%LOCAL I VAR_NAME;								/* CREATING TWO LOCAL VARIABLES I AND VAR_NAME */
	%LET NUM_VARS = %SYSFUNC(COUNTW(&VAR_ARRAY));	/* CREATING MACRO VARIABLE NUM_VARS WHICH COUNTS THE NUMBER OF VARIABLES OR WORDS PRESENT IN VAR_ARRAY VARIABLE */

	%DO I = 1 %TO &NUM_VARS;						/* CREATING A DYNAMIC DO LOOP WHICH DEPENDS ON THE NUMBER OF VARIABLES PRESENT IN THE VAR_ARRAY */
		%LET VAR_NAME = %SCAN(&VAR_ARRAY, &I);		/* CREATING MACRO VARIABLE VAR_NAME WHICH GETS THE NAME OF THE VARIABLE FROM VAR_ARRAY */
		%TRANSPOSE_GEN_MACROS (
						   INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\REFINITIV_FILE_&I..CSV',
						   PREFIX=&VAR_NAME,
						   OUTPUT_FILE=&VAR_NAME
						   );
	%END;
%MEND SECID_DATA;		

%LET VAR_ARRAY = ESG_SCORE	ESG_CONTROVERSY; 
%SECID_DATA(&VAR_ARRAY);

/* MERGING ABOVE DATASETS */
%MACRO SET_SD(START=1, END=5);
    DATA MONTHLYRETUNRS_FINAL;
        SET	%DO I = &START %TO &END;
            	OUTPUT_FILE_&I.
       		%END;
		;
    RUN;
%MEND SET_SD;
%SET_SD(START=1, END=5);

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/* ************************************** MERGING DATASETS WITH SECID AND ISIN ************************************************** */
/*%MERGE_CODE_1(INPUT_FILE_1=MONTHLYRETUNRS_FINAL, INPUT_FILE_2=FILE_SET.RIC_CODE, SORT_VARS=RICCODE, OUTPUT_FILE=MONTHLYRETURNS_2);*/
/*%MERGE_CODE_1(INPUT_FILE_1=ESG_SCORE, INPUT_FILE_2=FILE_SET.RIC_CODE, SORT_VARS=RICCODE, OUTPUT_FILE=FILE_SET.ESG_SCORE);*/
/*%MERGE_CODE_1(INPUT_FILE_1=ESG_CONTROVERSY, INPUT_FILE_2=FILE_SET.RIC_CODE, SORT_VARS=RICCODE, OUTPUT_FILE=FILE_SET.ESG_CONTROVERSY);*/

/* CREATING DATASET IN THE MAIN LIBRARY */
/*DATA FILE_SET.MONTHLYRETURNS_DATA;	
	SET MONTHLYRETURNS_2(RENAME=(RETURNS=monthlyreturns));
	DROP MONTHLYRETURNS1 DATE;
RUN;*/

/* MERGING WITH MAIN DATASET */
PROC SORT DATA = FILE_SET.ESG_SCORE; BY SECID YEAR; RUN;
PROC SORT DATA = FILE_SET.ESG_CONTROVERSY; BY SECID YEAR; RUN;
DATA FILE_30;
	MERGE FILE_SET.ESG_SCORE FILE_SET.ESG_CONTROVERSY;
	BY SECID YEAR;
RUN;

/* PUTTING MONTHLY VALUES */
DATA TEST_FILE ;
    SET FILE_30;
    BY SECID YEAR;
    ARRAY MONTHS[12] _TEMPORARY_ (1 2 3 4 5 6 7 8 9 10 11 12);
    DO I = 1 TO 12;
        MONTH = MONTHS[I];
        OUTPUT;
    END;
    DROP I;
RUN;

PROC SORT DATA = TEST_FILE; BY SECID YEAR MONTH; RUN;
PROC SORT DATA = FILE_SET.MONTHLYRETURNS_DATA; BY SECID YEAR MONTH; RUN;
DATA REFINITIV_ALL_DATA;
	MERGE TEST_FILE FILE_SET.MONTHLYRETURNS_DATA;
	BY SECID YEAR MONTH;
	WHERE NOT MISSING(SECID);
RUN;

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/* REMOVE ALL BLANK SECID ENTIRES BEFORE CREATING FINAL FILE */
/*DATA FILE_SET.REFINITIV_ALL_DATA;
	SET REFINITIV_ALL_DATA;
	WHERE NOT MISSING(SECID);
RUN;*/



/* ********************** _____________________ STEP TO CLEAN DATASET OF MONTHLYRETURNS FOR EXTREME OUTLIERS - WINSORIZING DATASET BY 1 AND 99TH PERCENTILE _______________________ ***************************** */
PROC SORT DATA = FILE_SET.REFINITIV_ALL_DATA OUT = MONTHLYRETURNS_DATA; BY DESCENDING monthlyreturns; RUN;

PROC SORT DATA = MONTHLYRETURNS_DATA; BY SECID YEAR MONTH; RUN;

/* CALCULATING PERCENTILES BY SECID */
PROC MEANS DATA = MONTHLYRETURNS_DATA P1 P99 N NOPRINT;
    BY SecID;  
    VAR monthlyreturns;  
    OUTPUT OUT = DATA_1 
        P1=MONTHLYRETURNS_P1  
        P99=MONTHLYRETURNS_P99  
        N=OBS_COUNT;  
RUN;

/* MERGING MONTHLYRETURNS DATA WITH REFINITIV ALL DATA */
DATA STOCK_RET_WIN;
	SET DATA_1;
	DROP _TYPE_ _FREQ_ OBS_COUNT;
RUN;

PROC SORT DATA = STOCK_RET_WIN; BY SecID; RUN;
PROC SORT DATA = MONTHLYRETURNS_DATA; BY SECID YEAR MONTH; RUN;
%MERGE_CODE_1(INPUT_FILE_1=MONTHLYRETURNS_DATA, INPUT_FILE_2=STOCK_RET_WIN, SORT_VARS=SECID, OUTPUT_FILE=MONTHLYRETURNS_12);

/* CHANGE THE NAME OF MONTHLYRETURNS TO MONTHLYRETURNS_ORIGINAL, SO THAT NO CHANGE HAS TO BE DONE IN THE PRECEDING CODE */
DATA STOCK_RETS_1;
	SET MONTHLYRETURNS_12(RENAME=(monthlyreturns=monthlyreturns_ORIGINAL));
RUN;

/* WINSORIZING THE MONTHLY STOCK RETURNS IN THE REFINITIV DATASET */
DATA TEMP_FILE_SET;
	SET STOCK_RETS_1;
	BY SecID;
	IF monthlyreturns_ORIGINAL < monthlyreturns_P1 and monthlyreturns_ORIGINAL ne . THEN monthlyreturns = monthlyreturns_ORIGINAL;		
	IF monthlyreturns_ORIGINAL > monthlyreturns_P99 and monthlyreturns_ORIGINAL ne . THEN monthlyreturns = monthlyreturns_P99;
	IF monthlyreturns = . THEN monthlyreturns = monthlyreturns_ORIGINAL;
run;

/* CREATING ORIGINAL DATASET IN THE LIBRARY */
/*DATA File_set.Refinitiv_all_data_WINSORIZED;
	SET TEMP_FILE_SET;
RUN;*/

/* ********************** _____________ STEP TO CLEAN ABOVE DATASET FOR MONTHLYRETURNS FOR EXTREME OUTLIERS VALUES ________________ ************************* */
DATA REF_MERGE;
	SET TEMP_FILE_SET;							/* THE LIBRARY FILE WHICH CAN BE USED IS - File_set.Refinitiv_all_data_WINSORIZED */
	IF monthlyreturns >= 17975 THEN DO;
		monthlyreturns = 0;
		END;
RUN;

/* *********************************************** MERGING REFINITIV DATA WITH MAIN DATASET ********************************************************* */
/* CREATING A LIGHT WEIGHT TEMP FILE TO MERGE WITH MAIN DATASET */
DATA REFINITIV_DATA;
	SET REF_MERGE;								
	DROP COMBINED_NAME_1 COMBINED_NAME_2 COMBINED_NAME_3 monthlyreturns_P1 monthlyreturns_P99;
RUN;

/* STEP TO CHECK THE DATA FOR MONTHLYRETURNS OUTLIERS IF ANY */
PROC SORT DATA = REFINITIV_DATA; BY DESCENDING monthlyreturns; RUN;

/* STEP TO CHECK FOR MISSING SECID VALUES */
DATA SET_1;
	SET REFINITIV_DATA;
	WHERE NOT MISSING(SECID);
RUN;

/* CREATE TEMPORARY DATASETS BEFORE RUNNING THESE CODES IF DATASETS ARE STORED IN DRIVE AS IT CAN TAKE LOT OF TIME */
%MERGE_CODE_1(INPUT_FILE_1=HD_1TOALL, INPUT_FILE_2=REFINITIV_DATA, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=HD_ALL_DATA);

%MERGE_CODE_1(INPUT_FILE_1=SD_1TOALL, INPUT_FILE_2=REFINITIV_DATA, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=SD_ALL_DATA);

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/* MAKING FINAL DATASET IN LIBRARY */
/*DATA HOLDINGS.HD_ALL_STEP2_STKRET_WIN;
	SET HD_ALL_DATA;
RUN;*/

/*DATA HOLDINGS.SD_ALL_STEP2_STKRET_WIN;
	SET SD_ALL_DATA;
RUN;*/


/*-----------------------------------------------------------------STEP 5--------------------------------------------------------------------------------- */
/************************************************************* FUND LEVEL MERGE ************************************************************************** */
%MACRO DATA_CONVERSION(INPUT_FILE, OUTPUT_DATASET_12, OUTPUT_DATASET, PREFIX);
    FILENAME REFFILE "&INPUT_FILE.";
    
    PROC IMPORT DATAFILE=REFFILE
        DBMS=CSV REPLACE
        OUT=&OUTPUT_DATASET_12.;
        GETNAMES=YES;
        GUESSINGROWS=750;
    RUN;

    PROC SORT DATA=&OUTPUT_DATASET_12.;
        BY FUNDID;
    RUN;

    PROC CONTENTS DATA=&OUTPUT_DATASET_12. OUT=content(keep=name);
    RUN;

    PROC SQL noprint;
        SELECT name INTO :varlist separated by ' '
        FROM content
        WHERE name LIKE 'date_%';
    QUIT;

    PROC TRANSPOSE DATA=&OUTPUT_DATASET_12.
        OUT=&OUTPUT_DATASET.
        PREFIX=&PREFIX.;
        BY FUNDID;
        VAR &varlist.;
    RUN;

    /* Convert character values to numeric */
   DATA &OUTPUT_DATASET.;
        SET &OUTPUT_DATASET.;
        ARRAY value_vars{*} &PREFIX.1:;  /* Array of variables starting with PREFIX */
        DO i = 1 TO DIM(value_vars);
            IF VTYPE(value_vars{i}) = 'C' THEN value_vars{i} = INPUT(COMPRESS(value_vars{i}, ','), BEST32.);
        END;
        MONTH = SCAN(_NAME_, 2, '_')*1;
        YEAR = SCAN(_NAME_, 3, '_')*1;
        DROP _NAME_ i;
    RUN;

    PROC CONTENTS DATA=&OUTPUT_DATASET.;
    RUN;
%MEND DATA_CONVERSION;

/* Call to the macro */
%DATA_CONVERSION(
    INPUT_FILE='C:\Users\em18921\Documents\netasset_NZD.csv',
    OUTPUT_DATASET_12=netasset_nzd_12,
    OUTPUT_DATASET=netasset_nzd,
    PREFIX=Netasset_NZD
	);
%DATA_CONVERSION(
    INPUT_FILE='C:\Users\em18921\Documents\FundReturns_9Sept.csv',
    OUTPUT_DATASET_12=fundreturns_nzd_12,
    OUTPUT_DATASET=fundreturns_nzd,
    PREFIX=Fundreturns_NZD	);		/*'C:\Users\em18921\Documents\monthlyreturn_NZD.csv'-PREVIOUS VERSION FILE*/

/* FUNDLEVEL DATASET */
PROC SORT DATA = NETASSET_NZD; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FUNDRETURNS_NZD; BY FUNDID YEAR MONTH; RUN;
DATA TEST_987;
	MERGE NETASSET_NZD FUNDRETURNS_NZD;
	BY FUNDID YEAR MONTH;
	Netassets_NZD = Netasset_NZD1*1;
	DROP Netasset_NZD1;
RUN;

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/*DATA FILE_SET.FUNDLEVEL_MERGE_STKRET_WIN;
	SET TEST_987;
RUN;*/

/* MERGING FUNDLEVLE DATASET WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=HD_ALL_DATA, INPUT_FILE_2=FILE_SET.FUNDLEVEL_MERGE_STKRET_WIN, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=HD_ALL_DATA_12);

%MERGE_CODE_1(INPUT_FILE_1=SD_ALL_DATA, INPUT_FILE_2=FILE_SET.FUNDLEVEL_MERGE_STKRET_WIN, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=SD_ALL_DATA_12);

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/*DATA HOLDINGS.HD_ALL_STEP3_STKRET_WIN;
	SET HD_ALL_DATA_12;
RUN;

DATA HOLDINGS.NZD_DATASET_AUM_STKRET_WIN;
	SET SD_ALL_DATA_12;
RUN;*/


/* *************************************************************** PART B ******************************************************************************** */
/*-----------------------------------------------------------------STEP 1--------------------------------------------------------------------------------- */
/* ********************************************TAKING FUNDS WHICH HAVE MONTHLY RETURNS VALUES ONLY***************************************************************** */
/* TAKING FUNDS WHICH HAVE MONTHLY RETURNS VALUES ONLY */
/* GETTING DATA FROM SD_ALL_DATA */
DATA SD_ALL_DATA_12;
	SET HOLDINGS.NZD_DATASET_AUM_STKRET_WIN;
RUN;

/* CREATING DATASET WHERE MONTHLYRETURNS COUNT RATIO IS MORE THAN 0 */
PROC SQL;
	CREATE TABLE DATA_987 AS
	SELECT FUNDID, SECID, MONTH, YEAR, COUNT(SECID) AS SECID_COUNT, COUNT(*) AS TOTAL_COUNT, COUNT(MONTHLYRETURNS) AS RETURNS_COUNT
	FROM SD_ALL_DATA_12 
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

PROC SQL;
	CREATE TABLE DATA_001 AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, TOTAL_COUNT, RETURNS_COUNT
	FROM DATA_987 
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

%MERGE_CODE_1(INPUT_FILE_1=SD_ALL_DATA_12, INPUT_FILE_2=DATA_001, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=SD_ALL_DATA);

DATA DATA_009;
	SET SD_ALL_DATA;
	COUNT_RATIO = RETURNS_COUNT/TOTAL_COUNT;
RUN;

DATA SD_ALL_DATA_12;
	SET DATA_009;
	WHERE COUNT_RATIO > 0;				/* THE COUNT HAS TO BE A POSITIVE NO */
RUN;

/* ********************************************************************************** CODE IS GENERIC FROM HERE FOR ALL DATASETS *********************************************************************************** */
/* CREATING SHARES HOLDINGS VARIABLES */
DATA SD_ALL_DATA_12;
    SET SD_ALL_DATA_12(RENAME=(ESG_SCORE=ESGSCORE));
RUN;

DATA HOLDINGS_ESG_FUND;
	SET SD_ALL_DATA_12;
	STOCK_WEIGHT_DECIMAL = Percentholdings/100;
	DECOMPOSED_STK_RET = STOCK_WEIGHT_DECIMAL * Fundreturns_NZD1;/* FUND RETURNS IS IN PERCENTAGE */
	CAPITAL_INVESTED_PER_HOLDING = STOCK_WEIGHT_DECIMAL * Netassets_NZD;	 
	IF ESGSCORE NE . THEN ESG = 1; 
	ELSE ESG = 0;
	YY_MON = INTNX('MONTH', MDY(MONTH, 1, YEAR), 0);
    FORMAT YY_MON YYMON7.; /* FORMAT THE NEW DATE VARIABLE */
RUN;

/* STEP (1.4)  :  ADDING LIQUIDITY DATA IN THE ABOVE DATASET.*/
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Liquidated_info.csv',
			   OUTPUT_FILE=FILE_SET.LIQUIDATED_INFO);

DATA LIQUIDATED_INFO;
SET FILE_SET.LIQUIDATED_INFO;
 	LIQ_YR_MON = INTNX('MONTH', MDY(LIQ_MONTH, 1, LIQ_YEAR), 0);
    FORMAT LIQ_YR_MON YYMON7.; /* FORMAT THE NEW DATE VARIABLE */
	IF LIQ_YR_MON NE . THEN LIQUIDATED = 1;
	ELSE LIQUIDATED = 0;
RUN;

PROC SORT DATA = HOLDINGS_ESG_FUND; BY FUNDID ; RUN;

PROC SORT DATA = LIQUIDATED_INFO; BY FUNDID; RUN;

DATA HOLDINGS_LIQ;
	MERGE HOLDINGS_ESG_FUND(IN=A) LIQUIDATED_INFO(IN=B);
	BY FUNDID;
	IF A;
    IF LIQUIDATED = 1 AND YY_MON < LIQ_YR_MON THEN ALIVE = 1;
	ELSE ALIVE = 0;
	IF LIQ_YR_MON = . THEN ALIVE = 1;
RUN;

/* STEP (1.5)  :  FILTERING DATASETS 1) FROM JULY 2007 TO DECEMBER 2022. 2) EXCLUDING DATAPOINTS WHICH DONT HAVE NETASSETS VALUES IN FINAL DATASET*/
			  /*THE DATASET OBTAINED IS FINAL DATASET*/
DATA NZD_TOTAL_AUM;		/*MAIN DATASET*/
    SET HOLDINGS_LIQ; 				
    WHERE 
        (YEAR > 2007 AND YEAR < 2022) OR 
        (YEAR = 2007 AND MONTH >= 7) OR 
        (YEAR = 2022 AND MONTH <= 12); 
		IF FUNDID NE " " ;
RUN;

/*-----------------------------------------------------------------------------STEP 2------------------------------------------------------------------------------------------------*/
/*--------------------------------------------------------CREATING SECOND DATASET - HD DATA SET--------------------------------------------------------------------------------------*/
/* STEP (2.1)  :  MERGING ALL HD DATASET OF KIWISAVER AND NZ OPEN TOGETHER.*/
DATA FUND_SET.NZD_DATASET_FINAL_STKRET_BACKUP;
	SET NZD_DATASET_FINAL;
RUN;



PROC SORT DATA = HOLDINGS.HD_ALL_STEP3_STKRET_WIN OUT = HD_ALL_DATA; BY FUNDID YEAR MONTH; RUN;

DATA HD_ALL_DATA;
	SET HD_ALL_DATA_12(RENAME=(ESG_SCORE=ESGSCORE));
RUN;

DATA HOLDINGS_DATA;
	SET HD_ALL_DATA;
	BY FUNDID YEAR MONTH; 
	IF ESGSCORE NE . THEN ESG = 1; 
	ELSE ESG = 0;
	 YY_MON = INTNX('MONTH', MDY(MONTH, 1, YEAR), 0);
    FORMAT YY_MON YYMON7.; 							/* FORMAT THE NEW DATE VARIABLE */
RUN;

/*STEP  (2.4)  :  FILTERING THE ABOVE DATASET FROM JULY 2007 TO DECEMBER 2022. FILTERING DATASET ON NON MISSING NETASSETS VALUES.*/
DATA HD_ALL_123;								
    SET HOLDINGS_DATA; 				
    WHERE 
        (YEAR > 2007 AND YEAR < 2022) OR 
        (YEAR = 2007 AND MONTH >= 7) OR 
        (YEAR = 2022 AND MONTH <= 12); 
		IF FUNDID NE " ";
RUN;

DATA NZD_HD_ALL_FINAL;							/*MAIN DATASET TO BE USED IN STOCKS CALCULATIONS BUT CHECK FOR MISSING FUNDRETURNS AND NETASSETS*/
	SET HD_ALL_123;
	IF NETASSETS_NZD NE . ;
RUN;


/* -------------------------------------------------------------------------------STEP 3 --------------------------------------------------------------------------------------------*/
/* CREATING DATASET WHERE FUNDRETURNS NOT EQUAL TO MISSING */
/* THIS DATASET IS THE MAIN DATASET TO BE USED IN ALL CALCULATIONS HENCEFORTH */
DATA NZD_DATASET_FINAL ;
	SET Nzd_total_aum ; 
	WHERE Fundreturns_NZD1 NE . AND Netassets_NZD NE . ;
RUN;

/* -------------------------------------------------------------------------------STEP 4--------------------------------------------------------------------------------------------*/
/* CREATING A FLAG FOR VALUES WHERE FUNDRETURNS AND NETASSET NOT EQUAL TO MISSING */
PROC SORT DATA = NZD_DATASET_FINAL; BY FUNDID YEAR MONTH; RUN;
DATA NZD_DATASET_FINAL;
	SET NZD_DATASET_FINAL;
	IF FUNDRETURNS_nzd1 NE . AND Netassets_NZD NE . ;
	NON_MISSING = 1;
RUN;

/* --------------------------------------------------------------------------STEP 5----------------------------------------------------------------------------*/
/* MERGING NETASSETS AND FUNDRETURNS NOT MISSING FLAG WITH HD_ALL_FINAL FILE */
/* STEP (6.1) : SELECTING DISTINCT VALUES FOR EACH FUND */
PROC SQL;
	CREATE TABLE NON_MISSING_FLAG AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, NON_MISSING
	FROM NZD_DATASET_FINAL
	WHERE NON_MISSING = 1;
QUIT;

/* STEP (6.2) : MERGING ABOVE DATA WITH HD_ALL DATA */
PROC SORT DATA = NON_MISSING_FLAG; BY FUNDID YEAR MONTH; RUN;

PROC SORT DATA = NZD_HD_ALL_FINAL OUT = FILE_1; BY FUNDID YEAR MONTH; RUN;

DATA NZD_HD_ALL_FINAL;
	MERGE 	FILE_1( IN = A ) 		NON_MISSING_FLAG (IN = B);
	BY FUNDID YEAR MONTH;
	IF A AND B;	/* THE CORRECT CODE IS IF AND B. USE THIS. */
RUN;

PROC SQL;
	CREATE TABLE DATA_1 AS
	SELECT DISTINCT FUNDID, YEAR, MONTH
	FROM NZD_HD_ALL_FINAL;
QUIT;

/* MERGING THE ABOVE DATASET WITH HOLDINGS DATASET */
PROC SORT DATA = NZD_DATASET_FINAL OUT = DATA_030; BY FUNDID YEAR MONTH; RUN;
DATA NZD_DATASET_FINAL;
	MERGE DATA_030(IN = A) DATA_1(IN = B);
	BY FUNDID YEAR MONTH;
	IF A AND B;	/* THE CORRECT CODE IS IF AND B. USE THIS. */
	DROP TOTAL_COUNT RETURNS_COUNT COUNT_RATIO;
RUN;

/* CHECK FOR IF ENTRIES ARE COMMON IN BOTH THE DATASET */
PROC SQL;
	CREATE TABLE DATA_3 AS
	SELECT DISTINCT FUNDID, YEAR, MONTH
	FROM NZD_DATASET_FINAL;
QUIT;

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/* CREATING PERMANENT DATASET IN THE LIBRARY - FOR SHARES DATA*/
/*DATA FILE_SET.NZD_DATASET_FINAL_STKRET_WIN;
	SET NZD_DATASET_FINAL;
RUN;*/

/* CREATING PERMANENT DATASET IN THE LIBRARY - FOR HOLDINGS TYPE DATA*/
DATA FILE_SET.NZD_HD_ALL_FINAL_STKRET_WIN;
	SET NZD_HD_ALL_FINAL;
RUN;

/* ****************__________________ CREATING ALTERNATE DATASET IN LIBRARY __________________**************** */
/* THESE BACKUP FILES ARE CREATED IN THE SAME LIBRARY AS NZD_DATASET_FINAL LIBRARY FOR THE SAKE OF CLARITY PURPOSE. 
   PREVIOUS STEP FILES ARE CREATED IN DIFFERENT LIBRARY, I.E. HOLDINGS LIBRARY */
/*DATA FILE_SET.NZD_DATASET_FINAL_STEP4_STKRET_WIN;
	SET FILE_SET.NZD_DATASET_FINAL_STKRET_WIN;
RUN;*/

/* CREATING PERMANENT DATASET IN THE LIBRARY - FOR HOLDINGS TYPE DATA*/
/*DATA FILE_SET.HD_ALL_STEP4_STKRET_WIN;
	SET FILE_SET.NZD_HD_ALL_FINAL_STKRET_WIN;
RUN;*/


/*--------------------------------------------------------------------- STEP 6 : FUNDRETURNS CALS-----------------------------------------------------------------------------------*/
/*--------------------------------------------CALCULATION OF ESG VW FUND RETURNS FOR FUND PORTFOLIO---------------------------------------------------------------------------------*/
/*--------------------------------------------CALCULATION OF NON ESG VW FUND RETURNS FOR FUND PORTFOLIO-----------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF EQUAL WEIGHTED AVG FUND RETURNS----------------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF VALUE WEIGHTED AVG FUND RETURNS-------------------------------------------------------------------------------------------*/

/* STEP  (6.1)  :  CALCULATING VALUE WEIGHTED ESG FUND RETURN PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESG = 1 AND  MONTHLYRETURNS NE . ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR MONTHLYRETURNS;
	OUTPUT OUT = ESG_RETURNS_VW MEAN (MONTHLYRETURNS) = VW_ESG_RETURNS;
RUN;

/* STEP (6.2)  :  CALCULATING VALUE WEIGHTED NON ESG FUND RETURN PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING ;
	WHERE ESG = 0 AND  MONTHLYRETURNS NE . ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR MONTHLYRETURNS;
	OUTPUT OUT = NON_ESG_RETURNS_VW MEAN (MONTHLYRETURNS) = VW_NON_ESG_RETURNS;
RUN;

/* STEP (6.3)  :  MERGING ESG_RETURNS_VW AND NON_ESG_RETURNS_VW DATASETS */
PROC SORT DATA = ESG_RETURNS_VW ;
	BY FUNDID YEAR MONTH ;
RUN;

PROC SORT DATA = NON_ESG_RETURNS_VW ;
	BY FUNDID YEAR MONTH ;
RUN;

DATA TOTAL_FUNDRETURNS;
	MERGE ESG_RETURNS_VW ( IN = A ) NON_ESG_RETURNS_VW ( IN = B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_ ; 
RUN;

/* STEP  (6.4)  :  CALCULATING VALUE WEIGHTED ESG FUND RETURN DECOMPOSED PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESG = 1 ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR DECOMPOSED_STK_RET;
	OUTPUT OUT = VW_ESG_RETURNS_DECOMP MEAN (DECOMPOSED_STK_RET) = VW_ESG_RETURNS_DECOMP;
RUN;

/* STEP (6.5)  :  CALCULATING VALUE WEIGHTED NON ESG FUND RETURN DECOMPOSED PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING ;
	WHERE ESG = 0 ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR DECOMPOSED_STK_RET;
	OUTPUT OUT = VW_NON_ESG_RETURNS_DECOMP MEAN (DECOMPOSED_STK_RET) = VW_NON_ESG_RETURNS_DECOMP;
RUN;

/* STEP (6.6)  :  MERGING VW_ESG_RETURNS_DECOMP AND VW_NON_ESG_RETURNS_DECOMP DATASETS */
PROC SORT DATA = VW_ESG_RETURNS_DECOMP ;
	BY FUNDID YEAR MONTH ;
RUN;

PROC SORT DATA = VW_NON_ESG_RETURNS_DECOMP ;
	BY FUNDID YEAR MONTH ;
RUN;

DATA TOTAL_FUNDRETURNS_DECOMP;
	MERGE VW_ESG_RETURNS_DECOMP ( IN = A ) VW_NON_ESG_RETURNS_DECOMP ( IN = B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_ ; 
RUN;

/* STEP (6.7)  :  CALCULATING FUNDRETURNS_NEW_VAL  BY ADDING ESG_RETURNS_VW AND NON_ESG_RETURNS_VW */
DATA FUNDRETURNS_NEW;
    MERGE 	TOTAL_FUNDRETURNS (IN = A)	TOTAL_FUNDRETURNS_DECOMP (IN = B) ;
	BY FUNDID YEAR MONTH;
    FUNDRETURNS_VW = SUM(VW_ESG_RETURNS, VW_NON_ESG_RETURNS);
	FUNDRETURNS_VW_DECOMP = SUM(VW_ESG_RETURNS_DECOMP, VW_NON_ESG_RETURNS_DECOMP) ;
RUN;

/* STEP (6.8) :  MERGING FUNDRETURNS_NEW DATASET WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FUNDRETURNS_NEW, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);
 

/*---------------------------------------------------------------------STEP 8-------------------------------------------------------------------------------------------------------*/
/*----------------------------------CALCULATION TOTAL ASSET UNDER MANAGEMENT (AUM) OF DATASET FOR ESG HOLDINGS----------------------------------------------------------------------*/
/*----------------------------------CALCULATION AVERAGE ASSET UNDER MANAGEMENT (AUM) OF DATASET FOR ESG HOLDINGS--------------------------------------------------------------------*/

/*STEP (8.1) : CALCULATING SUM_ESG_CAPITAL OF EACH FUND PER MONTH AND YEAR FOR OVERALL DATA*/
%PROC_SUMMARY_ESG1(INPUT_FILE=NZD_DATASET_FINAL, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=CAPITAL_INVESTED_PER_HOLDING, OUTPUT_FILE=ESG_AUM_MONTHLY, STATS_OPS=SUM, CALCULATED_VAR=SUM_ESG_CAPITAL_NZD);

/*STEP (8.2) : MERGING DATASET WITH MAIN DATA*/
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=ESG_AUM_MONTHLY, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);


/*-------------------------------------------------------------------------STEP 9---------------------------------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF TOTAL ESG HOLDINGS BY WEIGHT------------------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------CALCULATION OF ESG TILT-------------------------------------------------------------------*/

/* STEP (9.1) - CALCULATING TOTAL WEIGHT OF ESG HOLDINGS PER FUND - SUM OF PERCENTHOLDINGS PER FUND PER MONTH PER YEAR */
%PROC_SUMMARY_ESG1(INPUT_FILE=NZD_DATASET_FINAL, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=PERCENTHOLDINGS, OUTPUT_FILE=ESG_TOTAL_HOLDINGS, STATS_OPS=SUM, CALCULATED_VAR=NZD_ESG_WT_OF_FUND);

/*STEP (9.2) : MERGING DATASET WITH MAIN DATA*/
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=ESG_TOTAL_HOLDINGS, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/*STEP (9.3) : CALCULATING AVERAGE ESG HOLDINGS FOR THE MONTH AND YEAR
		       CALCULATING TOTAL INDUSTRY ESG WEIGHT FOR THE MONTH AND YEAR FOR OVERALL DATA */
%PROC_SUMMARY_OVERALL(INPUT_FILE=ESG_TOTAL_HOLDINGS, CLASS_VARS=YEAR MONTH, VARIABLES=NZD_ESG_WT_OF_FUND, OUTPUT_FILE=INDUSTRY_AVG, STATS_OPS=MEAN, CALCULATED_VAR=INDUSTRY_AVG_ESG_WT_NZD);

/* STEP (9.4) : A)MERGING DATASET WITH MAIN DATASET
              B)CALCULATING ESG TILT FOR THE FUND*/
PROC SORT DATA = INDUSTRY_AVG; BY YEAR MONTH;  RUN;
PROC SORT DATA = ESG_TOTAL_HOLDINGS ; BY YEAR MONTH; RUN;

DATA ESG_HOLDINGS_TILT_NZD; 
    MERGE ESG_TOTAL_HOLDINGS(IN=A) INDUSTRY_AVG(IN=B);
    BY YEAR MONTH;
    IF A;
    ESG_TILT_INCLUSIVE_NZD = NZD_ESG_WT_OF_FUND - INDUSTRY_AVG_ESG_WT_NZD;
	DROP INDUSTRY_AVG_ESG_WT_NZD NZD_ESG_WT_OF_FUND;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=ESG_HOLDINGS_TILT_NZD, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);


/* *************************************************************************************** STEP 10 ********************************************************************************** */
/* ********************************************************************************* ESG TILT EXCLUSIVE ***************************************************************************** */
PROC SQL;
	CREATE TABLE DATA_24 AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, NZD_ESG_WT_OF_FUND
	FROM NZD_DATASET_FINAL
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

PROC SQL;
    CREATE TABLE DATA_12 AS
    SELECT FUNDID, YEAR, MONTH, NZD_ESG_WT_OF_FUND, SUM(NZD_ESG_WT_OF_FUND)AS ESG_WT_SUM, COUNT (FUNDID) AS FUNDID_COUNT
    FROM DATA_24
	GROUP BY YEAR, MONTH;
QUIT;

DATA DATA_33;
    SET DATA_12;
    ESG_WT_EXCLUSIVE_AVG = (ESG_WT_SUM - NZD_ESG_WT_OF_FUND) / (FUNDID_COUNT - 1);
	ESG_TILT_EXCLUSIVE_NZD = NZD_ESG_WT_OF_FUND - ESG_WT_EXCLUSIVE_AVG;
	KEEP FUNDID YEAR MONTH FUNDID_COUNT ESG_WT_EXCLUSIVE_AVG ESG_TILT_EXCLUSIVE_NZD;
RUN;

/* MERGE WITH HOLDINGS LEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=Nzd_dataset_final, INPUT_FILE_2=DATA_33, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=Nzd_dataset_final);	


/* ****************************************************************** STEP 11 ************************************************************************* */
/* ******************************************* CALCULATION OF ESG FUND FLOWS FOR FUND PORTFOLIO ******************************************************* */
/* STEP (11.1) : CREATING DATASET FOR ESG FUND FLOWS CALCULATIONS */
PROC SQL;
	CREATE TABLE ESGSET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, VW_ESG_RETURNS_DECOMP, SUM_ESG_CAPITAL_NZD, NZD_ESG_WT_OF_FUND
	FROM NZD_DATASET_FINAL
	WHERE ESG =1;
QUIT;
RUN;

/* STEP (11.2) : FUND ESG FLOW CALCULATIONS */
DATA ESGFUND_FLOW_NZD;
    SET ESGSET;
    BY FUNDID;
    LAGGED_ESGNETASSET = LAG(SUM_ESG_CAPITAL_NZD); 		   			/*CREATING NEW VARIABLE LAGGED_NETASSET*/
  
  	IF FIRST.FUNDID THEN LAGGED_ESGNETASSET = 0;  	   			/*SET THE LAGGED VALUE FOR THE FIRST OBSERVATION AS FOR EACH NEW FUNDID*/
   	
   	CHANGE_ESGNETASSET = SUM_ESG_CAPITAL_NZD - LAGGED_ESGNETASSET; 	
   	
   	IF NOT MISSING(SUM_ESG_CAPITAL_NZD) AND SUM_ESG_CAPITAL_NZD NE 0 AND NOT MISSING(CHANGE_ESGNETASSET) THEN DO;
	 															/*CHECK FOR AND HANDLE MISSING VALUES AND ZEROS*/
    	CHANGE_ESGNETASSET_PERCENT = (CHANGE_ESGNETASSET / LAGGED_ESGNETASSET) * 100 ;  	
	END;
	ELSE CHANGE_ESGNETASSET_PERCENT = .; 						/* SET CHANGE_NETASSET_PERCENT TO MISSING WHEN NETASSET IS ZERO */
	
	IF NOT MISSING(VW_ESG_RETURNS_DECOMP) AND VW_ESG_RETURNS_DECOMP NE 0 THEN DO; 	/*CHECK FOR MISSING VALUES AND ZEROS*/
    	VW_ESG_RETURNS_DECIMAL = VW_ESG_RETURNS_DECOMP/100;	
    END;
	ELSE VW_ESG_RETURNS_DECIMAL = .; 
	
	ESG_DOLLAR_FLOW_NZD = (SUM_ESG_CAPITAL_NZD - (LAGGED_ESGNETASSET * (1 + VW_ESG_RETURNS_DECIMAL))) ; 
	
	IF NOT MISSING(LAGGED_ESGNETASSET) AND LAGGED_ESGNETASSET NE 0 AND NOT MISSING(ESG_DOLLAR_FLOW_NZD) THEN DO; /*CHECK FOR MISSING VALUES AND ZEROS*/
    	ESG_FLOW_PERCENT_NZD = (ESG_DOLLAR_FLOW_NZD / LAGGED_ESGNETASSET) * 100;
    END;
	ELSE ESG_FLOW_PERCENT_NZD = .;
RUN;

/* STEP (11.3) : CREATING TEMP DATASET TO DROP EXTRA COLUMNS FROM ESGFUND_FLOW FILE TO MERGE IT WITH TOTAL_DATASET_FINAL */
DATA ESG_FLOW_TEMP;	
	SET ESGFUND_FLOW_NZD;
	DROP VW_ESG_RETURNS_DECOMP SUM_ESG_CAPITAL_NZD NZD_ESG_WT_OF_FUND LAGGED_ESGNETASSET CHANGE_ESGNETASSET CHANGE_ESGNETASSET_PERCENT VW_ESG_RETURNS_DECIMAL ;
RUN;

/* STEP (11.4) : MERGING ESG_FLOW_TEMP DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=ESG_FLOW_TEMP, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);


/*--------------------------WINSORIZATION DONE AND CALCULATING ESG_FLOW_PERCENT_WIN------------------------------*/
/* STEP (11.5) : CREATING DATASET FOR CALCULATING WINSORIZED VALEUS */
PROC SQL;
	CREATE TABLE ESG_FLOW_PERCENT AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, ESG_FLOW_PERCENT_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL;
QUIT;

/* STEP (11.10) : WINSORIZATION FOR OVERALL FLOW TO CALCULATE AVG_ESG_FLOW_PERCENT_WIN ACROSS MONTH AND YEAR */

PROC SORT DATA = ESG_FLOW_PERCENT ; BY YEAR; RUN;

PROC SUMMARY DATA = ESG_FLOW_PERCENT ;
	VAR ESG_FLOW_PERCENT_NZD ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

DATA WANT_ESG;
	if _N_ = 1 then set _STATS_;
	SET	ESG_FLOW_PERCENT ; 
	IF ESG_FLOW_PERCENT_NZD < FLOW_P1 AND ESG_FLOW_PERCENT_NZD NE .  THEN ESG_FLOW_PERCENT_WIN_NZD = FLOW_P1 ; 
	IF ESG_FLOW_PERCENT_NZD > FLOW_P99 AND ESG_FLOW_PERCENT_NZD NE .  THEN ESG_FLOW_PERCENT_WIN_NZD = FLOW_P99 ; 
	IF ESG_FLOW_PERCENT_WIN_NZD = . THEN ESG_FLOW_PERCENT_WIN_NZD = ESG_FLOW_PERCENT_NZD ;
	DROP _TYPE_ 	_FREQ_		ESG_FLOW_PERCENT_NZD		BINARYVAR 	FLOW_P1		FLOW_P99 ;
RUN;

/* STEP (11.13) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=WANT_ESG, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);


/* ************************************************************************************* STEP 12 ********************************************************************************** */
/* ****************************************** CALCULATION OF OVERALL FUND FLOWS FOR FUND PORTFOLIO ******************************************************************************** */
/* STEP (12.1) : CREATING DATASET FOR OVERALL FUND FLOWS CALCULATIONS */
PROC SQL;										
	CREATE TABLE FUNDFLOW_DATASET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, Fundreturns_NZD1, Netassets_NZD
	FROM NZD_DATASET_FINAL ;										
QUIT;
RUN;

/* STEP (12.2) : CALCULATING FUND FLOWS FOR THE DATASET */

DATA FLOW_CALS_NZD; 
    SET FUNDFLOW_DATASET;
    BY FUNDID;
    LAGGED_NETASSET = LAG(Netassets_NZD); 		   /*CREATING NEW VARIABLE LAGGED_NETASSET*/
  
  	IF FIRST.FUNDID THEN LAGGED_NETASSET = 0;  /*SET THE LAGGED VALUE FOR THE FIRST OBSERVATION AS FOR EACH NEW FUNDID*/
   	
    NETASSET_CHANGE = Netassets_NZD - LAGGED_NETASSET; 	/*CREATING NEW VARIABLE*/
   	
   	IF NOT MISSING(Netassets_NZD) AND Netassets_NZD NE 0 AND NOT MISSING(NETASSET_CHANGE) THEN DO; 	/*CHECK FOR AND HANDLE MISSING VALUES AND ZEROS*/
    	CHANGE_NETASSET_PERCENT = ROUND((NETASSET_CHANGE / Netassets_NZD) * 100, 0.01);  /*CREATING NEW VARIABLE. OUT OF CURIOSITY AND FOR HANDLING MISSING VALUES AND ZEROS*/
    END;
	ELSE CHANGE_NETASSET_PERCENT = .; /* SET CHANGE_NETASSET_PERCENT TO MISSING WHEN NETASSET IS ZERO */
	
	IF NOT MISSING(Fundreturns_NZD1) AND Fundreturns_NZD1 NE 0 THEN DO; 	/*CHECK FOR MISSING VALUES AND ZEROS*/
    	FUNDRETURNS_NEW_VAL_DECIMAL = Fundreturns_NZD1/100;
    END;
	ELSE FUNDRETURNS_NEW_VAL_DECIMAL = .; 
	
	FLOW_DOLLAR_VALUE_NZD = (Netassets_NZD -(LAGGED_NETASSET *(1 + FUNDRETURNS_NEW_VAL_DECIMAL))); 
	
	IF NOT MISSING(LAGGED_NETASSET) AND LAGGED_NETASSET NE 0 AND NOT MISSING(FLOW_DOLLAR_VALUE_NZD) THEN DO; /*CHECK FOR MISSING VALUES AND ZEROS*/
    	FLOW_PERCENT_NZD = (FLOW_DOLLAR_VALUE_NZD/LAGGED_NETASSET)*100 ;
    END;
	ELSE CHANGE_NETASSET_PERCENT = .;
RUN;

/* STEP (12.3) : CREATING TEMP DATASET TO DROP EXTRA COLUMNS FROM FLOW_CALS FILE TO MERGE IT WITH TOTAL_DATASET_FINAL */
DATA FLOW_TEMP;	
	SET FLOW_CALS_NZD;
	DROP Fundreturns_NZD1 Netassets_NZD LAGGED_NETASSET NETASSET_CHANGE CHANGE_NETASSET_PERCENT FUNDRETURNS_NEW_VAL_DECIMAL ;
RUN;

/* STEP (12.4) : MERGING FLOW_TEMP DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FLOW_TEMP, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/************************************ WINSORIZATION DONE FOR WHOLE DATASET ************************************************ */
/* STEP (12.5) : CREATING DATASET OF DISTINCT VALUES TO CREATE FLOW PERCENT ACROSS YEAR AND MONTH */
PROC SQL;
	CREATE TABLE FLOW_PERCENT_SET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, FLOW_PERCENT_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL;
QUIT;

/* STEP (12.10) : WINSORIZATION DONE FOR OVERALL FLOW TO CALCULATE AVG_FLOW_PERCENT ACROSS MONTH AND YEAR */
PROC SUMMARY DATA = FLOW_PERCENT_SET ;
	VAR FLOW_PERCENT_NZD ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

/* STEP (12.11) - CREATING WINSORIZED DATASET */
DATA WANT;
    IF _N_ = 1 THEN SET _STATS_;
    SET FLOW_PERCENT_SET;  
    IF FLOW_PERCENT_NZD < FLOW_P1 AND FLOW_PERCENT_NZD NE . THEN FLOW_PERCENT_WIN_NZD = FLOW_P1; 
    IF FLOW_PERCENT_NZD > FLOW_P99 AND FLOW_PERCENT_NZD NE . THEN FLOW_PERCENT_WIN_NZD = FLOW_P99; 
    IF FLOW_PERCENT_WIN_NZD = . THEN FLOW_PERCENT_WIN_NZD = FLOW_PERCENT_NZD;
	DROP _TYPE_ _FREQ_ FLOW_PERCENT_NZD BINARYVAR  FLOW_P1 FLOW_P99;
RUN;

/* STEP (12.14) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=WANT, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);



/* *********************************************************************** STEP 13 ******************************************************************************** */
/********************************************-CALCULATION OF OVERALL DECOMPOSED FUND FLOWS FOR FUND PORTFOLIO-***************************************************** */
/* STEP (13.1) : CREATING DATASET FOR OVERALL FUND FLOWS CALCULATIONS */
PROC SQL;										
	CREATE TABLE FUNDFLOW_DATASET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, Netassets_NZD, FUNDRETURNS_VW_DECOMP, FUNDRETURNS_NZD1
	FROM NZD_DATASET_FINAL 
	GROUP BY FUNDID, YEAR, MONTH;										
QUIT;
RUN;

/* STEP (13.2) : CALCULATING FUND FLOWS FOR THE DATASET */
DATA FLOW_CALS_NZD; 
    SET FUNDFLOW_DATASET;
    BY FUNDID;
    LAGGED_NETASSET = LAG(Netassets_NZD); 		   /*CREATING NEW VARIABLE LAGGED_NETASSET*/
  
  	IF FIRST.FUNDID THEN LAGGED_NETASSET = 0;  /*SET THE LAGGED VALUE FOR THE FIRST OBSERVATION AS FOR EACH NEW FUNDID*/
   	
    NETASSET_CHANGE = Netassets_NZD - LAGGED_NETASSET; 	/*CREATING NEW VARIABLE*/
   	
   	IF NOT MISSING(Netassets_NZD) AND Netassets_NZD NE 0 AND NOT MISSING(NETASSET_CHANGE) THEN DO; 	/*CHECK FOR AND HANDLE MISSING VALUES AND ZEROS*/
    	CHANGE_NETASSET_PERCENT = ROUND((NETASSET_CHANGE / Netassets_NZD) * 100, 0.01);  /*CREATING NEW VARIABLE. OUT OF CURIOSITY AND FOR HANDLING MISSING VALUES AND ZEROS*/
    END;
	ELSE CHANGE_NETASSET_PERCENT = .; /* SET CHANGE_NETASSET_PERCENT TO MISSING WHEN NETASSET IS ZERO */
	
	IF NOT MISSING(FUNDRETURNS_VW_DECOMP) AND FUNDRETURNS_VW_DECOMP NE 0 THEN DO; 	/*CHECK FOR MISSING VALUES AND ZEROS*/
    	FUNDRETURNS_NEW_VAL_DECIMAL = FUNDRETURNS_VW_DECOMP/100;
    END;
	ELSE FUNDRETURNS_NEW_VAL_DECIMAL = .; 
	
	FLOW_DOLLAR_VAL_DECOMP_NZD = (Netassets_NZD -(LAGGED_NETASSET *(1 + FUNDRETURNS_NEW_VAL_DECIMAL))); 
	
	IF NOT MISSING(LAGGED_NETASSET) AND LAGGED_NETASSET NE 0 AND NOT MISSING(FLOW_DOLLAR_VAL_DECOMP_NZD) THEN DO; /*CHECK FOR MISSING VALUES AND ZEROS*/
    	FLOW_PERCENT_DECOMP_NZD = (FLOW_DOLLAR_VAL_DECOMP_NZD/LAGGED_NETASSET)*100 ;
    END;
	ELSE CHANGE_NETASSET_PERCENT = .;
RUN;

/* STEP (13.3) : CREATING TEMP DATASET TO DROP EXTRA COLUMNS FROM FLOW_CALS FILE TO MERGE IT WITH TOTAL_DATASET_FINAL */
DATA FLOW_TEMP;	
	SET FLOW_CALS_NZD;
	DROP FUNDRETURNS_VW_DECOMP Netassets_NZD LAGGED_NETASSET NETASSET_CHANGE CHANGE_NETASSET_PERCENT FUNDRETURNS_NEW_VAL_DECIMAL FUNDRETURNS_NZD1 ;
RUN;

/* STEP (13.4) : MERGING FLOW_TEMP DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FLOW_TEMP, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/************************************ WINSORIZATION DONE FOR WHOLE DATASET *************************************************** */
/* STEP (13.5) : CREATING DATASET OF DISTINCT VALUES TO CREATE FLOW PERCENT ACROSS YEAR AND MONTH */
PROC SQL;
	CREATE TABLE FLOW_PERCENT_SET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, FLOW_PERCENT_DECOMP_NZD, BINARYVAR
	FROM NZD_DATASET_FINAL;
QUIT;

/* STEP (13.10) : WINSORIZATION DONE FOR OVERALL FLOW TO CALCULATE AVG_FLOW_PERCENT ACROSS MONTH AND YEAR */
PROC SUMMARY DATA = FLOW_PERCENT_SET ;
	VAR FLOW_PERCENT_DECOMP_NZD ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

/* STEP (13.11) - CREATING WINSORIZED DATASET */
DATA WANT;
    IF _N_ = 1 THEN SET _STATS_;
    SET FLOW_PERCENT_SET;  
    IF FLOW_PERCENT_DECOMP_NZD < FLOW_P1 AND FLOW_PERCENT_DECOMP_NZD NE . THEN FLOW_PERCENT_DECOMP_WIN_NZD = FLOW_P1; 
    IF FLOW_PERCENT_DECOMP_NZD > FLOW_P99 AND FLOW_PERCENT_DECOMP_NZD NE . THEN FLOW_PERCENT_DECOMP_WIN_NZD = FLOW_P99; 
    IF FLOW_PERCENT_DECOMP_WIN_NZD = . THEN FLOW_PERCENT_DECOMP_WIN_NZD = FLOW_PERCENT_DECOMP_NZD;
	DROP _TYPE_ 	_FREQ_	BINARYVAR  FLOW_P1	FLOW_P99 FLOW_PERCENT_DECOMP_NZD;
RUN;

/*STEP (13.14) : MERGING ABOVE DATA WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=WANT, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);



/* ********************************************************************** STEP 13 **************************************************************************************** */
/* ************************************************* CALCULATION OF VOLATILITY OF FUNDRETURNS **************************************************************************** */
/* THIS CODE IS DIFFERENT IN THIS VERSION..FILE USED FOR FUNDRETURNS IS DIFFERNET */
/* STEP (13.1) : CREATING TEMPORARY DATASET FOR FUNDRETURNS CONTINOUS DATASET */
PROC SORT DATA = File_set.Fundlevel_merge_stkret_win OUT = FILE_RET_1 ; BY FUNDID YEAR MONTH; RUN;

/* STEP (13.2) : CREATING INCEPTION DATE FILE */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Inception_date.csv',
			   OUTPUT_FILE=Inception_date);

/* STEP (13.3) : MERGING INCEPTION DATA FILE WITH FUNDRETURNS FILE */
DATA INCEPTION_DATA;
    SET Inception_date;
    INCEPTION_MONTH = MONTH(Inception_Date); 
    INCEPTION_YEAR = YEAR(Inception_Date);  
	DROP Inception_Date;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FILE_RET_1, INPUT_FILE_2=INCEPTION_DATA, SORT_VARS=FUNDID, OUTPUT_FILE=FILE_RET_2);

/* REMOVING ENTRIES BEFORE INCEPTION DATE */
DATA RET_1;
	SET FILE_RET_2;
	INCEPTION_DATE=INTNX('MONTH', MDY(INCEPTION_MONTH, 1, INCEPTION_YEAR), 0); 
	DATE=INTNX('MONTH', MDY(MONTH, 1, YEAR), 0);
	FORMAT INCEPTION_DATE YYMON7.;
	FORMAT DATE YYMON7.;
	IF INCEPTION_DATE > DATE THEN DELETE;
	DROP INCEPTION_MONTH INCEPTION_YEAR;
RUN;

/* STEP (13.4) : CREATING PERMANENT DATASET IN THE LIBRARY TO BE USED FOR CAPM AND ALPHAS FILE */
DATA FILE_SET.CAPM_RETS_FILE_1;
	SET RET_1;
	IF NOT MISSING(Fundreturns_NZD1);
RUN;

/* STEP (13.5) : CREATING DATASET FOR VOLATILITY RETURNS */
DATA VOLATILITY_1;
	SET FILE_SET.CAPM_RETS_FILE_1;
	KEEP FUNDID YEAR MONTH Fundreturns_NZD1;
RUN;

/* STEP (13.1) : CREATING VOLATILITY VALUES FOR THE DATA */
PROC EXPAND DATA = VOLATILITY_1 OUT = RUNNING_VOL;
   BY FUNDID;
   CONVERT Fundreturns_NZD1 = ROLLING_VOLATILITY_NZD / TRANSFORMOUT=(MOVSTD 12);
RUN;

/* STEP (13.2) : CODE IS TO REMOVE FIRST 11 OBS OF ALL THE FUNDID SO THAT WE GET VOLATILITY FROM 12TH OBS.*/
DATA VOLATILITY_NZD;
    SET RUNNING_VOL;
    BY FUNDID;
	IF FIRST.FUNDID THEN COUNTER = 0;
	COUNTER + 1;
	IF COUNTER > 11 THEN OUTPUT;
	KEEP FUNDID MONTH YEAR TIME Fundreturns_NZD1 ROLLING_VOLATILITY_NZD ;
	IF LAST.FUNDID THEN COUNTER = 0;
RUN;

/* STEP (13.3) : CREATING DATASET FROM ESG.VOLATILITY TO MERGE WITH TOTAL_DATASET_FINAL */
DATA TEMP_VOLATILITY;
	SET VOLATILITY_NZD;
	DROP Fundreturns_NZD1 TIME;
RUN;

/* STEP (13.4) : MERGING ABOVE DATASET WITH TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=TEMP_VOLATILITY, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);



/* *************************************************************************************** STEP 14 ******************************************************************************************* */
/* ************************************************************************ CALCULATING TRACKING ERROR ************************************************************************************** */
/* STEP 14.1 : MERGE ACTIVE SHARES DATA WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=File_set.Activeshares_trans_123, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP 14.2 : MERGING MORNINGSTAR INDEXID AND OTHER DATASETS WITH NZD_DATASET_FINAL */
%IMPORT_MACROS(INPUTFILE='C:\USERS\EM18921\DOWNLOADS\FILE_1.CSV', 
			   OUTPUT_FILE=FILE_SET.FUND_DETAILS);

%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FILE_SET.FUND_DETAILS, SORT_VARS=FUNDID, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP 14.3 : MERGING MORNINGSTAR INDEX RETURNS */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=File_set.Index_returns, SORT_VARS=Morningstar_Index_Id YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP 14.4 : CREATING DISTINCT DATASET AT FUNDLEVEL */
PROC SQL;
	CREATE TABLE FUNDLEVEL_SET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, Fundreturns_NZD1, MORNINGSTAR_INDEX_ID, INDEX_RETURNS1, FIRM_NAME
	FROM NZD_DATASET_FINAL;
QUIT;

/* STEP 14.5 : USING FUNDRETURNS CONTINOUS DATASET TO CALCULATE VALUES */
DATA FUNDRETURNS_FILE_1;
	SET FILE_SET.CAPM_RETS_FILE_1;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDRETURNS_FILE_1, INPUT_FILE_2=FILE_SET.FUND_DETAILS, SORT_VARS=FUNDID, OUTPUT_FILE=FUNDRETURNS_FILE_2);

/* STEP 14.6 : MERGING MORNINGSTAR INDEX RETURNS */
%MERGE_CODE_1(INPUT_FILE_1=FUNDRETURNS_FILE_2, INPUT_FILE_2=File_set.Index_returns, SORT_VARS=Morningstar_Index_Id YEAR MONTH, OUTPUT_FILE=FUNDRETURNS_DATASET);

/* STEP 14.7 : CLEANING ABOVE DATASET TO VOLATILITY CALCULATIONS */
DATA FUNDLEVEL_SET;
	SET FUNDRETURNS_DATASET;
	KEEP FUNDID YEAR MONTH Fundreturns_NZD1 INDEX_RETURNS1 Morningstar_Index_Id;
RUN;

/* STEP 14.5 : CALCULATING TRACKING ERROR */
DATA TE_SETUP1; 
	SET FUNDLEVEL_SET; 
	AB_RET = Fundreturns_NZD1 - INDEX_RETURNS1 ; 
RUN; 

PROC SORT DATA=TE_SETUP1; BY FUNDID; RUN; 

PROC EXPAND DATA=TE_SETUP1  OUT = TE_SETUP2 METHOD=NONE;   
	BY FUNDID ; 
	CONVERT AB_RET = TRACK_ERROR / TRANSFORMOUT=(NOMISS MOVSTD 12 TRIMLEFT 11 );/**ROLLING 12 MONTH STDEV OF ABNORMAL_RETURNS**/ 
RUN; 

/* STEP 14.6 : CALCULATING MEDIAN OF TRACKING ERROR */
%PROC_SUMMARY_OVERALL(INPUT_FILE=TE_SETUP2, CLASS_VARS=YEAR MONTH, VARIABLES=TRACK_ERROR, OUTPUT_FILE=TE_SETUP_MEDIAN, STATS_OPS=MEDIAN, CALCULATED_VAR=MEDIAN_TE);

/* STEP 14.7 : CREATING LAG TRACKING ERROR */
PROC SORT DATA = TE_SETUP_MEDIAN ; BY YEAR MONTH; RUN; 
PROC EXPAND DATA=TE_SETUP2  OUT = TE_SETUP3 METHOD=NONE;   
	BY FUNDID;
	CONVERT TRACK_ERROR = LAG_TRACK_ERROR / TRANSFORM=(LAG 1); 
RUN; 

/* STEP 14.8 : CREATING ALPHA GENERATION FLAG */
PROC SORT DATA = TE_SETUP3 OUT = TE_SETUP4;  BY YEAR MONTH; RUN; 
DATA FUND_TRACKINGERROR; 
	MERGE TE_SETUP4 (IN = A) TE_SETUP_MEDIAN (IN = B); 
	BY YEAR MONTH; 
	IF A; 
	IF LAG_TRACK_ERROR > MEDIAN_TE THEN ACTIVE_ALPHA = 1; /*GREATER THAN MEDIAN THAN ACTIVE*/ 
	ELSE ACTIVE_ALPHA = 0; 
	IF LAG_TRACK_ERROR =. THEN ACTIVE_ALPHA = .;  
	ELSE ACTIVE_ALPHA =ACTIVE_ALPHA ; 
	DROP _FREQ_ TIME Fundreturns_NZD1 _TYPE_ INDEX_RETURNS1 Morningstar_Index_Id;
RUN; 

/* STEP 14.9 : MERGING ABOVE DATASETS WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FUND_TRACKINGERROR, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* ***********************************************************************************CREATING FILE IN LIBRARY*************************************************************************************************** */
/*DATA File_set.NZD_DATASET_FINAL_STKRET_WIN;
	SET NZD_DATASET_FINAL ;
	DROP _TYPE_ _FREQ_;
RUN;*/




/* *************************************************************************************** STEP 15 ******************************************************************************************* */
/* ******************************************************************************** INTERMEDIATE STEP ******************************************************************************************* */
/* ************************************************************************ CREATING FUND LEVEL DATASET ***************************************************************************************** */
DATA TEMP_DATASET;
	SET NZD_DATASET_FINAL;
	DROP SecID Name Percentholdings Fileno RICCODE ESGSCORE ISIN ESG_CONTROVERSY monthlyreturns_ORIGINAL monthlyreturns STOCK_WEIGHT_DECIMAL DECOMPOSED_STK_RET CAPITAL_INVESTED_PER_HOLDING ESG ;
RUN;

PROC SQL;
	CREATE TABLE FUNDLEVEL_DATASET_TRUNCATED AS
	SELECT DISTINCT *
	FROM TEMP_DATASET;
QUIT;

/* ***********__________ CREATING PERMANENT DATASET OF FUNDLEVEL IN THE LIBRARY____________************ */
/*PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED OUT = FILE_SET.FUNDLEVEL_DATASET_stkret_win NODUPKEY; BY FUNDID YEAR MONTH; RUN;*/


/* *************************************************************************************** STEP 16 *********************************************************************************************** */
/* ************************************************************************ CREATING TIME VARYING VARIABLES ************************************************************************************** */
/* RUN ESSENTIAL MACROS NEEDED IN THE PROGRAM */

/* ******************** ____________________________ STEP TO CLEAN DATASET OF MONTHLYRETURNS FOR EXTREME OUTLIERS ______________________________ ***************************** */
DATA TEMP_FILE_SET;
	SET File_set.Refinitiv_all_data_winsorized;
	IF monthlyreturns >= 17975 THEN DO;
		monthlyreturns = 0;
		END;
RUN;

/* STEP 1: IMPORTING REFINITIV DATASET FROM THE LIBRARY */
DATA TEMP_FILE;
	SET TEMP_FILE_SET;
	WHERE NOT MISSING(monthlyreturns);
	KEEP SECID YEAR MONTH monthlyreturns;
RUN;
 
/* STEP 2: CREATING CARRY FORWARD VAR FOR MONTHLYRETURNS DATASET CREATED ABOVE */
%CREATE_FORWARD_VAR(INPUT_FILE=TEMP_FILE, VAR1=SECID, VAR2=YEAR, VAR3=MONTH, OUTPUT_FILE=MONTHYLYRETURNS_4, VAR_TOBE_CARRY=monthlyreturns, FILTER_VAR=SECID);
PROC SORT DATA = MONTHYLYRETURNS_4; BY SECID YEAR MONTH; RUN;

/* STEP 3.1: CREATING CARRY FORWARD VAR FOR NZX50 MONTHLYRETURNS DATASET CREATED ABOVE */
%CREATE_FORWARD_VAR(INPUT_FILE=Fund_set.NZX50returns_nzd, VAR1=FUNDID, VAR2=YEAR, VAR3=MONTH, OUTPUT_FILE=INDEX_RETURNS, VAR_TOBE_CARRY=NZX50returns_NZD1, FILTER_VAR=FUNDID);
PROC SORT DATA = INDEX_RETURNS; BY YEAR MONTH; RUN;
/* STEP 3.2: CLEANING INDEX RETURNS DATA */
DATA INDEX_RETURNS;		/*MAIN DATASET*/
    SET INDEX_RETURNS; 				
    WHERE 
        (YEAR > 2007 AND YEAR < 2022) OR 
        (YEAR = 2007 AND MONTH >= 7) OR 
        (YEAR = 2022 AND MONTH <= 5); 
		IF FUNDID NE " " ;
	DROP FUNDID;
RUN; 

/* STEP 4: MERGING INDEXRETURNS DATA WITH REFINITIV MONTHLYRETURNS LEVEL DATASET */			
%MERGE_CODE_1(INPUT_FILE_1=MONTHYLYRETURNS_4, INPUT_FILE_2=INDEX_RETURNS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=TIME_STATA);

/* STEP 5: CREATING DATASET TO IMPORT TO STATA */
/*PROC SORT DATA = TIME_STATA OUT = FUND_SET.TIME_STATA_WINSORIZED; BY SECID YEAR MONTH; RUN;*/

/* ******************** STEP 6: IMPORTING FILE FROM STATA ********************** */
%IMPORT_MACRO(INPUT_FILE='R:\SAS - RESEARCH\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\SUPPORTING_FILES\BETA_FILE_STKRET_WIN.DTA', DBMS_TYPE=DTA, OUTPUT_DATASET=BETA_105);
PROC SORT DATA = BETA_105; BY SECID YEAR MONTH; RUN;
PROC CONTENTS DATA = BETA_105; RUN;

/* STEP 7: CLEANING DATASET AND KEEPING ONLY UNIQUE VARIABLE */
DATA BETA_SECID;
	SET BETA_105;
	KEEP SECID YEAR MONTH beta monthlyreturns_FRWRD NZX50returns_NZD1_FRWRD;
	WHERE NOT MISSING (BETA);
RUN; 

/* **************************************************************** ________________PART2________________ ********************************************************** */
/* STEP 7: FILTERING DATA FROM NZD_DATASET_FINAL FOR THE VARIABLES REQUIRED */
PROC SQL;
	CREATE TABLE DATA_909 AS
	SELECT FUNDID, YEAR, MONTH, SECID, Percentholdings, monthlyreturns, Fundreturns_NZD1, Netassets_NZD, ESG, ESGSCORE, BINARYVAR, CAPITAL_INVESTED_PER_HOLDING
	FROM NZD_DATASET_FINAL
	WHERE NOT MISSING(MONTHLYRETURNS)
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

PROC SORT DATA = DATA_909; BY SECID YEAR MONTH; RUN;

/* STEP 8: MERGING THE ABOVE DATASET WITH SECID DATASET */
%MERGE_CODE_1(INPUT_FILE_1=DATA_909, INPUT_FILE_2=BETA_SECID, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=FILE_033);

/* STEP 9: CREATING MEDIAN WEIGHT VARIABLE OF SECID HOLDINGS IN ALL FUND PORTFOLIO IN GIVEN MONTH AND YEAR */
PROC SORT DATA = FILE_033; BY SECID YEAR MONTH; RUN;

PROC SUMMARY DATA = FILE_033 NWAY MISSING;
	CLASS  SECID YEAR MONTH;
	WEIGHT Netassets_NZD;
	VAR Percentholdings;
	OUTPUT OUT = FILE_123(DROP = _TYPE_ _FREQ_) MEDIAN(Percentholdings)=MED_HOLDINGS_SECID;
RUN;

/* STEP 10: MERGING ABOVE DATASET WITH PROGRAM MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FILE_033, INPUT_FILE_2=FILE_123, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=TIME_VARY_DATA);
PROC SORT DATA = TIME_VARY_DATA; BY SECID YEAR MONTH; RUN;		

/* STEP 11: CALCULATING TIME AND PICKING VARIABLES */
DATA STEP_1;
	SET TIME_VARY_DATA;
		TIMING_PER_STOCK_MED  = (Percentholdings - MED_HOLDINGS_SECID) * (BETA * NZX50returns_NZD1_FRWRD);									/* STEP 1 VARIABLE: ALL VARIABLES ARE IN PERCENTAGE*/
		PICKING_PER_STOCK_MED = (Percentholdings - MED_HOLDINGS_SECID) * (monthlyreturns_FRWRD - (BETA*NZX50returns_NZD1_FRWRD));
RUN;

/* STEP 12: CLEANING ABOVE DATASET */
DATA PICKING_FILE_MED;
     SET STEP_1;
	 DROP _TYPE_ _FREQ_;
RUN;

/* STEP 13: TAKING SUM OF THE TIMING VARIABLES FOR THE MONTH AND YEAR PER FUND */
%PROC_SUMMARY_OVERALL(INPUT_FILE=PICKING_FILE_MED, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=TIMING_PER_STOCK_MED,  OUTPUT_FILE=DATA_SKILL_1,  STATS_OPS=SUM, CALCULATED_VAR=SUM_TIMING_MED);
%PROC_SUMMARY_OVERALL(INPUT_FILE=PICKING_FILE_MED, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=PICKING_PER_STOCK_MED, OUTPUT_FILE=DATA_SKILL_2,  STATS_OPS=SUM, CALCULATED_VAR=SUM_PICKING_MED);

/* STEP 14: MERGING BOTH DATASETS TOGETHER TO GET FUND MONTH LEVEL FILE */
%MERGE_CODE_1(INPUT_FILE_1=DATA_SKILL_1, INPUT_FILE_2=DATA_SKILL_2, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=EW_DATASET);	

/* STEP 15: CALCULATING WINSORIZATION LEVELS FOR THE EW_DATASET DATASET */
PROC SORT DATA = EW_DATASET; BY YEAR MONTH; RUN;
PROC MEANS DATA = EW_DATASET P1 P99 N NOPRINT;
	BY YEAR;
	VAR SUM_TIMING_MED SUM_PICKING_MED;
	OUTPUT OUT = DATA_1 P1= SUM_TIMING_MED_P1 	SUM_PICKING_MED_P1 
						P99=SUM_TIMING_MED_P99  SUM_PICKING_MED_P99;
RUN;

/* STEP 16: CREATING WINSORIZED TIMING AND PICKING VARAIABLES */
/* MERGING PERCENTILE DATASET WITH EW_DATASET */
%MERGE_CODE_1(INPUT_FILE_1=EW_DATASET, INPUT_FILE_2=DATA_1, SORT_VARS=YEAR, OUTPUT_FILE=EW_DATASET_WIN);

DATA EW_DATASET_30;
	SET EW_DATASET_WIN;
	IF SUM_TIMING_MED < SUM_TIMING_MED_P1 AND SUM_TIMING_MED NE .  THEN SUM_TIMING_MED_WIN = SUM_TIMING_MED_P1;
	IF SUM_TIMING_MED > SUM_TIMING_MED_P99 AND SUM_TIMING_MED NE . THEN SUM_TIMING_MED_WIN = SUM_TIMING_MED_P99;
	IF SUM_TIMING_MED_WIN = . THEN SUM_TIMING_MED_WIN = SUM_TIMING_MED;
	IF SUM_PICKING_MED < SUM_PICKING_MED_P1 AND SUM_PICKING_MED NE .  THEN SUM_PICKING_MED_WIN = SUM_PICKING_MED_P1;
	IF SUM_PICKING_MED > SUM_PICKING_MED_P99 AND SUM_PICKING_MED NE . THEN SUM_PICKING_MED_WIN = SUM_PICKING_MED_P99;
	IF SUM_PICKING_MED_WIN = . THEN SUM_PICKING_MED_WIN = SUM_PICKING_MED;
RUN;

/* STEP 17: CLEANING ABOVE DATASET */
DATA EW_DATASET_CLEAN;
	SET EW_DATASET_30;
	KEEP FUNDID YEAR MONTH SUM_TIMING_MED SUM_PICKING_MED SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN;
RUN;

/* ****************** DATA FOR PLOTTING GRAPHS - FUND LEVEL ********************* */
/* STEP 18:  TAKING MEAN OF THE FUND LEVEL VARIABLES */
/* NO NEED OF THESE VARIABLES IN THIS ITERATION. RUN IT FOR TEST */
/*%PROC_SUMMARY_OVERALL(INPUT_FILE=EW_DATASET_CLEAN, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_TIMING_MED,  OUTPUT_FILE=TIMING_MONTHLY_MED,   STATS_OPS=MEAN, CALCULATED_VAR=TIMING_MONTHLY_MED);
%PROC_SUMMARY_OVERALL(INPUT_FILE=EW_DATASET_CLEAN, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_PICKING_MED, OUTPUT_FILE=PICKING_MONTHLY_MED,  STATS_OPS=MEAN, CALCULATED_VAR=PICKING_MONTHLY_MED);*/

/* STEP 19: MERGING BOTH THE FILES AND GETTING DATASET TO PLOT GRAPHS */
/*%MERGE_CODE_1(INPUT_FILE_1=TIMING_MONTHLY_MED, INPUT_FILE_2=PICKING_MONTHLY_MED, SORT_VARS=YEAR MONTH, OUTPUT_FILE=PICKING_MED_YEARLY);*/

/* STEP 20: TAKING MEAN OF THE FUND LEVEL WINSORIZED VARIABLES */
%PROC_SUMMARY_OVERALL(INPUT_FILE=EW_DATASET_CLEAN, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_TIMING_MED_WIN,  OUTPUT_FILE=TIMING_MON_WIN,  STATS_OPS=MEAN, CALCULATED_VAR=TIMING_MONTHLY_MED_WIN);
%PROC_SUMMARY_OVERALL(INPUT_FILE=EW_DATASET_CLEAN, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_PICKING_MED_WIN, OUTPUT_FILE=PICKING_MON_WIN, STATS_OPS=MEAN, CALCULATED_VAR=PICKING_MONTHLY_MED_WIN);

/* STEP 21: MERGING BOTH THE FILES AND GETTING DATASET TO PLOT GRAPHS FOR WINSORIZED VALUES */
%MERGE_CODE_1(INPUT_FILE_1=TIMING_MON_WIN, INPUT_FILE_2=PICKING_MON_WIN, SORT_VARS=YEAR MONTH, OUTPUT_FILE=PICKING_YEARLY_WIN);


/* *********************** CREATING PICKING VARIABLES SECID LEVEL FILE IN LIBRARY. I HAVE NOT MERGED TIMING VARIABLES AT SECID LEVEL WITH NZD_DATASET_FINAL AS IT IS CREATING DOUBLE ENTRIES AS ENTRIES ARE TO BE MERGED AT 
SECID YEAR MONTH LEVEL. FOR SECID LEVEL TIMING VARIABLE, CONSIDER THIS FILE. *************************************************************************** */
/* MERGING FUND MONTH LEVEL AVERAGE DATASETFILE WITH PICKING MAIN FILE. */
%MERGE_CODE_1(INPUT_FILE_1=PICKING_FILE_MED, INPUT_FILE_2=EW_DATASET_30, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=PICKING_FILE_MED);

/* NO NEED TO RUN THIS STEP IN THIS ITERATION AS VARIABLES ARE NOT CALCULATED */
/*%MERGE_CODE_1(INPUT_FILE_1=PICKING_FILE_MED, INPUT_FILE_2=PICKING_MED_YEARLY, SORT_VARS = YEAR MONTH, OUTPUT_FILE=PICKING_FILE_MED);*/

/* MERGING WINSORIZED VALUES YEARLY WITH PICKING MAIN FILE */
%MERGE_CODE_1(INPUT_FILE_1=PICKING_FILE_MED, INPUT_FILE_2=PICKING_YEARLY_WIN, SORT_VARS=YEAR MONTH, OUTPUT_FILE=PICKING_FILE_MED);

/* CREATING MAIN DATASET IN THE LIBRARY */
/*DATA FUND_SET.PICKING_FILE_STKRET_WIN;
	SET PICKING_FILE_MED;
	DROP _TYPE_ _FREQ_;
RUN;*/

/* ************************* MERGING PICKING VARIABLES FUND MONTH FILES WITH NZD_DATASET_FINAL FILE **************************** */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=Ew_dataset_clean, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* EXCEL TEST */
/*DATA EXCEL_TEST_1;
	SET PICKING_FILE_MED;
	KEEP FUNDID YEAR MONTH SecID Percentholdings monthlyreturns_FRWRD NZX50returns_NZD1_FRWRD BETA MED_HOLDINGS_SECID TIMING_PER_STOCK_MED PICKING_PER_STOCK_MED SUM_TIMING_MED SUM_PICKING_MED;
    WHERE FUNDID = "F00000T52P";
RUN;*/

/* ******* CREATING PERMANENT DATASET OF MONTHLYRETURNS WHERE ESG SCORE IS PRESENT FOR BETA CALCULATIONS AND THIS DATASET WILL BE USED TO IMPORT TO STATA ********** */
/* **************************************************************** ________________PART3________________ ********************************************************** */
/* STEP 1: SELECTING DATA WHICH HAVE MONTHLYRETURNS AND ESGSCORE BOTH FROM REFINITIV FILE */
DATA TEMP_FILE_ESG;
	SET TEMP_FILE_SET;
	KEEP SECID YEAR MONTH monthlyreturns ESG_SCORE;
	WHERE NOT MISSING(ESG_SCORE);
RUN;

/* STEP 2: CREATING CARRY FORWARD VAR FOR MONTHLYRETURNS DATASET CREATED ABOVE */
%CREATE_FORWARD_VAR(INPUT_FILE=TEMP_FILE_ESG, VAR1=SECID, VAR2=YEAR, VAR3=MONTH, OUTPUT_FILE=MONTHYLYRETURNS_ESG, VAR_TOBE_CARRY=monthlyreturns, FILTER_VAR=SECID);
PROC SORT DATA = MONTHYLYRETURNS_ESG; BY SECID YEAR MONTH; RUN;

/* STEP 3.1: CREATING CARRY FORWARD VAR FOR NZX50 MONTHLYRETURNS */
%CREATE_FORWARD_VAR(INPUT_FILE=Fund_set.NZX50returns_nzd, VAR1=FUNDID, VAR2=YEAR, VAR3=MONTH, OUTPUT_FILE=INDEX_RETURNS, VAR_TOBE_CARRY=NZX50returns_NZD1, FILTER_VAR=FUNDID);
PROC SORT DATA = INDEX_RETURNS; BY YEAR MONTH; RUN;
/* STEP 3.2: CLEANING INDEX RETURNS DATA */
DATA INDEX_RETURNS;		/*MAIN DATASET*/
    SET INDEX_RETURNS; 				
    WHERE 
        (YEAR > 2007 AND YEAR < 2022) OR 
        (YEAR = 2007 AND MONTH >= 7) OR 
        (YEAR = 2022 AND MONTH <= 5); 
		IF FUNDID NE " " ;
	DROP FUNDID;
RUN; 

/* STEP 4: MERGING INDEXRETURNS DATA WITH MONTHLYRETURNS LEVEL DATASET */			
%MERGE_CODE_1(INPUT_FILE_1=MONTHYLYRETURNS_ESG, INPUT_FILE_2=INDEX_RETURNS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=TIME_STATA_ESG);

/* CREATING DATASET TO IMPORT TO STATA */
DATA FUND_SET.TIME_STATA_ESG_STKRET_WIN;
	SET TIME_STATA_ESG;
	WHERE NOT MISSING (monthlyreturns);
RUN;

/* STEP 5: IMPORTING FILE FROM STATA */
%IMPORT_MACRO(INPUT_FILE='R:\SAS - RESEARCH\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\SUPPORTING_FILES\BETA_FILE_ESG_STKRET_WIN.DTA', DBMS_TYPE=DTA, OUTPUT_DATASET=BETA_ESG);
PROC SORT DATA = BETA_ESG; BY SECID YEAR MONTH; RUN;
PROC CONTENTS DATA = BETA_ESG; RUN;

/* STEP 6: CLEAN THE DATASET AND KEEP ONLY UNIQUE VALUES */
DATA BETA_SECID_ESG;
	SET BETA_ESG;
	KEEP SECID YEAR MONTH beta_ESG monthlyreturns_FRWRD NZX50returns_NZD1_FRWRD;
	WHERE NOT MISSING(beta_ESG);
RUN; 

/* **************************************************************************** ___________PART 4___________ ******************************************************************************** */
/* **************************************************************************** ____________ESG_____________ ******************************************************************************** */
/* STEP 8: FILTERING DATA FOR THE VARIABLES REQUIRED */
PROC SQL;
	CREATE TABLE DATA_909_ESG AS
	SELECT FUNDID, YEAR, MONTH, SECID, Percentholdings, monthlyreturns, Fundreturns_NZD1, Netassets_NZD, ESG, ESGSCORE, BINARYVAR, CAPITAL_INVESTED_PER_HOLDING
	FROM NZD_DATASET_FINAL
	WHERE ESG = 1 AND NOT MISSING(MONTHLYRETURNS)
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;
PROC SORT DATA = DATA_909_ESG; BY SECID YEAR MONTH; RUN;

/* STEP 9: MERGING THE ABOVE DATASET WITH SECID DATASET */
%MERGE_CODE_1(INPUT_FILE_1=DATA_909_ESG, INPUT_FILE_2=BETA_SECID_ESG, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=FILE_033_ESG);

/* STEP 10: CREATING MEDIAN WEIGHT VARIABLE OF SECID HOLDINGS IN ALL FUND PORTFOLIO IN GIVEN MONTH AND YEAR */
PROC SORT DATA = FILE_033_ESG; BY SECID YEAR MONTH; RUN;
PROC SUMMARY DATA = FILE_033_ESG NWAY MISSING;
	CLASS SECID YEAR MONTH;
	WEIGHT Netassets_NZD;
	VAR Percentholdings;
	OUTPUT OUT = FILE_123_ESG(DROP = _TYPE_ _FREQ_) MEDIAN(Percentholdings)=MED_HOLDINGS_SECID_ESG;
RUN;

/* STEP 11: MERGING ABOVE DATASET WITH MAIN CALCULATIONS DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FILE_033_ESG, INPUT_FILE_2=FILE_123_ESG, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=TIME_VARY_DATA_ESG);
PROC SORT DATA = TIME_VARY_DATA_ESG; BY SECID YEAR MONTH; RUN;		

/* STEP 12: CALCULATING TIME AND PICKING VARIABLES */
DATA STEP_1_ESG;
	SET TIME_VARY_DATA_ESG;        
    TIMING_PER_STOCK_MED_ESG  = (Percentholdings - MED_HOLDINGS_SECID_ESG) * (BETA_ESG * NZX50returns_NZD1_FRWRD);									/* STEP 1 VARIABLE: ALL VARIABLES ARE IN PERCENTAGE*/
	PICKING_PER_STOCK_MED_ESG = (Percentholdings - MED_HOLDINGS_SECID_ESG) * (monthlyreturns_FRWRD - (BETA_ESG*NZX50returns_NZD1_FRWRD));
RUN;

/* STEP 13: CLEANING ABOVE DATASET */
DATA PICKING_FILE_MED_ESG;
	SET STEP_1_ESG;
	DROP _TYPE_ _FREQ_;
RUN;

/* STEP 14: TAKING SUM OF THE TIMING VARIABLE TO CALCULATE FUND LEVEL TIMING AND PICKING VALUES */
%PROC_SUMMARY_OVERALL(INPUT_FILE=PICKING_FILE_MED_ESG, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=TIMING_PER_STOCK_MED_ESG,  OUTPUT_FILE=DATA_SKILL_1_ESG,  STATS_OPS=SUM, CALCULATED_VAR=SUM_TIMING_MED_ESG);
%PROC_SUMMARY_OVERALL(INPUT_FILE=PICKING_FILE_MED_ESG, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=PICKING_PER_STOCK_MED_ESG, OUTPUT_FILE=DATA_SKILL_2_ESG,  STATS_OPS=SUM, CALCULATED_VAR=SUM_PICKING_MED_ESG);

/* STEP 15: MERGING ABOVE FILES TO GET FUND LEVEL VALUES FOR TIMING AND PICKING BOTH */
%MERGE_CODE_1(INPUT_FILE_1=DATA_SKILL_1_ESG, INPUT_FILE_2=DATA_SKILL_2_ESG, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=EW_DATASET_ESG);	

/* STEP 16: CREATING WINSORIZED VALUES OF TIMING VARIABLES FOR THE DATASET */
PROC SORT DATA = EW_DATASET_ESG; BY YEAR; RUN;
PROC MEANS DATA = EW_DATASET_ESG P1 P99 N NOPRINT;
	BY YEAR;
	VAR SUM_TIMING_MED_ESG SUM_PICKING_MED_ESG;
	OUTPUT OUT = DATA_2 P1=  SUM_TIMING_MED_ESG_P1 SUM_PICKING_MED_ESG_P1
						P99= SUM_TIMING_MED_ESG_P99 SUM_PICKING_MED_ESG_P99;
RUN;

/* STEP 17: MERGING WINSORIZED VALUES WITH DATASET */
%MERGE_CODE_1(INPUT_FILE_1=EW_DATASET_ESG, INPUT_FILE_2=DATA_2, SORT_VARS=YEAR, OUTPUT_FILE=EW_DATASET_ESG_WINSOR);

DATA EW_DATASET_ESG_30;
	SET EW_DATASET_ESG_WINSOR;
	IF SUM_TIMING_MED_ESG < SUM_TIMING_MED_ESG_P1 AND SUM_TIMING_MED_ESG NE . THEN SUM_TIMING_MED_ESG_WIN = SUM_TIMING_MED_ESG_P1;
	IF SUM_TIMING_MED_ESG > SUM_TIMING_MED_ESG_P99 AND SUM_TIMING_MED_ESG NE . THEN SUM_TIMING_MED_ESG_WIN = SUM_TIMING_MED_ESG_P99;
	IF SUM_TIMING_MED_ESG_WIN = . THEN SUM_TIMING_MED_ESG_WIN = SUM_TIMING_MED_ESG;
	IF SUM_PICKING_MED_ESG < SUM_PICKING_MED_ESG_P1 AND SUM_PICKING_MED_ESG NE . THEN SUM_PICKING_MED_ESG_WIN = SUM_PICKING_MED_ESG_P1;
	IF SUM_PICKING_MED_ESG > SUM_PICKING_MED_ESG_P99 AND SUM_PICKING_MED_ESG NE . THEN SUM_PICKING_MED_ESG_WIN = SUM_PICKING_MED_ESG_P99;
	IF SUM_PICKING_MED_ESG_WIN = . THEN SUM_PICKING_MED_ESG_WIN = SUM_PICKING_MED_ESG;
RUN;

/* CLEANING ABOVE DATASET */
DATA EW_DATASET_ESG_CLEAN;
	SET EW_DATASET_ESG_30;
	KEEP FUNDID YEAR MONTH SUM_TIMING_MED_ESG SUM_PICKING_MED_ESG SUM_TIMING_MED_ESG_WIN SUM_PICKING_MED_ESG_WIN;
RUN;


/* *************** DATA FOR PLOTTING GRAPHS - FUND LEVEL - YEAR MONTH ********************* */
/* STEP 18: TAKING AVERAGE OF THE FUND LEVEL DATASET FROM ABOVE TO GET YEAR-MONTH DATASET */
/* NO NEED OF DOING THIS STEP IN THIS ITERATION AS FOCUS IS ON WINSORIZED VALEUS */
/*%PROC_SUMMARY_OVERALL(INPUT_FILE=EW_DATASET_ESG_CLEAN, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_TIMING_MED_ESG,  OUTPUT_FILE=TIMING_MONTHLY_MED_ESG,   STATS_OPS=MEAN, CALCULATED_VAR=TIMING_MONTHLY_MED_ESG);
%PROC_SUMMARY_OVERALL(INPUT_FILE=EW_DATASET_ESG_CLEAN, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_PICKING_MED_ESG, OUTPUT_FILE=PICKING_MONTHLY_MED_ESG,  STATS_OPS=MEAN, CALCULATED_VAR=PICKING_MONTHLY_MED_ESG);*/

/* STEP 19: MERGING ABOVE DATASET AND GETTING YEARLY DATASET */
/*%MERGE_CODE_1(INPUT_FILE_1=TIMING_MONTHLY_MED_ESG, INPUT_FILE_2=PICKING_MONTHLY_MED_ESG, SORT_VARS=YEAR MONTH, OUTPUT_FILE=PICKING_MED_YEARLY_ESG);*/

/* STEP 20: TAKING AVERAGE OF THE WINSORIZED TIMING VARIABLES */
%PROC_SUMMARY_OVERALL(INPUT_FILE=EW_DATASET_ESG_CLEAN, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_TIMING_MED_ESG_WIN,  OUTPUT_FILE=TIMING_MONTHLY_MED_ESG_WIN,  STATS_OPS=MEAN, CALCULATED_VAR=TIMING_MONTHLY_MED_ESG_WIN);
%PROC_SUMMARY_OVERALL(INPUT_FILE=EW_DATASET_ESG_CLEAN, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_PICKING_MED_ESG_WIN, OUTPUT_FILE=PICKING_MONTHLY_MED_ESG_WIN, STATS_OPS=MEAN, CALCULATED_VAR=PICKING_MONTHLY_MED_ESG_WIN);

/* STEP 21: MERGING ABOVE TWO FILES */
%MERGE_CODE_1(INPUT_FILE_1=TIMING_MONTHLY_MED_ESG_WIN, INPUT_FILE_2=PICKING_MONTHLY_MED_ESG_WIN, SORT_VARS=YEAR MONTH, OUTPUT_FILE=PICKING_MED_YEARLY_ESG_WIN);


/* *********************** CREATING PICKING VARIABLES SECID LEVEL FILE IN LIBRARY. I HAVE NOT MERGED TIMING VARIABLES AT SECID LEVEL WITH NZD_DATASET_FINAL AS IT IS CREATING DOUBLE ENTRIES AS ENTRIES ARE TO BE MERGED AT 
SECID YEAR MONTH LEVEL. FOR SECID LEVEL TIMING VARIABLE, CONSIDER THIS FILE. *************************************************************************** */
/* NO NEED OF THIS STEP IN THIS ITERATION */
/*%MERGE_CODE_1(INPUT_FILE_1=PICKING_FILE_MED_ESG, INPUT_FILE_2=EW_DATASET_ESG, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=PICKING_FILE_MED_ESG);
%MERGE_CODE_1(INPUT_FILE_1=PICKING_FILE_MED_ESG, INPUT_FILE_2=PICKING_MED_YEARLY_ESG, SORT_VARS=YEAR MONTH, OUTPUT_FILE=PICKING_FILE_MED_ESG);*/

/* MERGING WINSORIZED VALUES WITH PICKING ESG FILES */
%MERGE_CODE_1(INPUT_FILE_1=PICKING_FILE_MED_ESG, INPUT_FILE_2=EW_DATASET_ESG_30, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=PICKING_FILE_MED_ESG);

/* CREATING PERMANENT DATASET IN THE LIBRARY */
/*DATA FUND_SET.PICKING_FILE_MED_ESG_STKRET;
	SET PICKING_FILE_MED_ESG;
	DROP _TYPE_ _FREQ_;
RUN;*/

/* ************************* MERGING PICKING VARIABLES FUND MONTH FILE WITH NZD_DATASET_FINAL FILE **************************** */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=EW_DATASET_ESG_CLEAN, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* EXCEL TEST */
/*DATA EXCEL_TEST_1;
	SET PICKING_FILE_SEC_ESG;
	KEEP FUNDID YEAR MONTH SecID Percentholdings ESG monthlyreturns_FRWRD NZX50returns_NZD1_FRWRD BETA_ESG MED_HOLDINGS_SECID_ESG TIMING_PER_STOCK_MED_ESG PICKING_PER_STOCK_MED_ESG SUM_TIMING_MED_ESG SUM_PICKING_MED_ESG;
    WHERE FUNDID = "F00000LOT0";
RUN;*/

/* *****************_________________ CREATING PERMANENT DATASET IN THE LIBRARY __________________******************* */
/*DATA FILE_SET.NZD_DATASET_FINAL_STKRET_WIN;
	SET NZD_DATASET_FINAL;
RUN;*/

/* **************************************************************************** ____________PART 5_____________ ******************************************************************************** */
/* **************************************************************************** ____________GRAPHS_____________ ******************************************************************************** */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\New_Zealand_EPU_Data.CSV',
					 OUTPUT_FILE=EPU_DATA);

DATA EPU_DATA;
	SET EPU_DATA;
	KEEP YEAR MONTH EPU_Scores;
RUN;

/* MERGING ALL THE FILES TO GET GRAPH DATA */
/* NO NEED OF THIS CODE IN THIS ITERATION */
/*%MERGE_CODE_1(INPUT_FILE_1=PICKING_MED_YEARLY, INPUT_FILE_2=PICKING_MED_YEARLY_ESG, SORT_VARS=YEAR MONTH, OUTPUT_FILE=WANT_PICKING);
%MERGE_CODE_1(INPUT_FILE_1=WANT_PICKING, INPUT_FILE_2=EPU_DATA, SORT_VARS=YEAR MONTH, OUTPUT_FILE= WANT_PICKING);

DATA GRAPHS_OVERALL;
	SET WANT_PICKING;
	KEY = YEAR||MONTH;
	DROP _TYPE_ _FREQ_ YEAR MONTH;
RUN;*/

/* MERGING WINSORIZED FILES TO GET GRAPH DATA */
%MERGE_CODE_1(INPUT_FILE_1=Picking_yearly_win, INPUT_FILE_2=Picking_med_yearly_esg_win, SORT_VARS=YEAR MONTH, OUTPUT_FILE=WANT_PICKING_WIN);
%MERGE_CODE_1(INPUT_FILE_1=WANT_PICKING_WIN, INPUT_FILE_2=EPU_DATA, SORT_VARS=YEAR MONTH, OUTPUT_FILE= WANT_PICKING_WIN);

DATA GRAPHS_OVERALL_WIN;
	SET WANT_PICKING_WIN;
	KEY = YEAR||MONTH;
	DROP _TYPE_ _FREQ_ YEAR MONTH;
RUN;


/*-------------------------------------------------------------------- STEP 17 -----------------------------------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF TOTAL ESG STOCKS IN FUND PORTFOLIO------------------------------------------------------------------------------------*/
/*--------------------------------------------CALCULATION OF AVERAGE STOCKS IN FUND PORTFOLIO   ------------------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF TOTAL HOLDINGS IN NUMBERS IN FUND PORTFOLIO---------------------------------------------------------------------------*/
/*---------------------------------------------CALCULATION OF PROPORTION OF ESG STOCKS (TO TOTAL HOLDINGS)  IN FUND PORTFOLIO-------------------------------------------------------*/

/* STEP (10.1) : CREATE DATASET FOR TOTAL EQUITY NUMBERS CALCULATION. */

/* CREATING TEMP DATASET FOR NZD_HD_ALL_FINAL */
DATA NZD_HD_ALL_FINAL;
	SET File_set.Nzd_hd_all_final_stkret_win;
RUN;

PROC SQL;										/*CHECKING ALL DISTINCT DETAILHOLDINGTYPE TO FILTER FOR EQUITY*/
    SELECT DISTINCT DETAILHOLDINGTYPE
    FROM NZD_HD_ALL_FINAL;
QUIT;

PROC SQL;
	CREATE TABLE HOLDINGS_EQUITY AS
	SELECT DISTINCT *
	FROM NZD_HD_ALL_FINAL
	WHERE TRIM(DETAILHOLDINGTYPE) IN (
        	'EQUITY',
			'EQUITY - FUTURE',
			'EQUITY - PRIVATE/',
			'EQUITY - REIT',
			'EQUITY - UNDEFINE',
			'EQUITY - UNITS',
			'EQUITY - WARRANTS', )
	ORDER BY FUNDID, YEAR, MONTH; 
QUIT;
RUN;

/* STEP (10.2) : CREATING DATASET FROM ABOVE DATASET FOR (A) ESG STOCKS, (B) TOTAL STOCKS AND (C) TOTAL HOLDINGS IN A FUND PORTFOLIO */
PROC SQL;
    CREATE TABLE ESG_EQUITY AS
    SELECT FUNDID, YEAR, MONTH, SUM(CASE WHEN ESG=1 THEN 1 ELSE 0 END) AS ESGHOLDINGS_EQUITY_NZD, COUNT(*) AS TOTALHOLDINGS_EQUITY_NZD
    FROM HOLDINGS_EQUITY
    GROUP BY FUNDID, YEAR, MONTH;

	CREATE TABLE TOTAL_HOLDINGS AS
	SELECT FUNDID, YEAR, MONTH, COUNT(NAME)AS COMPONENT_HOLDINGS_NZD
	FROM NZD_HD_ALL_FINAL
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

/* STEP (10.3) : MERGING ABOVE TWO DATASET 
			     CALCULATING RATIO OF ESG STOCKS TO TOTAL STOCKS 
			     CALCULATING RATIO OF ESG STOCKS TO TOTAL HOLDINGS OR COMPONENTS HOLDINGS */

DATA FILE_SET.ESGPROPORTION_NZD_STKRET_WIN;
	MERGE ESG_EQUITY ( IN = A) TOTAL_HOLDINGS (IN = B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	RATIO_ESG_TO_TOT_EQUITY_NZD = (ESGHOLDINGS_EQUITY_NZD / TOTALHOLDINGS_EQUITY_NZD) * 100 ;
	RATIO_ESG_TO_TOT_HOLDINGS_NZD = (ESGHOLDINGS_EQUITY_NZD / COMPONENT_HOLDINGS_NZD) * 100 ;
RUN;

/* STEP (10.4) : MERGING ABOVE DATASET WITH MAIN DATASET, I.E. TOTAL_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FILE_SET.ESGPROPORTION_NZD_STKRET_WIN, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);


/* *********************______________________ REWRITING PERMANENT DATASET IN THE LIBRARY ________________________********************** */
DATA File_set.Nzd_dataset_final_stkret_win;
	SET NZD_DATASET_FINAL;
RUN;


/* **************************************************_________________________ STEP 18 __________________________*************************************************************** */
/* ************************************************************************ NON NZ STOCKS ************************************************************************************** */
DATA NZD_HD_ALL_FINAL;
	SET File_set.Nzd_hd_all_final_stkret_win;
RUN;

%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Exchange_info.CSV',
			   OUTPUT_FILE=COUNTRY_EXCHANGE);
PROC SORT DATA = COUNTRY_EXCHANGE NODUPKEY; BY RICCODE; RUN;

%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Country_of_HQ.CSV',
			   OUTPUT_FILE=Country_of_HQ);
PROC SORT DATA = Country_of_HQ NODUPKEY; BY RICCODE; RUN;

%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\ISO_CODE_NZD.CSV',
			   OUTPUT_FILE=ISO_CODE_NZD);
PROC SORT DATA = ISO_CODE_NZD NODUPKEY; BY RICCODE; RUN;

%MERGE_CODE_1(INPUT_FILE_1=COUNTRY_EXCHANGE, INPUT_FILE_2=Country_of_HQ, SORT_VARS=RICCODE, OUTPUT_FILE=TEMP_FILE_1);	

%MERGE_CODE_1(INPUT_FILE_1=TEMP_FILE_1, INPUT_FILE_2=ISO_CODE_NZD, SORT_VARS=RICCODE, OUTPUT_FILE=TEMP_FILE_2);	

%MERGE_CODE_1(INPUT_FILE_1=FILE_SET.RIC_CODE, INPUT_FILE_2=TEMP_FILE_2, SORT_VARS=RICCODE, OUTPUT_FILE=TEMP_FILE_3);	

PROC SORT DATA = TEMP_FILE_3 OUT = FILE_SET.STOCKS_EXCHANGE_FILE NODUPKEY; BY SECID; RUN;

%MERGE_CODE_1(INPUT_FILE_1=NZD_HD_ALL_FINAL, INPUT_FILE_2=FILE_SET.STOCKS_EXCHANGE_FILE, SORT_VARS=SECID, OUTPUT_FILE=NZD_HD_ALL_FINAL);	

/* CREATING DATASET FOR EQUITY STOCKS ONLY */
PROC SQL;
	CREATE TABLE DATA_123 AS
	SELECT *
	FROM NZD_HD_ALL_FINAL
	WHERE TRIM(DETAILHOLDINGTYPE) IN (
        	'EQUITY',
			'EQUITY - FUTURE',
			'EQUITY - PRIVATE/',
			'EQUITY - REIT',
			'EQUITY - UNDEFINE',
			'EQUITY - UNITS',
			'EQUITY - WARRANTS', )
	ORDER BY FUNDID, YEAR, MONTH; 
RUN;

/* COUNTING NON NZ STOCKS ON BASIS OF ISO CODE */
PROC SQL;
    CREATE TABLE COUNT_12 AS
    SELECT FUNDID, YEAR, MONTH, COUNT(*) AS NON_NZ_STOCKS
    FROM DATA_123
    WHERE Country_of_Exchange NE 'New Zealand' AND Country_of_Exchange NE 'NEW ZEALAND EXCHANGE LTD'
    GROUP BY FUNDID, YEAR, MONTH;
QUIT;

/* MERGING ABOVE DATASET WITH FUNDLEVEL DATASET AND CREATING RATIO */
PROC SORT DATA = FILE_SET.ESGPROPORTION_NZD_STKRET_WIN	OUT = ESGPROPORTION_NZD; BY FUNDID YEAR MONTH ; RUN;
PROC SORT DATA = COUNT_12 ; BY FUNDID YEAR MONTH ; RUN ;

DATA FILE_SET.ESGPROPORTION_NZD_STKRET_WIN;
	MERGE ESGPROPORTION_NZD ( IN = A ) 	COUNT_12 ( IN = B ) ;
	BY FUNDID YEAR MONTH ;
	IF A;
	NON_NZ_STOCK_RATIO =  (NON_NZ_STOCKS / COMPONENT_HOLDINGS_NZD) * 100 ;
RUN;

/* MERGING ABOVE DATASET WITH NZ_HD_ALL_FINAL */
DATA NON_NZ_STOCKS;
	SET FILE_SET.ESGPROPORTION_NZD_STKRET_WIN;
	KEEP FUNDID YEAR MONTH NON_NZ_STOCKS NON_NZ_STOCK_RATIO;
RUN;

/* MERGING ABOVE DATASET WITH NZD_HD_ALL_FINAL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=NZD_HD_ALL_FINAL, INPUT_FILE_2=NON_NZ_STOCKS, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_HD_ALL_FINAL);	

/* MERGING ABOVE DATASET AND STOCK EXCHANGE INFO WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=NON_NZ_STOCKS, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);	



/* *************************************************************************************** STEP 19 ******************************************************************************************* */
/* ******************************************************************************** CALCULATING SIN STOCKS ********************************************************************************* */
/* STEP 14.1 : IMPORTING BUSINESS SECTOR FILE */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\bs_data_for_sas.CSV',
			   OUTPUT_FILE=BUSINESS_SECTOR);

%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\bs_name_data_fr_sas.CSV',
			   OUTPUT_FILE=bs_name_data_fr_sas);

PROC SORT DATA=BUSINESS_SECTOR; BY RICCODE; RUN;

/* CONCATENATION CODE */
/* STEP 14.2: CONCATENATE BUSINESS_SECTOR VALUES */
DATA BUS_SECTOR;
    SET BUSINESS_SECTOR;
    BY RICCODE;

    RETAIN Business_Sector_combined;
    
    IF FIRST.RICCODE THEN Business_Sector_combined = Business_Sector;
    ELSE Business_Sector_combined = CATX(', ', Business_Sector_combined, Business_Sector);
    
    IF LAST.RICCODE THEN OUTPUT;
   
    DROP Business_Sector;
RUN;

PROC SORT DATA = BUS_SECTOR OUT = FILE_1 NODUPKEY; BY RICCODE; RUN; 

/* MERGING BUSINESS SECTOR FILES */
%MERGE_CODE_1(INPUT_FILE_1=BUS_SECTOR, INPUT_FILE_2=bs_name_data_fr_sas, SORT_VARS=RICCODE, OUTPUT_FILE=BUS_SECTOR)

/* STEP 14.3 : KEYWORD SEARCH FOR SIN STOCKS - CLASSIFYING SIN STOCKS*/
DATA FILE_456;
	SET BUS_SECTOR; 
	array keyword_stocks {54} $ 54 _temporary_ ;
	   	keyword_stocks[1] = 'Military' ;
	    keyword_stocks[2] = 'Defense';
		keyword_stocks[3] = 'Weapon';
		keyword_stocks[4] = 'Gambling';
	    keyword_stocks[5] = 'Adult Entertainment';
	    keyword_stocks[6] = 'Casinos';
	    keyword_stocks[7] = 'Beer';
	    keyword_stocks[8] = 'Wine';
	    keyword_stocks[9] = 'Alcoholic Beverages';
	    keyword_stocks[10] = 'Pubs';
	    keyword_stocks[11] = 'Bars';
	    keyword_stocks[12] = 'Tobacco';
	    keyword_stocks[13] = 'Liquor';
	    keyword_stocks[14] = 'Liquor stores' ;
		keyword_stocks[15] = 'Smoking';
		keyword_stocks[16] = 'Cannabis';
		keyword_stocks[17] = 'Defense Contractors';
		keyword_stocks[18] = 'Gaming Companies';
		keyword_stocks[19] = 'Online Gambling';
		keyword_stocks[20] = 'Cigarettes';
		keyword_stocks[21] = 'Weapons';
		keyword_stocks[22] = 'Vaping';
		keyword_stocks[23] = 'E-cigarettes';
		keyword_stocks[24]=  'Lottery';
		keyword_stocks[25] = 'Lotteries';
		keyword_stocks[26] = 'Betting';
		keyword_stocks[27] = 'Poker';
		keyword_stocks[28] = 'Sports Betting';
		keyword_stocks[29] = 'Escort Services';
		keyword_stocks[30] = 'Firearms';
		keyword_stocks[31] = 'Arms';
		keyword_stocks[32] = 'Ammunition';
		keyword_stocks[33] = 'Guns';
		keyword_stocks[34] = 'Marijuana';
		keyword_stocks[35] = 'Breweris';
		keyword_stocks[36] = 'Distilleries';
		keyword_stocks[37] = 'Cigars';
		keyword_stocks[38] = 'Nightclubs';
		keyword_stocks[39] = 'Adult Websites';
		keyword_stocks[40] = 'Slot Machines';
		keyword_stocks[41] = 'Taverns';
		keyword_stocks[42] = 'Strip Clubs';
		keyword_stocks[43] = 'Beting Shops';
		keyword_stocks[44] = 'Spirits';
		keyword_stocks[45] = 'Gamble';
		keyword_stocks[46] = 'Brandy';
		keyword_stocks[47] = 'Vodka';
		keyword_stocks[48] = 'Brew';
		keyword_stocks[49] = 'Ale';
		keyword_stocks[50] = 'Defence';
		keyword_stocks[51] = 'Malt';
		keyword_stocks[52] = 'Brewers';
		keyword_stocks[53] = 'Vintners';
		keyword_stocks[54] = 'Wineries';
	
	CLEANED_STRING = TRANWRD(BUSINESS_SECTOR_COMBINED, ',', '');	/*REMOVE ALL COMMAS*/

	LENGTH KEYWORD_FOUND $50 ;
	KEYWORD_FOUND = '';
	SIN_STOCKS = 0 ;
	DO I =1 TO 54;
		IF INDEXW(UPCASE(CLEANED_STRING), UPCASE(KEYWORD_STOCKS[I])) > 0 THEN DO;
			KEYWORD_FOUND = KEYWORD_STOCKS[I] ;
			SIN_STOCKS = 1;
		LEAVE;
		END;
	END;
	DROP I;
RUN;

/* STEP 14.4 : MERGING ABOVE FILE WITH ISIN AND SECID DATA */
%MERGE_CODE_1(INPUT_FILE_1=FILE_456, INPUT_FILE_2=FILE_SET.RIC_CODE, SORT_VARS=RICCODE, OUTPUT_FILE=SIN_STOCKS);

/* REMOVING ALL DUPLICATE VALUES FROM THE DATASET BY SECID */
PROC SORT DATA = SIN_STOCKS NODUPKEY; BY SECID; RUN;

/* STEP 14.5 : CLEAN THE ABOVE MERGED FILE FOR ANY BLANKS */
DATA SIN_STOCKS_1 ;
	SET SIN_STOCKS;
	BY SECID;
	WHERE NOT MISSING (SECID);
	IF Business_Sector_combined = " " AND  Business_Sector_Name = " " THEN DELETE;
	DROP cleaned_string	keyword_found COMBINED_NAME_1 COMBINED_NAME_2 COMBINED_NAME_3 ISIN RICCODE;
RUN;

/* STEP 14.6 : MERGING ABOVE FILE WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=SIN_STOCKS_1, SORT_VARS=SECID, OUTPUT_FILE=NZD_DATASET_FINAL);

/* STEP 14.7: MERGING ABOVE DATASET WITH NZD_HD_ALL_FINAL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=NZD_HD_ALL_FINAL, INPUT_FILE_2=SIN_STOCKS_1, SORT_VARS=SECID, OUTPUT_FILE=NZD_HD_ALL_FINAL);


/* *************************************************************************************** STEP 15 ******************************************************************************************* */
/* **************************************************************** CALCULATING STOCKS WITH ESGSCORE >75 AND SIN_STOCKS = 0 ************************************************** */

/* STEP 15.1 : FILTERING EQUITY DATA FROM DATASET */
PROC SQL;
	CREATE TABLE HOLDINGS_EQUITY AS
	SELECT DISTINCT *
	FROM NZD_HD_ALL_FINAL
	WHERE TRIM(DETAILHOLDINGTYPE) IN (
        	'EQUITY',
			'EQUITY - FUTURE',
			'EQUITY - PRIVATE/',
			'EQUITY - REIT',
			'EQUITY - UNDEFINE',
			'EQUITY - UNITS',
			'EQUITY - WARRANTS', )
	ORDER BY FUNDID, YEAR, MONTH; 
QUIT;
RUN;

/* STEP 15.4 : FILTERING DATA WHERE ESGSCORE >= 75 */
DATA TEST_12;  
  SET HOLDINGS_EQUITY ; 
  BY FUNDID YEAR MONTH;
  IF ESGSCORE >= 75 AND sin_stocks = 0 THEN 
      NEWSCORE = 1;       
    ELSE 
      NEWSCORE = 0; 
RUN; 

/* STEP 15.6 : COUNTING NO OF EQUITIES IN EACH FUND MONTH YEAR WHICH HAVE ESGSCORE >= 75 */
PROC SQL;								/* RUN PROC SQL, TOTAL NO OF FUNDS WHICH HAVE ESGSCORE GE 75 IS 384 */
	CREATE TABLE TEST_987 AS
	SELECT FUNDID, YEAR, MONTH, COUNT(*) AS ESGGE75_NZD_EQUITY
	FROM TEST_12
	WHERE NEWSCORE = 1
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

/* STEP 15.7 : CREATING FUNDLEVEL DATASET FOR RATIO VALUES */
PROC SQL;
	CREATE TABLE FUNDLEVEL_SET AS
	SELECT DISTINCT FUNDID, YEAR, MONTH, ESGHOLDINGS_EQUITY_NZD
	FROM NZD_DATASET_FINAL
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

/* STEP 15.8 : CREATING RATIO VARIABLE */
PROC SORT DATA = TEST_987; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FUNDLEVEL_SET; BY FUNDID YEAR MONTH; RUN; 

DATA FUNDLEVEL_SET_2;
	MERGE FUNDLEVEL_SET ( IN = A ) TEST_987 ( IN = B );
	BY FUNDID YEAR MONTH;
	RATIO_ESG75_HLDSEQ_NZD = (ESGGE75_NZD_EQUITY / ESGHOLDINGS_EQUITY_NZD)*100;
	DROP ESGHOLDINGS_EQUITY_NZD;
RUN;

/* STEP 15.9 : MERGE ABOVE DATASET WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=FUNDLEVEL_SET_2, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* **************************************************************____________________ PART 2 __________________________******************************************************** */
/* ********************** CALCULATING WEIGHTS FOR ESGSCORE GE 75 **************************** */
/* STEP 15.10 : FILTERING DATA FROM NZD_HD_ALL_FINAL WHERE ESGSCORE IS GE 75 */
DATA TEST_21; 
	SET TEST_12;
	WHERE NEWSCORE	= 1 ;
	KEEP FUNDID YEAR MONTH SECID NAME DETAILHOLDINGTYPE NUMBEROFSHARES ;
RUN;

/* STEP 15.11 : SELECTING DATASET FROM NZD_DATASET_FINAL ESGSCORE IS GE 75 AND NOT SIN_STOCKS */
DATA TEST_54; 
	SET NZD_DATASET_FINAL;
	WHERE ESGSCORE >= 75 AND sin_stocks = 0 ;
	KEEP FUNDID YEAR MONTH SECID PERCENTHOLDINGS BINARYVAR CAPITAL_INVESTED_PER_HOLDING DECOMPOSED_STK_RET ESGSCORE MONTHLYRETURNS; 
RUN;

PROC SORT DATA = TEST_54 ; BY FUNDID YEAR MONTH SECID; RUN;
PROC SORT DATA = TEST_21 ; BY FUNDID YEAR MONTH SECID; RUN; 

DATA ESGGE75_DATA ;
	MERGE TEST_54 ( IN = A ) TEST_21 ( IN = B ) ;
	BY FUNDID YEAR MONTH SECID;
	IF A AND B ;
RUN;

/* STEP 15.12 : CREATING SUMMARY STATS FROM ABOVE DATASET */
PROC SUMMARY DATA = ESGGE75_DATA;
	BY FUNDID YEAR MONTH ;
	VAR CAPITAL_INVESTED_PER_HOLDING ;
	OUTPUT OUT = GHJKL(DROP=_TYPE_ _FREQ_) 		
	SUM (CAPITAL_INVESTED_PER_HOLDING) = ESGGE75_CAP_INV_NZD 
	SUM (PERCENTHOLDINGS) = ESGGE75_SUM_WT_NZD 
	SUM (DECOMPOSED_STK_RET) = ESGGE75_VW_RETURNS_NZD ;
RUN;

/* STEP 15.13 : MERGING ABOVE DATASET WITH NZD_DATASET_FINAL */
%MERGE_CODE_1(INPUT_FILE_1=NZD_DATASET_FINAL, INPUT_FILE_2=GHJKL, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=NZD_DATASET_FINAL);

/* **********************************_________________________________ STEP 15.14 : UPDATING PERMANENT DATASET IN THE LIBRARY ______________________________________************************************************* */
/*DATA File_set.Nzd_hd_all_final_stkret_win;
	SET NZD_HD_ALL_FINAL;
	DROP _TYPE_ _FREQ_;
RUN; 

DATA File_set.Nzd_dataset_final_stkret_win;
	SET NZD_DATASET_FINAL;
	DROP _TYPE_ _FREQ_;
RUN; */


/* *************************************************************************************** STEP 20 ******************************************************************************************* */
/* ******************************************************************************** INTERMEDIATE STEP ******************************************************************************************* */
/* ************************************************************************ CREATING FUND LEVEL DATASET ***************************************************************************************** */
DATA TEMP_DATASET;
	SET NZD_DATASET_FINAL;
	DROP SecID Name Percentholdings Fileno RICCODE ESGSCORE ISIN ESG_CONTROVERSY monthlyreturns monthlyreturns_ORIGINAL STOCK_WEIGHT_DECIMAL DECOMPOSED_STK_RET CAPITAL_INVESTED_PER_HOLDING ESG COUNT_RATIO Business_Sector_combined 
		 Business_Sector_Name SIN_STOCKS _TYPE_ _FREQ_;
RUN;

PROC SQL;
	CREATE TABLE FUNDLEVEL_DATASET_TRUNCATED AS
	SELECT DISTINCT *
	FROM TEMP_DATASET;
QUIT;

/* ***********__________ CREATING PERMANENT DATASET OF FUNDLEVEL IN THE LIBRARY____________************ */
/*PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED OUT = FILE_SET.FUNDLEVEL_DATASET_STKRET_WIN NODUPKEY; BY FUNDID YEAR MONTH; RUN;*/



/* *************************************************************************************** STEP 18 ********************************************************************************** */
/* ********************************************************************* CREATING FLAGS FOR STYLE BOXES ***************************************************************************** */
/* STEP 1: REMOVING SPACES IN BETWEEN CHARACTERS FROM EQUITY LONG BOX DATA */
DATA EQUITY_LONG_BOX;
	SET FILE_SET.EQUITY_LONG_BOX;
	WHERE EQUITY_STYLE_BOX_LONG NE '';
	EQUITY_LONG_BOX = COMPRESS(EQUITY_STYLE_BOX_LONG, ' ');
	DROP EQUITY_STYLE_BOX_LONG;
RUN;

/* STEP 2: SELECT DISTINCT EQUITY_LONG_BOX VALUES FROM ABOVE DATA */
PROC SQL NOPRINT; 
        SELECT DISTINCT EQUITY_LONG_BOX
        INTO :COL_NAMES SEPARATED BY ' '
        FROM EQUITY_LONG_BOX
		WHERE EQUITY_LONG_BOX NE '';
QUIT;

%PUT &COL_NAMES;

/* STEP 3 : CREATING COLUMNS OF THE ABOVE DATASET */
DATA BOX_1;
    SET EQUITY_LONG_BOX;
    ARRAY COLS {*} &COL_NAMES.;
    DO I = 1 TO DIM(COLS);
        COLS{I} = 0;
    END;
    IF EQUITY_LONG_BOX NE '' THEN DO;
        ARRAY BOXES {*} &COL_NAMES.;
        DO J = 1 TO DIM(BOXES);
            IF EQUITY_LONG_BOX = VNAME(BOXES{J}) THEN BOXES{J} = 1;
        END;
    END;
    DROP I J;
RUN;

/* STEP 4 : MERGING EQUITY BOX WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=BOX_1, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);	

/* *****************_________________ CREATING PERMANENT DATASET AT FUND LEVEL IN THE LIBRARY _________________******************** */
/*DATA FUND_SET.FUNDLEVEL_DATASET_STKRET_WIN;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN; */


/* *************************************************************************************** STEP 19 ********************************************************************************** */
/* ********************************************************************* CREATING AVERAGE ESG PARAMETERS ***************************************************************************** */

/* CREATING AVERAGE ESG SCORE VARIABLE */
%PROC_SUMMARY_OVERALL(INPUT_FILE=Nzd_dataset_final, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=ESGSCORE, OUTPUT_FILE=ESG_SCORE_AVG_FUND, STATS_OPS=MEAN, CALCULATED_VAR=ESG_SCORE_AVG);

/* CREATING AVERAGE ESG CONTROVERSY SCORE VARIABLE */
%PROC_SUMMARY_OVERALL(INPUT_FILE=Nzd_dataset_final, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=ESG_CONTROVERSY, OUTPUT_FILE=ESG_CONTRO_AVG_FUND, STATS_OPS=MEAN, CALCULATED_VAR=ESG_CONTRO_AVG);

/* MERGING BOTH THE DATASETS TOGETHER */
%MERGE_CODE_1(INPUT_FILE_1=ESG_SCORE_AVG_FUND, INPUT_FILE_2=ESG_CONTRO_AVG_FUND, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=ESG_AVG);

/* MERGING ESG AVERAGE VALUES DATASET WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=ESG_AVG, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);	

/* CREATING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.FUNDLEVEL_DATASET_STKRET_WIN;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	DROP _TYPE_ _FREQ_;
RUN;*/

/* *************************************************************************************** STEP 20 ********************************************************************************** */
/* ********************************************************************* CREATING CAPM PARAMETERS ***************************************************************************** */

/* DATASET FOR YEARLY SUMMARY MEANS */
/*DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FILE_SET.FUNDLEVEL_DATASET_STKRET_WIN;
RUN;*/

/* STEP 1: CREATING NZ RISK FACTORS FILE */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\NZ_RISK_FACTORS.CSV',
			   OUTPUT_FILE=NZ_RISK_FACTORS);
PROC SORT DATA = NZ_RISK_FACTORS OUT = FILE_SET.NZ_RISK_FACTORS; BY YEAR MONTH; RUN;

/* CREATING INCEPTION DATE */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Inception_date.csv',
			   OUTPUT_FILE=Inception_date);

/* CREATING YEAR AND MONTH VARIABLE IN INCEPTION DATES FILE */
DATA INCEPTION_DATA;
    SET Inception_date;
    INCEPTION_MONTH = MONTH(Inception_Date); 
    INCEPTION_YEAR = YEAR(Inception_Date);  
	DROP Inception_Date;
RUN;

/* MERGING INCEPTION DATE WITH ORIGINAL FUNDRETURNS DATA */

%MERGE_CODE_1(INPUT_FILE_1=File_set.Fundlevel_merge_stkret_win, INPUT_FILE_2=INCEPTION_DATA, SORT_VARS=FUNDID, OUTPUT_FILE=FUNDRETURNS_NZD);

/* REMOVING ENTRIES BEFORE INCEPTION DATE */
DATA RET_1;
	SET FUNDRETURNS_NZD;
	INCEPTION_DATE=INTNX('MONTH', MDY(INCEPTION_MONTH, 1, INCEPTION_YEAR), 0); 
	DATE=INTNX('MONTH', MDY(MONTH, 1, YEAR), 0);
	FORMAT INCEPTION_DATE YYMON7.;
	FORMAT DATE YYMON7.;
	IF INCEPTION_DATE > DATE THEN DELETE;
	DROP INCEPTION_MONTH INCEPTION_YEAR Netassets_NZD;
RUN;

/* MERGING RISK_FACTORS DATA WITH ABOVE DATASET */
%MERGE_CODE_1(INPUT_FILE_1=RET_1, INPUT_FILE_2=NZ_RISK_FACTORS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=RET_1);

/* CREATING CAPM CALCULATIONS DATASET IN LIBRARY */
PROC SORT DATA=RET_1; BY FUNDID YEAR MONTH; RUN;
/*DATA File_Set.RETURNS_CAPM_STATA;
	SET RET_1;
	IF NOT MISSING(Fundreturns_NZD1);
	DROP DATE;
RUN;*/

/* MERGING DATASETS WITH STATA DATASET - AFTER STATA CALCULATIONS */
%IMPORT_MACRO(INPUT_FILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\Supporting_files\Alphas_file_STKRET_WIN.dta', DBMS_TYPE=DTA, OUTPUT_DATASET=Alphas_file);
PROC SORT DATA = Alphas_file; BY FUNDID YEAR MONTH; RUN;
PROC CONTENTS DATA = Alphas_file; RUN;

/* MERGING APLHAS FILE WITH FUNDLEVEL DATASET */
DATA Alphas_file_1;
	SET Alphas_file;
	DROP Fundreturns_NZD1 Name modate ex_ret SMB_AP HML_AP MOM_AP modate;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=Alphas_file_1, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);	

/* REWRITING MAIN FUNDLEVEL DATASET IN LIBRARY */
/*DATA File_set.FUNDLEVEL_DATASET_STKRET_WIN;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/


/* ************************************************************************ PART C ******************************************************************************** */
/* ----------------------------------------------------------------CREATING YEARLEVEL DATASET---------------------------------------------------------------------- */
/* ---------------------------------------------------------------- TABLE 1 ---------------------------------------------------------------------- */

/* CREATING YEARLY VARIABLES FOR TABLES */
/* *************_________________ AVERAGE AUM YEARLY _________________****************** */
/* OVERALL */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=Netassets_NZD, OUTPUT_FILE=AVG_AUM_STEP_1, STATS_OPS=MEAN, CALCULATED_VAR=AVG_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=AVG_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=AVG_AUM_MON_NZD_1, OUTPUT_FILE=AVG_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=AVG_AUM_MON_NZD_2);

DATA AVG_AUM_STEP_2;
	SET AVG_AUM_STEP_2;
	AVG_AUM_MILLIONS = AVG_AUM_MON_NZD_2 / 1000000;
RUN;

/* YEARLY */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=Netassets_NZD, OUTPUT_FILE=KS_AVG_AUM_STEP_1, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_AVG_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=KS_AVG_AUM_MON_NZD_1, OUTPUT_FILE=KS_AVG_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_AUM_MON_NZD_2);

/* YEARLY KIWISAVER & PENSION */
%PROC_SUMMARY_KIWIPENSION(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=Netassets_NZD, OUTPUT_FILE=KS_AVG_AUM_STEP_1, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_AVG_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=KS_AVG_AUM_MON_NZD_1, OUTPUT_FILE=KS_AVG_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_AUM_MON_NZD_2);

DATA KS_AVG_AUM_STEP_2;
	SET KS_AVG_AUM_STEP_2;
	AVG_AUM_MILLIONS = KS_AVG_AUM_MON_NZD_2 / 1000000;
RUN;

/* YEARLY OPENEND */
%PROC_SUMMARY_OPENEND(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=NETASSETS_NZD, OUTPUT_FILE=OPENEND_STEP_1, STATS_OPS=MEAN, CALCULATED_VAR=OP_AVG_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=OPENEND_STEP_1, CLASS_VARS=YEAR, VARIABLES=OP_AVG_AUM_MON_NZD_1, OUTPUT_FILE=OP_AVG_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=OP_AVG_AUM_MON_NZD_2);

DATA OP_AVG_AUM_STEP_2;
	SET OP_AVG_AUM_STEP_2;
	AVG_AUM_MILLIONS = OP_AVG_AUM_MON_NZD_2 / 1000000;
RUN;

/* **************________________ TOTAL AUM _________________***************** */
/* OVERALL */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=NETASSETS_NZD, OUTPUT_FILE=TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=TOT_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=TOT_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=TOT_AUM_MON_NZD_1, OUTPUT_FILE=TOT_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=TOT_AUM_MON_NZD_2);

DATA TOT_AUM_STEP_2;
	SET TOT_AUM_STEP_2;
	TOT_AUM_MILLIONS = TOT_AUM_MON_NZD_2 / 1000000;
RUN;

/* KIWISAVER */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=NETASSETS_NZD, OUTPUT_FILE=KS_TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=KS_TOT_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_TOT_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=KS_TOT_AUM_MON_NZD_1, OUTPUT_FILE=KS_TOT_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_TOT_AUM_MON_NZD_2);

/* YEARLY KIWISAVER & PENSION */
%PROC_SUMMARY_KIWIPENSION(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=NETASSETS_NZD, OUTPUT_FILE=KS_TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=KS_TOT_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_TOT_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=KS_TOT_AUM_MON_NZD_1, OUTPUT_FILE=KS_TOT_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_TOT_AUM_MON_NZD_2);

DATA KS_TOT_AUM_STEP_2;
	SET KS_TOT_AUM_STEP_2;
	TOT_AUM_MILLIONS = KS_TOT_AUM_MON_NZD_2 / 1000000;
RUN;

/* YEARLY OPENEND */
%PROC_SUMMARY_OPENEND(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=NETASSETS_NZD, OUTPUT_FILE=OPENEND_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=OP_TOT_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=OPENEND_STEP_1, CLASS_VARS=YEAR, VARIABLES=OP_TOT_AUM_MON_NZD_1, OUTPUT_FILE=OP_TOT_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=OP_TOT_AUM_MON_NZD_2);

DATA OP_TOT_AUM_STEP_2;
	SET OP_TOT_AUM_STEP_2;
	TOT_AUM_MILLIONS = OP_TOT_AUM_MON_NZD_2 / 1000000;
RUN;


/* **************__________________ ESG AUM - TOTAL HOLDINGS($) __________________***************** */
/* OVERALL */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=ESG_TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=ESG_TOT_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=ESG_TOT_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=ESG_TOT_AUM_MON_NZD_1, OUTPUT_FILE=ESG_TOT_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=ESG_TOT_AUM_MON_NZD_2);

DATA ESG_TOT_AUM_STEP_2;
	SET ESG_TOT_AUM_STEP_2;
	ESG_TOT_AUM = ESG_TOT_AUM_MON_NZD_2 / 1000000;
RUN;

/* KIWISAVER */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=KS_ESG_TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=KS_ESG_TOT_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_ESG_TOT_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=KS_ESG_TOT_AUM_MON_NZD_1, OUTPUT_FILE=KS_ESG_TOT_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_TOT_AUM_MON_NZD_2);

/* YEARLY KIWISAVER & PENSION */
%PROC_SUMMARY_KIWIPENSION(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=KS_ESG_TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=KS_ESG_TOT_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_ESG_TOT_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=KS_ESG_TOT_AUM_MON_NZD_1, OUTPUT_FILE=KS_ESG_TOT_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_TOT_AUM_MON_NZD_2);

DATA KS_ESG_TOT_AUM_STEP_2;
	SET KS_ESG_TOT_AUM_STEP_2;
	ESG_TOT_AUM = KS_ESG_TOT_AUM_MON_NZD_2 / 1000000;
RUN;

/* YEARLY OPENEND */
%PROC_SUMMARY_OPENEND(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=OPEN_ESG_TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=OP_ESG_TOT_AUM_MON_NZD_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=OPEN_ESG_TOT_AUM_STEP_1, CLASS_VARS=YEAR, VARIABLES=OP_ESG_TOT_AUM_MON_NZD_1, OUTPUT_FILE=OP_ESG_TOT_AUM_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=OP_ESG_TOT_AUM_MON_NZD_2);

DATA OP_ESG_TOT_AUM_STEP_2;
	SET OP_ESG_TOT_AUM_STEP_2;
	ESG_TOT_AUM = OP_ESG_TOT_AUM_MON_NZD_2 / 1000000;
RUN;


/* **************________________ TOTAL HOLDINGS __________________*************** */
/* OVERALL */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=NZD_ESG_WT_OF_FUND, OUTPUT_FILE=ESG_WEIGHT_1, STATS_OPS=MEAN, CALCULATED_VAR=AVG_ESG_WEIGHT_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=ESG_WEIGHT_1, CLASS_VARS=YEAR, VARIABLES=AVG_ESG_WEIGHT_1, OUTPUT_FILE=ESG_WEIGHT_2, STATS_OPS=MEAN, CALCULATED_VAR=AVG_ESG_WEIGHT_2);

/* KIWISAVER */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=NZD_ESG_WT_OF_FUND, OUTPUT_FILE=KS_ESG_WEIGHT_1, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_ESG_WEIGHT_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_ESG_WEIGHT_1, CLASS_VARS=YEAR, VARIABLES=KS_AVG_ESG_WEIGHT_1, OUTPUT_FILE=KS_ESG_WEIGHT_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_ESG_WEIGHT_2);

/* YEARLY KIWISAVER & PENSION */
%PROC_SUMMARY_KIWIPENSION(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=NZD_ESG_WT_OF_FUND, OUTPUT_FILE=KS_ESG_WEIGHT_1, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_ESG_WEIGHT_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_ESG_WEIGHT_1, CLASS_VARS=YEAR, VARIABLES=KS_AVG_ESG_WEIGHT_1, OUTPUT_FILE=KS_ESG_WEIGHT_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_AVG_ESG_WEIGHT_2);

/* YEARLY OPENEND */
%PROC_SUMMARY_OPENEND(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=NZD_ESG_WT_OF_FUND, OUTPUT_FILE=OPEN_ESG_WEIGHT_1, STATS_OPS=MEAN, CALCULATED_VAR=OP_AVG_ESG_WEIGHT_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=OPEN_ESG_WEIGHT_1, CLASS_VARS=YEAR, VARIABLES=OP_AVG_ESG_WEIGHT_1, OUTPUT_FILE=OP_ESG_WEIGHT_2, STATS_OPS=MEAN, CALCULATED_VAR=OP_AVG_ESG_WEIGHT_2);



/* ************_________________ ESG AUM - OVERALL ESG AVERAGE AUM __________________***************** */
/* OVERALL */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=ESG_AVG_AUM_MON_STEP_1, STATS_OPS=MEAN, CALCULATED_VAR=ESG_AVG_AUM_MON_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=ESG_AVG_AUM_MON_STEP_1, CLASS_VARS=YEAR, VARIABLES=ESG_AVG_AUM_MON_1, OUTPUT_FILE=ESG_AVG_AUM_MONSTEP_2, STATS_OPS=MEAN, CALCULATED_VAR=ESG_AVG_AUM_MON_2);

DATA ESG_AVG_AUM_MONSTEP_2;
	SET ESG_AVG_AUM_MONSTEP_2;
	ESG_AVG_AUM_MILLIONS = ESG_AVG_AUM_MON_2 / 1000000;
RUN;

/* KIWISAVER */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=KS_ESG_AVG_AUM_MON_STEP_1, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_AVG_AUM_MON_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_ESG_AVG_AUM_MON_STEP_1, CLASS_VARS=YEAR, VARIABLES=KS_ESG_AVG_AUM_MON_1, OUTPUT_FILE=KS_ESG_AVG_AUM_MON_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_AVG_AUM_MON_2);

/* YEARLY KIWISAVER & PENSION */
%PROC_SUMMARY_KIWIPENSION(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=KS_ESG_AVG_AUM_MON_STEP_1, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_AVG_AUM_MON_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=KS_ESG_AVG_AUM_MON_STEP_1, CLASS_VARS=YEAR, VARIABLES=KS_ESG_AVG_AUM_MON_1, OUTPUT_FILE=KS_ESG_AVG_AUM_MON_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_AVG_AUM_MON_2);

DATA KS_ESG_AVG_AUM_MON_STEP_2;
	SET KS_ESG_AVG_AUM_MON_STEP_2;
	ESG_AVG_AUM_MILLIONS = KS_ESG_AVG_AUM_MON_2 / 1000000;
RUN;

/* YEARLY OPENEND */
%PROC_SUMMARY_OPENEND(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=OPEN_ESG_AVG_AUM_MON_STEP_1, STATS_OPS=MEAN, CALCULATED_VAR=OP_ESG_AVG_AUM_MON_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=OPEN_ESG_AVG_AUM_MON_STEP_1, CLASS_VARS=YEAR, VARIABLES=OP_ESG_AVG_AUM_MON_1, OUTPUT_FILE=OP_ESG_AVG_AUM_MON_STEP_2, STATS_OPS=MEAN, CALCULATED_VAR=OP_ESG_AVG_AUM_MON_2);

DATA OP_ESG_AVG_AUM_MON_STEP_2;
	SET OP_ESG_AVG_AUM_MON_STEP_2;
	ESG_AVG_AUM_MILLIONS = OP_ESG_AVG_AUM_MON_2 / 1000000;
RUN;


/* *************_______________ PROPORTION OF ESG STOCKS ________________*************** */
/* OVERALL */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=RATIO_ESG_TO_TOT_EQUITY_NZD, OUTPUT_FILE=FILE_1, STATS_OPS=MEAN, CALCULATED_VAR=ESG_STOCKS_AVG_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=FILE_1, CLASS_VARS=YEAR, VARIABLES=ESG_STOCKS_AVG_1, OUTPUT_FILE=FILE_2, STATS_OPS=MEAN, CALCULATED_VAR=ESG_STOCKS_AVG_2);

/* KIWISAVER */
%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=RATIO_ESG_TO_TOT_EQUITY_NZD, OUTPUT_FILE=FILE_3, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_STOCKS_AVG_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=FILE_3, CLASS_VARS=YEAR, VARIABLES=KS_ESG_STOCKS_AVG_1, OUTPUT_FILE=FILE_4, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_STOCKS_AVG_2);

/* YEARLY KIWISAVER & PENSION */
%PROC_SUMMARY_KIWIPENSION(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=RATIO_ESG_TO_TOT_EQUITY_NZD, OUTPUT_FILE=FILE_3, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_STOCKS_AVG_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=FILE_3, CLASS_VARS=YEAR, VARIABLES=KS_ESG_STOCKS_AVG_1, OUTPUT_FILE=FILE_4, STATS_OPS=MEAN, CALCULATED_VAR=KS_ESG_STOCKS_AVG_2);

/* YEARLY OPENEND */
%PROC_SUMMARY_OPENEND(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=RATIO_ESG_TO_TOT_EQUITY_NZD, OUTPUT_FILE=FILE_6, STATS_OPS=MEAN, CALCULATED_VAR=OP_ESG_STOCKS_AVG_1);
%PROC_SUMMARY_OVERALL(INPUT_FILE=FILE_6, CLASS_VARS=YEAR, VARIABLES=OP_ESG_STOCKS_AVG_1, OUTPUT_FILE=FILE_7, STATS_OPS=MEAN, CALCULATED_VAR=OP_ESG_STOCKS_AVG_2);


/*----------------------------------------------------------------- TABLE 2 ---------------------------------------------------------------------- */

/* ************************************* OVERALL *************************************** */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED  Mean Median 	P1	P99	STD N MIN MAX;
	VAR	Netassets_NZD SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN TOTALHOLDINGS_EQUITY_NZD COMPONENT_HOLDINGS_NZD Fundreturns_NZD1 capm_alpha ch4_alpha 
		ROLLING_VOLATILITY_NZD FLOW_PERCENT_WIN_NZD market_beta momentum_beta V_RISK IDIO_4FF  ;						
RUN;

/* TOTAL AUM STATS */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=Netassets_NZD, OUTPUT_FILE=TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=TOT_AUM_MON_NZD_1);
PROC MEANS DATA = TOT_AUM_STEP_1  Mean Median P1 P99 STD N;
	VAR	TOT_AUM_MON_NZD_1;						
RUN;

/* VALUE WEIGHTED FUNDRETURNS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED Mean Median P1 P99 STD N;
	WEIGHT Netassets_NZD;
	VAR Fundreturns_NZD1;
RUN;


/* ************************************** KIWISAVER *************************************** */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED  Mean Median 	P1	P99	STD N MIN MAX;
	WHERE BINARYVAR=1 OR BINARYVAR=2;
	VAR	Netassets_NZD SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN TOTALHOLDINGS_EQUITY_NZD COMPONENT_HOLDINGS_NZD Fundreturns_NZD1 capm_alpha ch4_alpha 
		ROLLING_VOLATILITY_NZD FLOW_PERCENT_WIN_NZD market_beta momentum_beta V_RISK IDIO_4FF;		
RUN;

/*%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=Netassets_NZD, OUTPUT_FILE=KS_TOT_AUM_MON_1, STATS_OPS=SUM, CALCULATED_VAR=KS_TOT_AUM_MON_NZD_1);*/
/* FOR EPUnIIR PAPER TABLES */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	WHERE BINARYVAR IN (1,2);
	CLASS YEAR MONTH;
	VAR Netassets_NZD;
	OUTPUT OUT = KS_TOT_AUM_MON_1 SUM(Netassets_NZD) = KS_TOT_AUM_MON_NZD_1;
RUN;

PROC MEANS DATA = KS_TOT_AUM_MON_1  Mean Median P1 P99 STD N;
	VAR	KS_TOT_AUM_MON_NZD_1;						
RUN;

/* VALUE WEIGHTED FUNDRETURNS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED Mean Median P1 P99 STD N;
	WHERE BINARYVAR IN (1,2);
	WEIGHT Netassets_NZD;
	VAR Fundreturns_NZD1;
RUN;


/* ************************************** OPEN-END *************************************** */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED  Mean Median 	P1	P99	STD N MIN MAX;
	WHERE BINARYVAR=3;
	VAR	Netassets_NZD SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN TOTALHOLDINGS_EQUITY_NZD COMPONENT_HOLDINGS_NZD Fundreturns_NZD1 capm_alpha ch4_alpha 
		ROLLING_VOLATILITY_NZD FLOW_PERCENT_WIN_NZD market_beta momentum_beta V_RISK IDIO_4FF;		
RUN;

/*%PROC_SUMMARY_OPENEND(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=Netassets_NZD, OUTPUT_FILE=, STATS_OPS=SUM, CALCULATED_VAR=);*/
/* FOR EPUnIIR PAPER TABLES */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	WHERE BINARYVAR = 3;
	CLASS YEAR MONTH;
	VAR Netassets_NZD;
	OUTPUT OUT = OP_TOT_AUM_MON_1 SUM(Netassets_NZD) = OP_TOT_AUM_MON_NZD_1;
RUN;

PROC MEANS DATA = OP_TOT_AUM_MON_1  Mean Median P1 P99 STD N;
	VAR	OP_TOT_AUM_MON_NZD_1;						
RUN;

/* VALUE WEIGHTED FUNDRETURNS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED Mean Median P1 P99 STD N;
	WHERE BINARYVAR = 3;
	WEIGHT Netassets_NZD;
	VAR Fundreturns_NZD1;
RUN;


/* ************************************* ESG PARAMETERS *************************************** */
/* OVERALL */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED  Mean Median 	P1	P99	STD N MIN MAX;
	VAR VW_ESG_RETURNS SUM_ESG_CAPITAL_NZD NZD_ESG_WT_OF_FUND ESG_TILT_EXCLUSIVE_NZD 
		RATIO_ESG_TO_TOT_HOLDINGS_NZD ESGHOLDINGS_EQUITY_NZD ESG_FLOW_PERCENT_WIN_NZD SUM_TIMING_MED_ESG_WIN SUM_PICKING_MED_ESG_WIN ESG_SCORE_AVG ESG_CONTRO_AVG;						
RUN;

%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=ESG_TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=ESG_TOT_AUM_MON_NZD_1);
PROC MEANS DATA = ESG_TOT_AUM_STEP_1  Mean Median P1 P99 STD N;
	VAR	ESG_TOT_AUM_MON_NZD_1;						
RUN;

/* KIWISAVER */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED  Mean Median 	P1	P99	STD N MIN MAX;
	WHERE BINARYVAR IN (1,2);
	VAR VW_ESG_RETURNS SUM_ESG_CAPITAL_NZD NZD_ESG_WT_OF_FUND ESG_TILT_EXCLUSIVE_NZD 
		RATIO_ESG_TO_TOT_HOLDINGS_NZD ESGHOLDINGS_EQUITY_NZD ESG_FLOW_PERCENT_WIN_NZD SUM_TIMING_MED_ESG_WIN SUM_PICKING_MED_ESG_WIN ESG_SCORE_AVG ESG_CONTRO_AVG;						
RUN;

/*%PROC_SUMMARY_KIWISAVER(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=KS_ESG_TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=KS_ESG_TOT_AUM_MON_NZD_1);*/
/* FOR EPUnIIR PAPER TABLES */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	WHERE BINARYVAR IN (1,2);
	CLASS YEAR MONTH;
	VAR SUM_ESG_CAPITAL_NZD;
	OUTPUT OUT = KS_ESG_TOT_AUM_STEP_1 SUM(SUM_ESG_CAPITAL_NZD) = KS_ESG_TOT_AUM_MON_NZD_1;
RUN;

PROC MEANS DATA = KS_ESG_TOT_AUM_STEP_1  Mean Median P1 P99 STD N;
	VAR	KS_ESG_TOT_AUM_MON_NZD_1;						
RUN;


/* OPEN-END, KIWISAVER - CHANGE THE INPUT VARIABLE BINARYVAR TO (1,2) OR 3 AS PER REQUIREMENTS */ 
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED  Mean Median 	P1	P99	STD N MIN MAX;
	WHERE BINARYVAR = 3;
	VAR VW_ESG_RETURNS SUM_ESG_CAPITAL_NZD NZD_ESG_WT_OF_FUND ESG_TILT_EXCLUSIVE_NZD 
		RATIO_ESG_TO_TOT_HOLDINGS_NZD ESGHOLDINGS_EQUITY_NZD ESG_FLOW_PERCENT_WIN_NZD SUM_TIMING_MED_ESG_WIN SUM_PICKING_MED_ESG_WIN ESG_SCORE_AVG ESG_CONTRO_AVG;						
RUN;

/*%PROC_SUMMARY_OPENEND(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=OP_ESG_TOT_AUM_STEP_1, STATS_OPS=SUM, CALCULATED_VAR=OP_ESG_TOT_AUM_MON_NZD_1);*/
/* FOR EPUnIIR PAPER TABLES */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	WHERE BINARYVAR = 3;
	CLASS YEAR MONTH;
	VAR SUM_ESG_CAPITAL_NZD;
	OUTPUT OUT = OP_ESG_TOT_AUM_STEP_1 SUM(SUM_ESG_CAPITAL_NZD) = OP_ESG_TOT_AUM_MON_NZD_1;
RUN;

PROC MEANS DATA = OP_ESG_TOT_AUM_STEP_1  Mean Median P1 P99 STD N;
	VAR	OP_ESG_TOT_AUM_MON_NZD_1;						
RUN;


/* ************************************* CORRELATION MATRIX - TABLE 2 *************************************** */
/* CREATING AVERAGE AUM VARIABLE */
/*%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=Netassets_NZD, OUTPUT_FILE=ASSET_AUM, STATS_OPS=MEAN, CALCULATED_VAR=AVERAGE_AUM);
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=ASSET_AUM, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);*/

/* CREATING ESG AVERAGE AUM VARIABLE */
/*%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_ESG_CAPITAL_NZD, OUTPUT_FILE=ESG_AVG_AUM, STATS_OPS=SUM, CALCULATED_VAR=ESG_AVG_AUM);
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=ESG_AVG_AUM, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);*/

PROC CORR DATA = FUNDLEVEL_DATASET_TRUNCATED;
	VAR Netassets_NZD  Fundreturns_NZD1 capm_alpha ch4_alpha ROLLING_VOLATILITY_NZD FLOW_PERCENT_WIN_NZD market_beta momentum_beta V_RISK IDIO_4FF 
		VW_ESG_RETURNS SUM_ESG_CAPITAL_NZD NZD_ESG_WT_OF_FUND ESG_TILT_EXCLUSIVE_NZD RATIO_ESG_TO_TOT_HOLDINGS_NZD ESG_FLOW_PERCENT_WIN_NZD ESG_SCORE_AVG ESG_CONTRO_AVG ;
RUN;

/* CREATING PERMANENT DATASET IN LIBRARY */
/*DATA File_set.Fundlevel_dataset_truncated;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	DROP _TYPE_ _FREQ_;
RUN;*/


/* *******************************************************************___________________________ TABLE 3 ______________________________************************************************************* */
/* ************______________ STEP 1 : CREATING FUNDLEVEL DATASET AT WORK LIBRARY ________________************* */
/* MERGE 1 */
PROC SORT DATA=File_set.Fundlevel_dataset_STKRET_WIN OUT = Fundlevel_dataset_truncated; BY YEAR MONTH; RUN;

/* MERGE 2 */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\New_Zealand_EPU_Data.CSV',
			   OUTPUT_FILE=New_Zealand_EPU_Data_1);

/* CLEANING ABOVE DATASET */
DATA New_Zealand_EPU_Data;
	SET New_Zealand_EPU_Data_1;
	DROP VAR5 VAR6;
	WHERE (YEAR > 2007 AND YEAR < 2022) OR 
          (YEAR = 2007 AND MONTH >= 7) OR 
          (YEAR = 2022 AND MONTH <= 12); 
RUN;

%MERGE_CODE_1(INPUT_FILE_1=Fundlevel_dataset_truncated, INPUT_FILE_2=New_Zealand_EPU_Data, SORT_VARS=YEAR MONTH, OUTPUT_FILE=Fundlevel_dataset_truncated);


/* ***************************************_______________________STEP 2 __________________________************************************************** */
/* CREATING HIGH LOW FLAG FOR EPU */

PROC SORT DATA=New_Zealand_EPU_Data_1; BY YEAR MONTH; RUN; 

/* CREATING TIME SERIES VARIABLE */
DATA EPU_DATA_1;
	SET New_Zealand_EPU_Data_1;
	MODATE = MDY(MONTH,1,YEAR);
	DROP VAR5 VAR6;
	/*FORMAT MODATE YYMMDD10.;*/
RUN;

PROC EXPAND DATA=EPU_Data_1 OUT=SETUP3 METHOD=NONE;   
	ID MODATE;
	CONVERT EPU_Scores= EPU_MEDIAN / TRANSFORM=(NOMISS MOVMED 12); 	
RUN; 

/* CREATING EPU HIGH AND LOW FLAG */
DATA SETUP_33;
	SET SETUP3;
	IF EPU_Scores >= EPU_MEDIAN THEN EPU_HIGH = 1;
	ELSE EPU_HIGH = 0;
RUN;

/* CLEANING DATASET TO MERGE WITH FUNDLEVEL DATASET */
DATA EPU_MEDIAN;
	SET SETUP_33;
	KEEP YEAR MONTH EPU_MEDIAN EPU_HIGH EPU_LOW;
	WHERE (YEAR > 2007 AND YEAR < 2022) OR
		  (YEAR = 2007 AND MONTH >= 7) OR 
		  (YEAR = 2022 AND MONTH <= 12);
RUN;

/*DATA FILE_SET.EPU_MEDIAN;
	SET EPU_MEDIAN;
RUN;*/


/* MERGING THE EPU_MEDIAN DATASET WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=Fundlevel_dataset_truncated, INPUT_FILE_2=EPU_MEDIAN, SORT_VARS=YEAR MONTH, OUTPUT_FILE=Fundlevel_dataset_truncated);

/* REWRITING PERMANENT DATASET IN THE LIBRARY FOR FUNDLEVEL DATASET */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET Fundlevel_dataset_truncated;
RUN;*/


/* ***********************________________ TABLE 3 - PANEL A ________________************************** */
/* OVERALL */
PROC MEANS DATA = Fundlevel_dataset_truncated MEAN N;
	WHERE EPU_HIGH = 1;
	VAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN ;
RUN;

PROC MEANS DATA = Fundlevel_dataset_truncated MEAN N;
	WHERE EPU_HIGH = 0;
	VAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN ;
RUN;

/* PICKING */
PROC MEANS DATA = Fundlevel_dataset_truncated MEAN N;
	WHERE EPU_HIGH = 1 AND BINARYVAR = 1;
	VAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN ;
RUN;

PROC MEANS DATA = Fundlevel_dataset_truncated MEAN N;
	WHERE EPU_HIGH = 0 AND BINARYVAR = 1;
	VAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN ;
RUN;


/* ESG FUNDS */
PROC MEANS DATA = Fundlevel_dataset_truncated MEAN N;
	WHERE EPU_HIGH = 1 AND RATIO_ESG_TO_TOT_EQUITY_NZD >= 50;
	VAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN;
RUN;

PROC MEANS DATA = Fundlevel_dataset_truncated MEAN N;
	WHERE EPU_HIGH = 0 AND RATIO_ESG_TO_TOT_EQUITY_NZD >= 50;
	VAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN;
RUN;

/* ESG FUNDS AND KIWISAVER */
PROC MEANS DATA = Fundlevel_dataset_truncated MEAN N;
	WHERE EPU_HIGH = 1 AND RATIO_ESG_TO_TOT_EQUITY_NZD >= 50 AND BINARYVAR =1;
	VAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN;
RUN;

PROC MEANS DATA = Fundlevel_dataset_truncated MEAN N;
	WHERE EPU_HIGH = 0 AND RATIO_ESG_TO_TOT_EQUITY_NZD >= 50 AND BINARYVAR =1;
	VAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN;
RUN;


/* AS PER FUND STYLE */
%MACRO TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH, FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS, OUTPUT_FILE);

    /* COUNTING NO OF FUND STYLES TO RUN THE DO LOOP */
    %LET FUND_STYLE_NUMS = %SYSFUNC(COUNTW(&FUND_STYLE_INPUT));

    /* INITIALIZE AN EMPTY FLAG TO TRACK THE FIRST ITERATION */
    %LET FIRST_ITER = 1;

    /* LOOPING THROUGH EACH FUND STYLE */
    %DO I = 1 %TO &FUND_STYLE_NUMS;
        %LET FUND_STYLE = %SCAN(&FUND_STYLE_INPUT, &I);

        /* RUNNING PROC TTESTS AND STORE THE FILES */
		ODS OUTPUT TTests = 	TTEST_&FUND_STYLE;			/* PUT RESULTS IN THIS FILE FIRST */
		ODS OUTPUT Statistics = MEAN_&FUND_STYLE;
		PROC TTEST DATA=FUNDLEVEL_DATASET_TRUNCATED;
            WHERE EPU_HIGH = &INPUT_EPU_HIGH. AND %UNQUOTE(&FUND_STYLE) = 1;
            VAR &INPUT_VAR_FOR_CALS.;
        RUN;
		
		/* MERGE BOTH THE FILES */
		%MERGE_CODE_2(INPUT_FILE_1=MEAN_&FUND_STYLE, INPUT_FILE_2=TTEST_&FUND_STYLE, SORT_VARS=Variable, OUTPUT_FILE=Results_&FUND_STYLE);

        /* ADD A FUND_STYLE IDENTIFIER IN ODS FILE AND CLEAN THE DATASET FOR REQUIRED VARIABLES ONLY */
        DATA Results_&FUND_STYLE;
			LENGTH FUND_STYLE $32;
            SET Results_&FUND_STYLE;
            FUND_STYLE = "&FUND_STYLE";  			/* ADD THE CURRENT FUND STYLE AS A VARIABLE */
			KEEP FUND_STYLE Variable Mean N tValue Probt;
		RUN;
		
		/* APPEND THE RESULTS IN ANOTHER DATABASE - THIS LOOP IS NEEDED TO MAKE DATA STRUCTURE PROPER IN THE FILE */
         %IF &FIRST_ITER = 1 %THEN %DO;
            DATA &OUTPUT_FILE.;
                SET Results_&FUND_STYLE;
            RUN;
            %LET FIRST_ITER = 0; /* MAKING FIRST_ITER FLLAG AS FALSE */
        %END;
        %ELSE %DO;
            /* APPEND RESULTS IN ANOTHER DATASET */
            PROC APPEND BASE=&OUTPUT_FILE. DATA=Results_&FUND_STYLE 	FORCE;
            RUN;
        %END;
		
		/* DELETE THE TEMPORARY DATASET SO THAT NO OVERWRITING HAPPENS */
		PROC DATASETS LIBRARY=WORK NOLIST;
            DELETE MEAN_&FUND_STYLE 	TTEST_&FUND_STYLE	Results_&FUND_STYLE;
        QUIT;

    %END;

%MEND TTEST_FUND_STYLES_FLAG_EPU;

/* DEFINE THE STYLE LIST */
%LET FUND_STYLE_INPUT = LARGEGROWTH LARGEVALUE LARGEBLEND MIDGROWTH MIDVALUE MIDBLEND SMALLGROWTH SMALLVALUE SMALLBLEND;

/* RUN THE MACRO */
/* PICKING */
%TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH = 0, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN, OUTPUT_FILE=PICKING_EPU_LOW_MEAN);		
%TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH = 1, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN, OUTPUT_FILE=PICKING_EPU_HIGH_MEAN);
 
/* TIMING */
%TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH = 0, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN, OUTPUT_FILE=TIMING_EPU_LOW_MEAN);
%TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH = 1, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN, OUTPUT_FILE=TIMING_EPU_HIGH_MEAN);


/* AS PER FUND STYLE - KIWISAVER */
%MACRO TTEST_FUND_STYLES_FLAG_EPU_KS(INPUT_EPU_HIGH, FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS, OUTPUT_FILE);

    /* COUNTING NO OF FUND STYLES TO RUN THE DO LOOP */
    %LET FUND_STYLE_NUMS = %SYSFUNC(COUNTW(&FUND_STYLE_INPUT));

    /* INITIALIZE AN EMPTY FLAG TO TRACK THE FIRST ITERATION */
    %LET FIRST_ITER = 1;

    /* LOOPING THROUGH EACH FUND STYLE */
    %DO I = 1 %TO &FUND_STYLE_NUMS;
        %LET FUND_STYLE = %SCAN(&FUND_STYLE_INPUT, &I);

        /* RUNNING PROC TTESTS AND STORE THE FILES */
		ODS OUTPUT TTests = 	TTEST_&FUND_STYLE;			/* PUT RESULTS IN THIS FILE FIRST */
		ODS OUTPUT Statistics = MEAN_&FUND_STYLE;
		PROC TTEST DATA=FUNDLEVEL_DATASET_TRUNCATED;
            WHERE EPU_HIGH = &INPUT_EPU_HIGH. AND %UNQUOTE(&FUND_STYLE) = 1 AND BINARYVAR =1;
            VAR &INPUT_VAR_FOR_CALS.;
        RUN;
		
		/* MERGE BOTH THE FILES */
		%MERGE_CODE_2(INPUT_FILE_1=MEAN_&FUND_STYLE, INPUT_FILE_2=TTEST_&FUND_STYLE, SORT_VARS=Variable, OUTPUT_FILE=Results_&FUND_STYLE);

        /* ADD A FUND_STYLE IDENTIFIER IN ODS FILE AND CLEAN THE DATASET FOR REQUIRED VARIABLES ONLY */
        DATA Results_&FUND_STYLE;
			LENGTH FUND_STYLE $32;
            SET Results_&FUND_STYLE;
            FUND_STYLE = "&FUND_STYLE";  			/* ADD THE CURRENT FUND STYLE AS A VARIABLE */
			KEEP FUND_STYLE Variable Mean N tValue Probt;
		RUN;
		
		/* APPEND THE RESULTS IN ANOTHER DATABASE - THIS LOOP IS NEEDED TO MAKE DATA STRUCTURE PROPER IN THE FILE */
         %IF &FIRST_ITER = 1 %THEN %DO;
            DATA &OUTPUT_FILE.;
                SET Results_&FUND_STYLE;
            RUN;
            %LET FIRST_ITER = 0; /* MAKING FIRST_ITER FLLAG AS FALSE */
        %END;
        %ELSE %DO;
            /* APPEND RESULTS IN ANOTHER DATASET */
            PROC APPEND BASE=&OUTPUT_FILE. DATA=Results_&FUND_STYLE 	FORCE;
            RUN;
        %END;
		
		/* DELETE THE TEMPORARY DATASET SO THAT NO OVERWRITING HAPPENS */
		PROC DATASETS LIBRARY=WORK NOLIST;
            DELETE MEAN_&FUND_STYLE 	TTEST_&FUND_STYLE	Results_&FUND_STYLE;
        QUIT;

    %END;

%MEND TTEST_FUND_STYLES_FLAG_EPU_KS;

/* DEFINE THE STYLE LIST */
%LET FUND_STYLE_INPUT = LARGEGROWTH LARGEVALUE LARGEBLEND MIDGROWTH MIDVALUE MIDBLEND SMALLGROWTH SMALLVALUE SMALLBLEND;

/* RUN THE MACRO */
/* PICKING */
%TTEST_FUND_STYLES_FLAG_EPU_KS(INPUT_EPU_HIGH = 0, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN, OUTPUT_FILE=PICKING_EPU_LOW_MEAN);		
%TTEST_FUND_STYLES_FLAG_EPU_KS(INPUT_EPU_HIGH = 1, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN, OUTPUT_FILE=PICKING_EPU_HIGH_MEAN);
 
/* TIMING */
%TTEST_FUND_STYLES_FLAG_EPU_KS(INPUT_EPU_HIGH = 0, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN, OUTPUT_FILE=TIMING_EPU_LOW_MEAN);
%TTEST_FUND_STYLES_FLAG_EPU_KS(INPUT_EPU_HIGH = 1, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN, OUTPUT_FILE=TIMING_EPU_HIGH_MEAN);

data step_1;
	set Picking_file_med(obs=10);
run;


/* ********************************_____________________ NUMBER OF FUNDS ________________________************************** */
/* TO CALCULATE NO OF FUNDS PER MONTH AND YEAR */
/* OVERALL */
PROC SQL;
	CREATE TABLE DATA_123 AS
	SELECT DISTINCT YEAR, MONTH, COUNT(*) AS FUNDID_COUNT
	FROM Fundlevel_dataset_truncated
	GROUP BY YEAR, MONTH;
QUIT;
	
%PROC_SUMMARY_OVERALL(INPUT_FILE=DATA_123, CLASS_VARS=YEAR, VARIABLES=FUNDID_COUNT, OUTPUT_FILE=DATA_090, STATS_OPS=MEAN, CALCULATED_VAR=FUND_AVERAGE);

/* KIWISAVER */
PROC SQL;
	CREATE TABLE DATA_456 AS
	SELECT DISTINCT YEAR, MONTH, COUNT(*) AS FUNDID_COUNT
	FROM Fundlevel_dataset_truncated
	WHERE BINARYVAR IN (1,2)
	GROUP BY YEAR, MONTH;
QUIT;
	
%PROC_SUMMARY_OVERALL(INPUT_FILE=DATA_456, CLASS_VARS=YEAR, VARIABLES=FUNDID_COUNT, OUTPUT_FILE=DATA_093, STATS_OPS=MEAN, CALCULATED_VAR=FUND_AVERAGE);


/* OPEN END */
PROC SQL;
	CREATE TABLE DATA_678 AS
	SELECT DISTINCT YEAR, MONTH, COUNT(*) AS FUNDID_COUNT
	FROM Fundlevel_dataset_truncated
	WHERE BINARYVAR=3
	GROUP BY YEAR, MONTH;
QUIT;
	
%PROC_SUMMARY_OVERALL(INPUT_FILE=DATA_678, CLASS_VARS=YEAR, VARIABLES=FUNDID_COUNT, OUTPUT_FILE=DATA_096, STATS_OPS=MEAN, CALCULATED_VAR=FUND_AVERAGE);


/* INACTIVE FUND */
PROC SQL;
	CREATE TABLE DATA_669 AS
	SELECT DISTINCT FUNDID, Liq_month, Liq_year
	FROM Fundlevel_dataset_truncated;
QUIT;

/* DATA LIQ_1;
	SET File_set.Liquidated_info;
	WHERE NOT MISSING(Liq_month) AND NOT MISSING(Liq_year)
		  AND (Liq_year > 2007 AND Liq_year < 2022) OR 
        	  (Liq_year = 2008 AND Liq_month >= 5) OR 
              (Liq_year = 2022 AND Liq_month <= 12); ;
RUN; */

PROC SQL;
	CREATE TABLE DATA_99 AS
	SELECT DISTINCT Liq_month, Liq_year, COUNT(*) AS FUNDID_COUNT
	FROM DATA_669
	GROUP BY Liq_month, Liq_year;
QUIT;

%PROC_SUMMARY_OVERALL(INPUT_FILE=DATA_99, CLASS_VARS=Liq_year, VARIABLES=FUNDID_COUNT, OUTPUT_FILE=DATA_093, STATS_OPS=MEAN, CALCULATED_VAR=INACTIVE_FUND_AVERAGE);

/* KIWISAVER INACTIVE AFUNDS */
%MERGE_CODE_1(INPUT_FILE_1=LIQ_1, INPUT_FILE_2=File_set.Binaryfile, SORT_VARS=FUNDID, OUTPUT_FILE=DATA_KS_INACTIVE);

/* DATA LIQ_1;
	SET DATA_KS_INACTIVE;
	WHERE BINARYVAR = 3 AND NOT MISSING(Liq_month) AND NOT MISSING(Liq_year)
		  AND (Liq_year > 2007 AND Liq_year < 2022) OR 
        	  (Liq_year = 2007 AND Liq_month >= 7) OR 
              (Liq_year = 2022 AND Liq_month <= 12); ;
RUN; */


PROC SQL;
	CREATE TABLE DATA_669 AS
	SELECT DISTINCT FUNDID, Liq_month, Liq_year
	FROM Fundlevel_dataset_truncated
	where BINARYVAR IN (1, 2);
QUIT;


PROC SQL;
	CREATE TABLE DATA_99 AS
	SELECT DISTINCT Liq_month, Liq_year, COUNT(*) AS FUNDID_COUNT
	FROM DATA_669
	GROUP BY Liq_month, Liq_year;
QUIT;

%PROC_SUMMARY_OVERALL(INPUT_FILE=DATA_99, CLASS_VARS=Liq_year, VARIABLES=FUNDID_COUNT, OUTPUT_FILE=DATA_093, STATS_OPS=MEAN, CALCULATED_VAR=INACTIVE_FUND_AVERAGE);



/* NON KIWISAVER FUNDS */

PROC SQL;
	CREATE TABLE DATA_669 AS
	SELECT DISTINCT FUNDID, Liq_month, Liq_year
	FROM Fundlevel_dataset_truncated
	where BINARYVAR = 3;
QUIT;


PROC SQL;
	CREATE TABLE DATA_99 AS
	SELECT DISTINCT Liq_month, Liq_year, COUNT(*) AS FUNDID_COUNT
	FROM DATA_669
	GROUP BY Liq_month, Liq_year;
QUIT;

%PROC_SUMMARY_OVERALL(INPUT_FILE=DATA_99, CLASS_VARS=Liq_year, VARIABLES=FUNDID_COUNT, OUTPUT_FILE=DATA_093, STATS_OPS=MEAN, CALCULATED_VAR=INACTIVE_FUND_AVERAGE);


/* *********************___________________ FETCHING FAMILY NAMES OF FUND ____________________********************* */
	PROC SQL;
		CREATE TABLE LINK_FILE_1 AS
		SELECT DISTINCT FundID, Firm_Name
		FROM Fundlevel_dataset_truncated;
	QUIT;

	/* BREAKING DOWN THE NAME STRING INTO THREE PARTS TO BE ABLE TO PICK UP THE COMMON WORDS */
	DATA LINK_FILE_2;
		SET LINK_FILE_1;
		LENGTH FIRST_WORD $200 SECOND_WORD $200 THIRD_WORD $200 ;	/*INITIALIZING TWO STRING VARIABLES WITH DEFINED VARIABLES*/
		FIRST_WORD = "";			/*INITIALIZING THE MAIN RESULT STRING*/
		SECOND_WORD = "";
		THIRD_WORD = "";
		FIRST_WORD = COMPRESS(UPCASE(SCAN(Firm_Name, 1, ' ')), '.,-:');
		SECOND_WORD = COMPRESS(UPCASE(SCAN(Firm_Name, 2, ' ')), '.,-:');
		THIRD_WORD = COMPRESS(UPCASE(SCAN(Firm_Name, 3, ' ' )), '.,-:');
	RUN;

	/* IF SECID IS SAME AND FIRST WORD AND SECOND WORD IS SAME, THEN PICK UP THOSE DISTINCT VALUES IN A DATASET */
	/* DROP NAME COLUMN SO THAT UNIQUE SEARCH CAN BE RAN IN THAT */

	PROC SQL;
		CREATE TABLE LINK_FILE_3 AS
		SELECT DISTINCT FundID, FIRST_WORD, SECOND_WORD, THIRD_WORD
		FROM LINK_FILE_2;
	QUIT;

	PROC SORT DATA = LINK_FILE_3; BY FundID; RUN;

	DATA LINK_FILE_4;
		SET LINK_FILE_3;
		BY FundID;

		RETAIN COMBINED_NAME_1 COMBINED_NAME_2 COMBINED_NAME_3;
		LENGTH COMBINED_NAME_1 $200 COMBINED_NAME_2 $200 COMBINED_NAME_3 $200;

		IF FIRST.FundID THEN DO;
			COMBINED_NAME_1 = FIRST_WORD;
			COMBINED_NAME_2 = SECOND_WORD;
			COMBINED_NAME_3 = THIRD_WORD;
		END;
		ELSE DO;
			COMBINED_NAME_1 = CATX(' OR ', COMBINED_NAME_1, FIRST_WORD);
			COMBINED_NAME_2 = CATX(' OR ', COMBINED_NAME_2, SECOND_WORD);
			COMBINED_NAME_3 = CATX(' OR ', COMBINED_NAME_3, THIRD_WORD);
		END;
		IF LAST.FundID THEN OUTPUT;
		DROP FIRST_WORD SECOND_WORD THIRD_WORD;
	RUN;

/* COUNTING FIRM NAME AND FUNDS IN THE DATASET */
	PROC SQL;
		CREATE TABLE DATA_12 AS
		SELECT DISTINCT COMBINED_NAME_1, COMBINED_NAME_2, COUNT(*) AS FIRM_NAME_COUNT
		FROM LINK_FILE_4
		GROUP BY COMBINED_NAME_1, COMBINED_NAME_2;
	RUN;

	proc sql;
		select distinct Firm_Name, count(*) as category_count
		from Fundlevel_dataset_truncated
		group by Firm_Name;
	quit;

/* MERGING FIRM NAME COMBINED 1 AND 2 WITH FUNDLEVEL DATASET */
%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\Firm_name_flag.CSV', 
			   OUTPUT_FILE=FILE_SET.Firm_name_flag);

PROC SORT DATA = Fundlevel_dataset_truncated; BY FIRM_NAME; RUN;
PROC SORT DATA = FILE_SET.Firm_name_flag; BY FIRM_NAME; RUN;
	
DATA Fundlevel_dataset_truncated;
	MERGE Fundlevel_dataset_truncated(IN=A) FILE_SET.Firm_name_flag(IN=B);
	BY FIRM_NAME;
	IF A;
RUN;

/* FINDING CASH HOLDINGS IN THE DATA */
DATA SET_1;
	SET NZD_DATASET_FINAL;
	IF FIND(Name, "cash", 'I') > 0 THEN OUTPUT;
	KEEP FUNDID NAME YEAR MONTH Percentholdings RICCODE;
RUN;

DATA SET_1;
	SET SET_1;
	IF RICCODE NE "" THEN DELETE;
RUN;

PROC SORT DATA = SET_1; BY FUNDID YEAR MONTH; RUN;
PROC SUMMARY DATA = SET_1 NWAY MISSING;
	CLASS FUNDID YEAR MONTH;
	VAR Percentholdings;
	OUTPUT OUT = FILE_1 SUM(Percentholdings)=CASH_HOLDINGS;
RUN;

%MERGE_CODE_1(INPUT_FILE_1= FILE_1, INPUT_FILE_2=EPU_MEDIAN, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_3);

PROC MEANS DATA = FILE_3 MEAN MEDIAN N;
 	WHERE EPU_HIGH = 1;
	VAR CASH_HOLDINGS;
RUN;

PROC MEANS DATA = FILE_3 MEAN MEDIAN N;
	WHERE EPU_HIGH = 0;
	VAR CASH_HOLDINGS;
RUN;

PROC MEANS DATA = FILE_1 MEAN MEDIAN N;
	VAR CASH_HOLDINGS;
RUN;

PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY YEAR MONTH; RUN;
PROC CORR DATA = FUNDLEVEL_DATASET_TRUNCATED;
	BY YEAR;
	VAR Netassets_NZD  Fundreturns_NZD1 capm_alpha ch4_alpha ROLLING_VOLATILITY_NZD FLOW_PERCENT_WIN_NZD market_beta momentum_beta V_RISK IDIO_4FF 
		VW_ESG_RETURNS SUM_ESG_CAPITAL_NZD NZD_ESG_WT_OF_FUND ESG_TILT_EXCLUSIVE_NZD RATIO_ESG_TO_TOT_HOLDINGS_NZD ESG_FLOW_PERCENT_WIN_NZD ESG_SCORE_AVG ESG_CONTRO_AVG ;
RUN;

DATA SET_2;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	RET_HOLDINGS_RATIO = TOTALHOLDINGS_EQUITY_NZD/Fundreturns_NZD1;
RUN;


/* *************************************__________________________ NEW TABLES __________________________*****************************************  */
/* CREATING TEMP DATASET */
DATA NZD_DATASET_FINAL;
	SET File_set.Nzd_dataset_final_stkret_win;;
RUN;

DATA PICKING_FILE_MED_ESG_STKRET;
	SET FUND_SET.PICKING_FILE_MED_ESG_STKRET;
RUN;

DATA Picking_file_stkret_win;
	SET Fund_set.Picking_file_stkret_win;
RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_dataset_stkret_win;
RUN;

/* ******______ NEW TABLE - TABLE A - TIMING VARIABLE ______***** */
/* STEP 1 : FINDIND ESG STOCKS TIMING AND NON ESG STOCKS TIMING IN THE DATASET */
%PROC_SUMMARY_ESG1(INPUT_FILE=Picking_file_stkret_win, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=TIMING_PER_STOCK_MED, OUTPUT_FILE=FILE_1, STATS_OPS=SUM, CALCULATED_VAR=SUM_ESG_TIMING_TBL_A);

PROC SUMMARY DATA=Picking_file_stkret_win NWAY MISSING;
	WHERE ESG=0;
	CLASS FUNDID YEAR MONTH;
	OUTPUT OUT = FILE_2 SUM(TIMING_PER_STOCK_MED)=SUM_NON_ESG_TIMING_TBL_A;
RUN;

PROC SORT DATA = FILE_1; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FILE_2; BY FUNDID YEAR MONTH; RUN;

DATA FILE_3;
	MERGE FILE_1(IN=A) FILE_2(IN=B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_;
RUN;

/* MERGING ABOVE FILES AND REMOVING EXTRA COLUMNS */
PROC SORT DATA = FILE_3; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE FUNDLEVEL_DATASET_TRUNCATED(IN=A) FILE_3(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
	DROP _TYPE_ _FREQ_;
	ESG_MINUS_NON_ESG_T = SUM_ESG_TIMING_TBL_A - SUM_NON_ESG_TIMING_TBL_A;
RUN;

/* WINSORIZING THE ABOVE VALUES */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY YEAR; RUN;
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED P1 P99 N NOPRINT;
	BY YEAR;
	VAR SUM_ESG_TIMING_TBL_A SUM_NON_ESG_TIMING_TBL_A ESG_MINUS_NON_ESG_T;
	OUTPUT OUT = DATA_12(DROP=_TYPE_ _FREQ_) P1=  SUM_ESG_TIMING_TBL_A_P1	SUM_NON_ESG_TIMING_TBL_A_P1		ESG_MINUS_NON_ESG_T_P1
						 					 P99= SUM_ESG_TIMING_TBL_A_P99 	SUM_NON_ESG_TIMING_TBL_A_P99	ESG_MINUS_NON_ESG_T_P99;
RUN;

/* STEP 7: MERGING WINSORIZED VALUES WITH DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_12, SORT_VARS=YEAR, OUTPUT_FILE=FUND_DATA_WIN);


DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUND_DATA_WIN;

	IF SUM_ESG_TIMING_TBL_A < SUM_ESG_TIMING_TBL_A_P1  AND SUM_ESG_TIMING_TBL_A NE . THEN SUM_ESG_TIMING_TBL_A_WIN = SUM_ESG_TIMING_TBL_A_P1;
	IF SUM_ESG_TIMING_TBL_A > SUM_ESG_TIMING_TBL_A_P99 AND SUM_ESG_TIMING_TBL_A NE . THEN SUM_ESG_TIMING_TBL_A_WIN = SUM_ESG_TIMING_TBL_A_P99;
	IF SUM_ESG_TIMING_TBL_A_WIN = . THEN SUM_ESG_TIMING_TBL_A_WIN = SUM_ESG_TIMING_TBL_A;

	IF SUM_NON_ESG_TIMING_TBL_A < SUM_NON_ESG_TIMING_TBL_A_P1  AND SUM_NON_ESG_TIMING_TBL_A NE . THEN SUM_NON_ESG_TIMING_TBL_A_WIN = SUM_NON_ESG_TIMING_TBL_A_P1;
	IF SUM_NON_ESG_TIMING_TBL_A > SUM_NON_ESG_TIMING_TBL_A_P99 AND SUM_NON_ESG_TIMING_TBL_A NE . THEN SUM_NON_ESG_TIMING_TBL_A_WIN = SUM_NON_ESG_TIMING_TBL_A_P99;
	IF SUM_NON_ESG_TIMING_TBL_A_WIN = . THEN SUM_NON_ESG_TIMING_TBL_A_WIN = SUM_NON_ESG_TIMING_TBL_A;

	IF ESG_MINUS_NON_ESG_T < ESG_MINUS_NON_ESG_T_P1  AND ESG_MINUS_NON_ESG_T NE . THEN ESG_MINUS_NON_ESG_T_WIN = ESG_MINUS_NON_ESG_T_P1;
	IF ESG_MINUS_NON_ESG_T > ESG_MINUS_NON_ESG_T_P99 AND ESG_MINUS_NON_ESG_T NE . THEN ESG_MINUS_NON_ESG_T_WIN = ESG_MINUS_NON_ESG_T_P99;
	IF ESG_MINUS_NON_ESG_T_WIN = . THEN ESG_MINUS_NON_ESG_T_WIN = ESG_MINUS_NON_ESG_T;

	DROP SUM_ESG_TIMING_TBL_A_P1	SUM_NON_ESG_TIMING_TBL_A_P1		ESG_MINUS_NON_ESG_T_P1	SUM_ESG_TIMING_TBL_A_P99 	SUM_NON_ESG_TIMING_TBL_A_P99	ESG_MINUS_NON_ESG_T_P99 	_TYPE_	_FREQ_;
RUN;

/* AVG WEIGHT CALCULATIONS TIMING */
PROC MEANS DATA=FUNDLEVEL_DATASET_TRUNCATED MEAN N;
	VAR SUM_ESG_TIMING_TBL_A_WIN	SUM_NON_ESG_TIMING_TBL_A_WIN	ESG_MINUS_NON_ESG_T_WIN;
RUN;

/* TTEST FOR FUND LEVEL STATA */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	VAR ESG_MINUS_NON_ESG_T_WIN;
RUN;

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/


/* ******______ NEW TABLE - TABLE A - PICKING VARIABLE______***** */
%PROC_SUMMARY_ESG1(INPUT_FILE=Picking_file_stkret_win, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=PICKING_PER_STOCK_MED, OUTPUT_FILE=FILE_5, STATS_OPS=SUM, CALCULATED_VAR=SUM_ESG_PICKING_TBL_A);

PROC SUMMARY DATA=Picking_file_stkret_win NWAY MISSING;
	WHERE ESG=0;
	CLASS FUNDID YEAR MONTH;
	OUTPUT OUT = FILE_6 SUM(PICKING_PER_STOCK_MED)=SUM_NON_ESG_PICKING_TBL_A;
RUN;

PROC SORT DATA = FILE_5; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FILE_6; BY FUNDID YEAR MONTH; RUN;

DATA FILE_7;
	MERGE FILE_5(IN=A) FILE_6(IN=B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_;
RUN;

/* MERGING ABOVE FILES AND REMOVING EXTRA COLUMNS */
PROC SORT DATA = FILE_7; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE FUNDLEVEL_DATASET_TRUNCATED(IN=A) FILE_7(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
	ESG_MINUS_NON_ESG_P = SUM_ESG_PICKING_TBL_A - SUM_NON_ESG_PICKING_TBL_A;
RUN;

/* WINSORIZING THE ABOVE VALUES */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY YEAR; RUN;
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED P1 P99 N NOPRINT;
	BY YEAR;
	VAR SUM_ESG_PICKING_TBL_A 	SUM_NON_ESG_PICKING_TBL_A 	ESG_MINUS_NON_ESG_P;
	OUTPUT OUT = DATA_15(DROP=_TYPE_ _FREQ_) P1=  SUM_ESG_PICKING_TBL_A_P1	    SUM_NON_ESG_PICKING_TBL_A_P1	ESG_MINUS_NON_ESG_P_P1
						 					 P99= SUM_ESG_PICKING_TBL_A_P99 	SUM_NON_ESG_PICKING_TBL_A_P99	ESG_MINUS_NON_ESG_P_P99;
RUN;

/* STEP 7: MERGING WINSORIZED VALUES WITH DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_15, SORT_VARS=YEAR, OUTPUT_FILE=FUND_DATA_WIN_2);


DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUND_DATA_WIN_2;

	IF SUM_ESG_PICKING_TBL_A < SUM_ESG_PICKING_TBL_A_P1  AND SUM_ESG_PICKING_TBL_A NE . THEN SUM_ESG_PICKING_TBL_A_WIN = SUM_ESG_PICKING_TBL_A_P1;
	IF SUM_ESG_PICKING_TBL_A > SUM_ESG_PICKING_TBL_A_P99 AND SUM_ESG_PICKING_TBL_A NE . THEN SUM_ESG_PICKING_TBL_A_WIN = SUM_ESG_PICKING_TBL_A_P99;
	IF SUM_ESG_PICKING_TBL_A_WIN = . THEN SUM_ESG_PICKING_TBL_A_WIN = SUM_ESG_PICKING_TBL_A;

	IF SUM_NON_ESG_PICKING_TBL_A < SUM_NON_ESG_PICKING_TBL_A_P1  AND SUM_NON_ESG_PICKING_TBL_A NE . THEN SUM_NON_ESG_PICKING_TBL_A_WIN = SUM_NON_ESG_PICKING_TBL_A_P1;
	IF SUM_NON_ESG_PICKING_TBL_A > SUM_NON_ESG_PICKING_TBL_A_P99 AND SUM_NON_ESG_PICKING_TBL_A NE . THEN SUM_NON_ESG_PICKING_TBL_A_WIN = SUM_NON_ESG_PICKING_TBL_A_P99;
	IF SUM_NON_ESG_PICKING_TBL_A_WIN = . THEN SUM_NON_ESG_PICKING_TBL_A_WIN = SUM_NON_ESG_PICKING_TBL_A;

	IF ESG_MINUS_NON_ESG_P < ESG_MINUS_NON_ESG_P_P1  AND ESG_MINUS_NON_ESG_P NE . THEN ESG_MINUS_NON_ESG_P_WIN = ESG_MINUS_NON_ESG_P_P1;
	IF ESG_MINUS_NON_ESG_P > ESG_MINUS_NON_ESG_P_P99 AND ESG_MINUS_NON_ESG_P NE . THEN ESG_MINUS_NON_ESG_P_WIN = ESG_MINUS_NON_ESG_P_P99;
	IF ESG_MINUS_NON_ESG_P_WIN = . THEN ESG_MINUS_NON_ESG_P_WIN = ESG_MINUS_NON_ESG_P;

	DROP SUM_ESG_PICKING_TBL_A_P1	    SUM_NON_ESG_PICKING_TBL_A_P1	ESG_MINUS_NON_ESG_P_P1	SUM_ESG_PICKING_TBL_A_P99 	SUM_NON_ESG_PICKING_TBL_A_P99	ESG_MINUS_NON_ESG_P_P99		_TYPE_ _FREQ_;
RUN;

/* AVG WEIGHT CALCULATIONS TIMING */
PROC MEANS DATA=FUNDLEVEL_DATASET_TRUNCATED MEAN N;
	VAR SUM_ESG_PICKING_TBL_A_WIN	SUM_NON_ESG_PICKING_TBL_A_WIN	ESG_MINUS_NON_ESG_P_WIN;
RUN;

/* TTEST FOR FUND LEVEL STATA */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	VAR ESG_MINUS_NON_ESG_P_WIN;
RUN;

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/


/* ************************______ NEW TABLE - TABLE B - TIMING ______************************** */
PROC SORT DATA = File_set.Fundlevel_dataset_stkret_win	OUT = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;
/* STEP 1: CREATING FLAG FOR ESGSCORE GE 75 */
DATA PICKING_1;
	SET PICKING_FILE_MED_ESG_STKRET;
	IF ESGSCORE >= 75 THEN FLAG_ESGGE=1;
	ELSE FLAG_ESGGE=0;
RUN;

/* STEP 2: CALCULATING SUM TIMING FOR ESG GREATER THAN 75 SCORE STOCKS */
PROC SUMMARY DATA=PICKING_1 NWAY MISSING;
	WHERE FLAG_ESGGE=1;
	CLASS FUNDID YEAR MONTH;
	OUTPUT OUT = FILE_9 SUM(TIMING_PER_STOCK_MED_ESG)=SUM_ESGGE75_TIMING_TBL_B;
RUN;

/* STEP 3: CALCULATING SUM TIMING FOR ESG GREATER THAN 75 SCORE STOCKS */
PROC SUMMARY DATA=PICKING_1 NWAY MISSING;
	WHERE FLAG_ESGGE=0;
	CLASS FUNDID YEAR MONTH;
	OUTPUT OUT = FILE_10 SUM(TIMING_PER_STOCK_MED_ESG)=SUM_ESGOTHR_TIMING_TBL_B;
RUN;

/* STEP 4: MERGING BOTH THE FILES */
PROC SORT DATA = FILE_9; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FILE_10; BY FUNDID YEAR MONTH; RUN;

DATA FILE_11;
	MERGE FILE_9(IN=A) FILE_10(IN=B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_;
RUN;

/* STEP 5: MERGING ABOVE FILES WITH FUNDLEVEL DATASET AND CREATING DIFFERENCE VARIABLES */
PROC SORT DATA = FILE_11; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE FUNDLEVEL_DATASET_TRUNCATED(IN=A) FILE_11(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
	ESGGE75_MINUS_OTHR_T = SUM_ESGGE75_TIMING_TBL_B - SUM_ESGOTHR_TIMING_TBL_B;
RUN;

/* STEP 6: WINSORIZING THE ABOVE VALUES */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY YEAR; RUN;
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED P1 P99 N NOPRINT;
	BY YEAR;
	VAR SUM_ESGGE75_TIMING_TBL_B 	SUM_ESGOTHR_TIMING_TBL_B 	ESGGE75_MINUS_OTHR_T;
	OUTPUT OUT = DATA_18(DROP=_TYPE_ _FREQ_) P1=  SUM_ESGGE75_TIMING_TBL_B_P1	SUM_ESGOTHR_TIMING_TBL_B_P1 	ESGGE75_MINUS_OTHR_T_P1
						 					 P99= SUM_ESGGE75_TIMING_TBL_B_P99 	SUM_ESGOTHR_TIMING_TBL_B_P99	ESGGE75_MINUS_OTHR_T_P99;
RUN;

/* STEP 7: MERGING WINSORIZED VALUES WITH DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_18, SORT_VARS=YEAR, OUTPUT_FILE=FUND_DATA_WIN_3);

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUND_DATA_WIN_3;

	IF SUM_ESGGE75_TIMING_TBL_B < SUM_ESGGE75_TIMING_TBL_B_P1  AND SUM_ESGGE75_TIMING_TBL_B NE . THEN SUM_ESGGE75_TIMING_TBL_B_WIN = SUM_ESGGE75_TIMING_TBL_B_P1;
	IF SUM_ESGGE75_TIMING_TBL_B > SUM_ESGGE75_TIMING_TBL_B_P99 AND SUM_ESGGE75_TIMING_TBL_B NE . THEN SUM_ESGGE75_TIMING_TBL_B_WIN = SUM_ESGGE75_TIMING_TBL_B_P99;
	IF SUM_ESGGE75_TIMING_TBL_B_WIN = . THEN SUM_ESGGE75_TIMING_TBL_B_WIN = SUM_ESGGE75_TIMING_TBL_B;

	IF SUM_ESGOTHR_TIMING_TBL_B < SUM_ESGOTHR_TIMING_TBL_B_P1  AND SUM_ESGOTHR_TIMING_TBL_B NE . THEN SUM_ESGOTHR_TIMING_TBL_B_WIN = SUM_ESGOTHR_TIMING_TBL_B_P1;
	IF SUM_ESGOTHR_TIMING_TBL_B > SUM_ESGOTHR_TIMING_TBL_B_P99 AND SUM_ESGOTHR_TIMING_TBL_B NE . THEN SUM_ESGOTHR_TIMING_TBL_B_WIN = SUM_ESGOTHR_TIMING_TBL_B_P99;
	IF SUM_ESGOTHR_TIMING_TBL_B_WIN = . THEN SUM_ESGOTHR_TIMING_TBL_B_WIN = SUM_ESGOTHR_TIMING_TBL_B;

	IF ESGGE75_MINUS_OTHR_T < ESGGE75_MINUS_OTHR_T_P1  AND ESGGE75_MINUS_OTHR_T NE . THEN ESGGE75_MINUS_OTHR_T_WIN = ESGGE75_MINUS_OTHR_T_P1;
	IF ESGGE75_MINUS_OTHR_T > ESGGE75_MINUS_OTHR_T_P99 AND ESGGE75_MINUS_OTHR_T NE . THEN ESGGE75_MINUS_OTHR_T_WIN = ESGGE75_MINUS_OTHR_T_P99;
	IF ESGGE75_MINUS_OTHR_T_WIN = . THEN ESGGE75_MINUS_OTHR_T_WIN = ESGGE75_MINUS_OTHR_T;

	DROP SUM_ESGGE75_TIMING_TBL_B_P1	SUM_ESGOTHR_TIMING_TBL_B_P1 	ESGGE75_MINUS_OTHR_T_P1 	SUM_ESGGE75_TIMING_TBL_B_P99 	SUM_ESGOTHR_TIMING_TBL_B_P99	ESGGE75_MINUS_OTHR_T_P99	_TYPE_ _FREQ_;
RUN;

/* STEP 8: MEAN CALCULATIONS 
/*AVG WEIGHT CALCULATIONS TIMING */
PROC MEANS DATA=FUNDLEVEL_DATASET_TRUNCATED MEAN N;
	VAR SUM_ESGGE75_TIMING_TBL_B_WIN	SUM_ESGOTHR_TIMING_TBL_B_WIN	ESGGE75_MINUS_OTHR_T_WIN;
RUN;

/* TTEST FOR FUND LEVEL STATA */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	VAR ESGGE75_MINUS_OTHR_T_WIN;
RUN;

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/


/* ************************______ NEW TABLE - TABLE B - PICKING ______************************** */
PROC SORT DATA = File_set.Fundlevel_dataset_stkret_win	OUT = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

/* STEP 1 IS SAME AS TIMING CALCULATIONS - CREATING FLAGS */

/* STEP 2: CALCULATING SUM TIMING FOR ESG GREATER THAN 75 SCORE STOCKS */
PROC SUMMARY DATA=PICKING_1 NWAY MISSING;
	WHERE FLAG_ESGGE=1;
	CLASS FUNDID YEAR MONTH;
	OUTPUT OUT = FILE_12 SUM(PICKING_PER_STOCK_MED_ESG)=SUM_ESGGE75_PICKING_TBL_B;
RUN;

/* STEP 3: CALCULATING SUM TIMING FOR ESG GREATER THAN 75 SCORE STOCKS */
PROC SUMMARY DATA=PICKING_1 NWAY MISSING;
	WHERE FLAG_ESGGE=0;
	CLASS FUNDID YEAR MONTH;
	OUTPUT OUT = FILE_13 SUM(PICKING_PER_STOCK_MED_ESG)=SUM_ESGOTHR_PICKING_TBL_B;
RUN;

/* STEP 4: MERGING BOTH THE FILES */
PROC SORT DATA = FILE_12; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FILE_13; BY FUNDID YEAR MONTH; RUN;

DATA FILE_14;
	MERGE FILE_12(IN=A) FILE_13(IN=B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_;
RUN;

/* STEP 5: MERGING ABOVE FILES WITH FUNDLEVEL DATASET AND CREATING DIFFERENCE VARIABLES */
PROC SORT DATA = FILE_14; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE FUNDLEVEL_DATASET_TRUNCATED(IN=A) FILE_14(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
	ESGGE75_MINUS_OTHR_P = SUM_ESGGE75_PICKING_TBL_B - SUM_ESGOTHR_PICKING_TBL_B;
RUN;

/* STEP 6: WINSORIZING THE ABOVE VALUES */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY YEAR; RUN;
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED P1 P99 N NOPRINT;
	BY YEAR;
	VAR SUM_ESGGE75_PICKING_TBL_B 	SUM_ESGOTHR_PICKING_TBL_B 	ESGGE75_MINUS_OTHR_P;
	OUTPUT OUT = DATA_21(DROP=_TYPE_ _FREQ_) P1=  SUM_ESGGE75_PICKING_TBL_B_P1		SUM_ESGOTHR_PICKING_TBL_B_P1 	ESGGE75_MINUS_OTHR_P_P1
						 					 P99= SUM_ESGGE75_PICKING_TBL_B_P99 	SUM_ESGOTHR_PICKING_TBL_B_P99	ESGGE75_MINUS_OTHR_P_P99;
RUN;

/* STEP 7: MERGING WINSORIZED VALUES WITH DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_21, SORT_VARS=YEAR, OUTPUT_FILE=FUND_DATA_WIN_4);

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUND_DATA_WIN_4;

	IF SUM_ESGGE75_PICKING_TBL_B < SUM_ESGGE75_PICKING_TBL_B_P1  AND SUM_ESGGE75_PICKING_TBL_B NE . THEN SUM_ESGGE75_PICKING_TBL_B_WIN = SUM_ESGGE75_PICKING_TBL_B_P1;
	IF SUM_ESGGE75_PICKING_TBL_B > SUM_ESGGE75_PICKING_TBL_B_P99 AND SUM_ESGGE75_PICKING_TBL_B NE . THEN SUM_ESGGE75_PICKING_TBL_B_WIN = SUM_ESGGE75_PICKING_TBL_B_P99;
	IF SUM_ESGGE75_PICKING_TBL_B_WIN = . THEN SUM_ESGGE75_PICKING_TBL_B_WIN = SUM_ESGGE75_PICKING_TBL_B;

	IF SUM_ESGOTHR_PICKING_TBL_B < SUM_ESGOTHR_PICKING_TBL_B_P1  AND SUM_ESGOTHR_PICKING_TBL_B NE . THEN SUM_ESGOTHR_PICKING_TBL_B_WIN = SUM_ESGOTHR_PICKING_TBL_B_P1;
	IF SUM_ESGOTHR_PICKING_TBL_B > SUM_ESGOTHR_PICKING_TBL_B_P99 AND SUM_ESGOTHR_PICKING_TBL_B  NE . THEN SUM_ESGOTHR_PICKING_TBL_B_WIN = SUM_ESGOTHR_PICKING_TBL_B_P99;
	IF SUM_ESGOTHR_PICKING_TBL_B_WIN = . THEN SUM_ESGOTHR_PICKING_TBL_B_WIN = SUM_ESGOTHR_PICKING_TBL_B;

	IF ESGGE75_MINUS_OTHR_P < ESGGE75_MINUS_OTHR_P_P1  AND ESGGE75_MINUS_OTHR_P NE . THEN ESGGE75_MINUS_OTHR_P_WIN = ESGGE75_MINUS_OTHR_P_P1;
	IF ESGGE75_MINUS_OTHR_P > ESGGE75_MINUS_OTHR_P_P99 AND ESGGE75_MINUS_OTHR_P NE . THEN ESGGE75_MINUS_OTHR_P_WIN = ESGGE75_MINUS_OTHR_P_P99;
	IF ESGGE75_MINUS_OTHR_P_WIN = . THEN ESGGE75_MINUS_OTHR_P_WIN = ESGGE75_MINUS_OTHR_P;

	DROP SUM_ESGGE75_PICKING_TBL_B_P1		SUM_ESGOTHR_PICKING_TBL_B_P1 	ESGGE75_MINUS_OTHR_P_P1		SUM_ESGGE75_PICKING_TBL_B_P99 	SUM_ESGOTHR_PICKING_TBL_B_P99	ESGGE75_MINUS_OTHR_P_P99	_TYPE_ _FREQ_;
RUN;

/* STEP 8: MEAN CALCULATIONS 
/*AVG WEIGHT CALCULATIONS TIMING */
PROC MEANS DATA=FUNDLEVEL_DATASET_TRUNCATED MEAN N;
	VAR SUM_ESGGE75_PICKING_TBL_B_WIN	SUM_ESGOTHR_PICKING_TBL_B_WIN	ESGGE75_MINUS_OTHR_P_WIN;
RUN;

/* TTEST FOR FUND LEVEL STATA */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	VAR ESGGE75_MINUS_OTHR_P_WIN;
RUN;

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/


/* *********________ NEW TABLE -  TABLE C - TIMING _________********* */

/* *************______________ EPU_HIGH=1 ______________***************** */
/* CALCULATING MEANS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 1;
	VAR SUM_ESG_TIMING_TBL_A_WIN	SUM_NON_ESG_TIMING_TBL_A_WIN	ESG_MINUS_NON_ESG_T_WIN;
RUN;

/* TTEST */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 1;
	VAR ESG_MINUS_NON_ESG_T_WIN;
RUN;

/* *************______________ EPU_HIGH=0 ______________***************** */
/* CALCULATING MEANS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 0;
	VAR SUM_ESG_TIMING_TBL_A_WIN	SUM_NON_ESG_TIMING_TBL_A_WIN	ESG_MINUS_NON_ESG_T_WIN;
RUN;

/* TTEST */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 0;
	VAR ESG_MINUS_NON_ESG_T_WIN;
RUN;



/* *********________ NEW TABLE -  TABLE C - PICKING _________********* */
/* CALCULATING MEAN FOR VARIABLES OF TABLE C */
/* *************______________ EPU_HIGH=1 ______________***************** */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 1;
	VAR SUM_ESG_PICKING_TBL_A_WIN	SUM_NON_ESG_PICKING_TBL_A_WIN	ESG_MINUS_NON_ESG_P_WIN;
RUN;

/* TTEST FOR FUND LEVEL STATA */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 1;
	VAR ESG_MINUS_NON_ESG_P_WIN;
RUN;

/* *************______________ EPU_HIGH=0 ______________***************** */
/* CALCULATING MEANS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 0;
	VAR SUM_ESG_PICKING_TBL_A_WIN	SUM_NON_ESG_PICKING_TBL_A_WIN	ESG_MINUS_NON_ESG_P_WIN;
RUN;

/* TTEST */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 0;
	VAR ESG_MINUS_NON_ESG_P_WIN;
RUN;


/* *********________ NEW TABLE -  TABLE D - TIMING - ESGGE75 VARS_________********* */
/* *************______________ EPU_HIGH=1 ______________***************** */ 
/* CALCULATING MEANS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 1;
	VAR SUM_ESGGE75_TIMING_TBL_B_WIN	SUM_ESGOTHR_TIMING_TBL_B_WIN	ESGGE75_MINUS_OTHR_T_WIN;
RUN;

/* TTEST */	
PROC TTEST DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 1;
	VAR ESGGE75_MINUS_OTHR_T_WIN;
RUN;

/* *************______________ EPU_HIGH=0 ______________***************** */
/* CALCULATING MEANS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 0;
	VAR SUM_ESGGE75_TIMING_TBL_B_WIN	SUM_ESGOTHR_TIMING_TBL_B_WIN	ESGGE75_MINUS_OTHR_T_WIN;
RUN;

/* TTEST */
PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 0;
	VAR ESGGE75_MINUS_OTHR_T_WIN;
RUN;


/* *********________ NEW TABLE -  TABLE D - PICKING - ESGGE75 vars_________********* */
/* *************______________ EPU_HIGH=1 ______________***************** */ 
/* CALCULATING MEANS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 1;
	VAR SUM_ESGGE75_PICKING_TBL_B_WIN	SUM_ESGOTHR_PICKING_TBL_B_WIN	ESGGE75_MINUS_OTHR_P_WIN;
RUN;

/* TTEST */	
PROC TTEST DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 1;
	VAR ESGGE75_MINUS_OTHR_P_WIN;
RUN;


/* *************______________ EPU_HIGH=0 ______________***************** */ 
/* CALCULATING MEANS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 0;
	VAR SUM_ESGGE75_PICKING_TBL_B_WIN	SUM_ESGOTHR_PICKING_TBL_B_WIN	ESGGE75_MINUS_OTHR_P_WIN;
RUN;

/* TTEST */	
PROC TTEST DATA = FUNDLEVEL_DATASET_TRUNCATED;
	WHERE EPU_HIGH = 0;
	VAR ESGGE75_MINUS_OTHR_P_WIN;
RUN;


/* ********************__________________ CALCULATING FORWARD ALPHAS __________________********************* */
/* ********************_________________ MACROS FOR THE TABLE ____________________************************** */

/* PROC SUMMARY MACRO 6 */
%MACRO PROC_SUMMARY_HIGH_PICKING(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		WHERE HIGH_PICKING = 1;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/ 
		&STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_HIGH_PICKING;

/* PROC SUMMARY MACRO 7 */
%MACRO PROC_SUMMARY_LOW_PICKING(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		WHERE HIGH_PICKING = 0;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/ 
		&STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_LOW_PICKING;

/* PROC SUMMARY MACRO 8 */
%MACRO PROC_SUMMARY_HIGH_TIMING(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		WHERE HIGH_TIMING = 1;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/ 
		&STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_HIGH_TIMING;

/* PROC SUMMARY MACRO 9 */
%MACRO PROC_SUMMARY_LOW_TIMING(INPUT_FILE, CLASS_VARS, VARIABLES, OUTPUT_FILE, STATS_OPS, CALCULATED_VAR);
	PROC SUMMARY DATA = &INPUT_FILE. NWAY MISSING;
		WHERE HIGH_TIMING = 0;
		CLASS &CLASS_VARS.;
		VAR &VARIABLES.;
		OUTPUT OUT=&OUTPUT_FILE. /*(DROP=_TYPE_ _FREQ_)*/ 
		&STATS_OPS.(&VARIABLES.)=&CALCULATED_VAR.;
	RUN;
%MEND PROC_SUMMARY_LOW_TIMING;

/* MERGE MACRO IF A OR B */
%MACRO MERGE_CODE_2(INPUT_FILE_1, INPUT_FILE_2, SORT_VARS, OUTPUT_FILE);	
	PROC SORT DATA = &INPUT_FILE_1. OUT = LINK_FILE; BY &SORT_VARS.; RUN;
	PROC SORT DATA = &INPUT_FILE_2.; BY &SORT_VARS.; RUN;

	DATA &OUTPUT_FILE.;
		MERGE LINK_FILE (IN=A) &INPUT_FILE_2. (IN=B);
		BY &SORT_VARS.;
		IF A OR B;
	RUN;
	
	PROC DATASETS LIB = WORK;		/*DELETING INTERMEDIARY DATASET FOR SPACE MANAGEMENT*/
		DELETE LINK_FILE;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT;
%MEND MERGE_CODE_2;


/* *********************** ______ MAIN CODE FOR TABLE STARTS HERE ______**************************** */
/******************************** PART A - CREATING FLAGS ****************************************** */
/* STEP 1: IMPORTING ALPHAS FILE */
%IMPORT_MACRO(INPUT_FILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\Supporting_files\Alphas_file_STKRET_WIN.dta', DBMS_TYPE=DTA, OUTPUT_DATASET=Alphas_file);
PROC SORT DATA = Alphas_file; BY FUNDID YEAR MONTH; RUN;
PROC CONTENTS DATA = Alphas_file; RUN;

/* STEP 2: CLEANING DATA */
DATA ALPHAS_FILE_1;
	SET ALPHAS_FILE;
	KEEP FUNDID YEAR MONTH ch4_alpha;
RUN;

/* STEP 3: CREATING FORWARD ALPHAS */
PROC SORT DATA = ALPHAS_FILE_1; BY FUNDID; RUN;

PROC EXPAND DATA=ALPHAS_FILE_1 OUT=EXPAND_1 METHOD=NONE;
    BY FUNDID;
    CONVERT ch4_alpha = CH4_ALPHA_1 / TRANSFORMOUT=(LEAD 1);
	CONVERT ch4_alpha = CH4_ALPHA_3 / TRANSFORMOUT=(LEAD 3);
	CONVERT ch4_alpha = CH4_ALPHA_6 / TRANSFORMOUT=(LEAD 6);
	CONVERT ch4_alpha = CH4_ALPHA_12 / TRANSFORMOUT=(LEAD 12);
RUN;

/* STEP 4: CLEANING ABOVE DATASET */
DATA EXPAND_2;
	SET EXPAND_1;
	KEEP FUNDID YEAR MONTH CH4_ALPHA_1 CH4_ALPHA_3 CH4_ALPHA_6 CH4_ALPHA_12;
RUN;

/* STEP 5: MERGING CH4_ALPHA WITH FUNDLEVEL_DATASET_TRUNCATED */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=EXPAND_2, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* *********________ CALCULATING MEDIAN PICKING AND MEDIAN TIMING _________************ */
/* STEP 1: CALCULATING MEDIAN TIMING */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_TIMING_MED_WIN, OUTPUT_FILE=FILE_19, STATS_OPS=MEDIAN, CALCULATED_VAR=MEDIAN_TIMING_WIN);

/* STEP 2: CALCULATING MEDIAN PICKING */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_PICKING_MED_WIN, OUTPUT_FILE=FILE_20, STATS_OPS=MEDIAN, CALCULATED_VAR=MEDIAN_PICKING_WIN);

/* STEP 3: MERGING ABOVE FILES */
PROC SORT DATA = FILE_19; BY YEAR MONTH; RUN;
PROC SORT DATA = FILE_20; BY YEAR MONTH; RUN;

DATA FILE_21;
	MERGE FILE_19(IN=A) FILE_20(IN=B);
	BY YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_;
RUN;

/* STEP 4: MERGING ABOVE FILES WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_21, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* STEP 5: CREATING FLAG FOR HIGH AND LOW TIMIING AND HIGH AND LOW PICKING FUNDS */
DATA SET_12;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	IF SUM_TIMING_MED_WIN = . THEN DELETE;
	IF SUM_TIMING_MED_WIN > MEDIAN_TIMING_WIN THEN HIGH_TIMING = 1;
	ELSE HIGH_TIMING = 0;
	KEEP FUNDID YEAR MONTH HIGH_TIMING ;
RUN;

DATA SET_14;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	IF SUM_PICKING_MED_WIN = . THEN DELETE;
	IF SUM_PICKING_MED_WIN > MEDIAN_PICKING_WIN THEN HIGH_PICKING = 1;
	ELSE HIGH_PICKING =0;
	KEEP FUNDID YEAR MONTH HIGH_PICKING;
RUN;

/* STEP 6: MERGING ABOVE FILES WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=SET_12, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=SET_14, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/******************************** PART B - CREATING VARIABLES ****************************************** */

/* STEP 1: CREATING MACRO TO CREATE AVERAGE CH4 VARIABLES IN HIGH AND LOW PICKING ENVIRONMENT */
%MACRO PICKING_VARS_ALPHA(INPUT_VAR, INPUT_CHTIME);

	%PROC_SUMMARY_HIGH_PICKING(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_1, STATS_OPS=MEAN, CALCULATED_VAR=YEAR_&INPUT_CHTIME._HIGH_PICKING);

	%PROC_SUMMARY_LOW_PICKING(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED,  CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_2, STATS_OPS=MEAN, CALCULATED_VAR=YEAR_&INPUT_CHTIME._LOW_PICKING);

	%MERGE_CODE_2(INPUT_FILE_1=FILE_1, INPUT_FILE_2=FILE_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_3);

	DATA FILE_4;
		SET FILE_3;
		DROP _TYPE_ _FREQ_;
		&INPUT_CHTIME._HML_PICKING = YEAR_&INPUT_CHTIME._HIGH_PICKING - YEAR_&INPUT_CHTIME._LOW_PICKING;
	RUN;
	
	%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_4, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

	PROC DATASETS LIB = WORK;						/*DELETING INTERMEDIARY DATASET FOR AVOIDING FILE CONFUSION*/
		DELETE FILE_1 FILE_2 FILE_3 FILE_4;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT; 
	
%MEND PICKING_VARS_ALPHA;

/* STEP 2: CREATING PICKING VARIABLES - AVERAGE YEARLY */
%PICKING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_1,  INPUT_CHTIME=CH4T1);
%PICKING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_3,  INPUT_CHTIME=CH4T3);
%PICKING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_6,  INPUT_CHTIME=CH4T6);
%PICKING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_12, INPUT_CHTIME=CH4T12);


/* STEP 3: CREATING MACRO TO CREATE AVERAGE CH4 VARIABLES IN HIGH AND LOW TIMING ENVIRONMENT */
%MACRO TIMING_VARS_ALPHA(INPUT_VAR, INPUT_CHTIME);

	%PROC_SUMMARY_HIGH_TIMING(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_1, STATS_OPS=MEAN, CALCULATED_VAR=YEAR_&INPUT_CHTIME._HIGH_TIMING);

	%PROC_SUMMARY_LOW_TIMING(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED,  CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_2, STATS_OPS=MEAN, CALCULATED_VAR=YEAR_&INPUT_CHTIME._LOW_TIMING);

	%MERGE_CODE_2(INPUT_FILE_1=FILE_1, INPUT_FILE_2=FILE_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_3);

	DATA FILE_4;
		SET FILE_3;
		DROP _TYPE_ _FREQ_;
		&INPUT_CHTIME._HML_TIMING = YEAR_&INPUT_CHTIME._HIGH_TIMING - YEAR_&INPUT_CHTIME._LOW_TIMING;
	RUN;
	
	%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_4, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

	PROC DATASETS LIB = WORK;						/*DELETING INTERMEDIARY DATASET FOR AVOIDING FILE CONFUSION*/
		DELETE FILE_1 FILE_2 FILE_3 FILE_4;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT; 
	
%MEND TIMING_VARS_ALPHA;

/* STEP 4: CREATING PICKING VARIABLES - AVERAGE YEARLY */
%TIMING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_1,  INPUT_CHTIME=CH4T1);
%TIMING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_3,  INPUT_CHTIME=CH4T3);
%TIMING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_6,  INPUT_CHTIME=CH4T6);
%TIMING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_12, INPUT_CHTIME=CH4T12);

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/

/******************************** PART C - CREATING TABLES ****************************************** */

/* *****************************____________ TABLE E ___________****************** */
/* ************________ PART A - PICKING __________************** */
/* STEP 5: SELECTING DISTINCT VALUES OF YEARLY VALUES */
PROC SQL;
	CREATE TABLE YEAR_DATA AS
	SELECT DISTINCT YEAR, MONTH, YEAR_CH4T1_HIGH_PICKING, YEAR_CH4T3_HIGH_PICKING, YEAR_CH4T6_HIGH_PICKING, YEAR_CH4T12_HIGH_PICKING,
								CH4T1_HML_PICKING, CH4T3_HML_PICKING, CH4T6_HML_PICKING, CH4T12_HML_PICKING,
								YEAR_CH4T1_LOW_PICKING, YEAR_CH4T3_LOW_PICKING, YEAR_CH4T6_LOW_PICKING, YEAR_CH4T12_LOW_PICKING
	FROM FUNDLEVEL_DATASET_TRUNCATED;
QUIT;

/* STEP 6: TABLE */
/* CH4 ALPHA FORWARD VALUES IN HIGH PICKING ENVIRONMENT */
PROC MEANS DATA = YEAR_DATA MEAN N;
	VAR YEAR_CH4T1_HIGH_PICKING YEAR_CH4T3_HIGH_PICKING YEAR_CH4T6_HIGH_PICKING YEAR_CH4T12_HIGH_PICKING
		YEAR_CH4T1_LOW_PICKING  YEAR_CH4T3_LOW_PICKING  YEAR_CH4T6_LOW_PICKING  YEAR_CH4T12_LOW_PICKING
		CH4T1_HML_PICKING       CH4T3_HML_PICKING       CH4T6_HML_PICKING       CH4T12_HML_PICKING;
RUN;

PROC TTEST DATA = YEAR_DATA;
	VAR YEAR_CH4T1_HIGH_PICKING YEAR_CH4T3_HIGH_PICKING YEAR_CH4T6_HIGH_PICKING YEAR_CH4T12_HIGH_PICKING;
RUN;

/* CH4 ALPHA FORWARD VALUES IN LOW PICKING ENVIRONMENT */
PROC TTEST DATA = YEAR_DATA;
	VAR YEAR_CH4T1_LOW_PICKING YEAR_CH4T3_LOW_PICKING YEAR_CH4T6_LOW_PICKING YEAR_CH4T12_LOW_PICKING;
RUN;

/* CH4 ALPHA DIFFERENCE IN LOW PICKING AND HIGH PICKING ENVIRONMENT */
PROC TTEST DATA = YEAR_DATA;
	VAR CH4T1_HML_PICKING CH4T3_HML_PICKING CH4T6_HML_PICKING CH4T12_HML_PICKING;
RUN;


/* ************________ PART B - TIMING __________************** */
/* STEP 7: SELECTING DISTINCT VALUES OF YEARLY VALUES */
PROC SQL;
	CREATE TABLE YEAR_DATA_TIMING AS
	SELECT DISTINCT YEAR, MONTH, YEAR_CH4T1_HIGH_TIMING, YEAR_CH4T3_HIGH_TIMING, YEAR_CH4T6_HIGH_TIMING, YEAR_CH4T12_HIGH_TIMING,
					CH4T1_HML_TIMING, CH4T3_HML_TIMING, CH4T6_HML_TIMING, CH4T12_HML_TIMING,
					YEAR_CH4T1_LOW_TIMING, YEAR_CH4T3_LOW_TIMING, YEAR_CH4T6_LOW_TIMING, YEAR_CH4T12_LOW_TIMING
	FROM FUNDLEVEL_DATASET_TRUNCATED;
QUIT;

/* STEP 8: TABLE */
/* CH4 ALPHA FORWARD VALUES IN HIGH TIMING ENVIRONMENT */
PROC MEANS DATA = YEAR_DATA_TIMING MEAN N;
	VAR YEAR_CH4T1_HIGH_TIMING YEAR_CH4T3_HIGH_TIMING YEAR_CH4T6_HIGH_TIMING YEAR_CH4T12_HIGH_TIMING
		YEAR_CH4T1_LOW_TIMING  YEAR_CH4T3_LOW_TIMING  YEAR_CH4T6_LOW_TIMING  YEAR_CH4T12_LOW_TIMING
		CH4T1_HML_TIMING 	   CH4T3_HML_TIMING 	  CH4T6_HML_TIMING 		 CH4T12_HML_TIMING;
RUN;

PROC TTEST DATA = YEAR_DATA_TIMING;
	VAR YEAR_CH4T1_HIGH_TIMING YEAR_CH4T3_HIGH_TIMING YEAR_CH4T6_HIGH_TIMING YEAR_CH4T12_HIGH_TIMING;
RUN;

/* CH4 ALPHA FORWARD VALUES IN LOW TIMING ENVIRONMENT */
PROC TTEST DATA = YEAR_DATA_TIMING;
	VAR YEAR_CH4T1_LOW_TIMING YEAR_CH4T3_LOW_TIMING YEAR_CH4T6_LOW_TIMING YEAR_CH4T12_LOW_TIMING;
RUN;

/* CH4 ALPHA DIFFERENCE IN LOW TIMING AND HIGH TIMING ENVIRONMENT */
PROC TTEST DATA = YEAR_DATA_TIMING;
	VAR CH4T1_HML_TIMING CH4T3_HML_TIMING CH4T6_HML_TIMING CH4T12_HML_TIMING;
RUN;


/* ****************************____________________________ ESG FUNDS ____________________________************************** */
/* STEP 1: MAKING ESG DATASET */
DATA ESG_DATA;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	WHERE NZD_ESG_WT_OF_FUND >= 50;
RUN;

/******************************** PART B - CREATING VARIABLES ****************************************** */

/* STEP 2: CREATING MACRO TO CREATE AVERAGE CH4 VARIABLES IN HIGH AND LOW PICKING ENVIRONMENT */
%MACRO ESG_PICKING_VARS_ALPHA(INPUT_VAR, INPUT_CHTIME);

	%PROC_SUMMARY_HIGH_PICKING(INPUT_FILE=ESG_DATA, CLASS_VARS=YEAR MONTH, VARIABLES=INPUT_VAR, OUTPUT_FILE=FILE_1, STATS_OPS=MEAN, CALCULATED_VAR=ESGY_&INPUT_CHTIME._HIGH_PICKING);

	%PROC_SUMMARY_LOW_PICKING(INPUT_FILE=ESG_DATA,  CLASS_VARS=YEAR MONTH, VARIABLES=INPUT_VAR, OUTPUT_FILE=FILE_2, STATS_OPS=MEAN, CALCULATED_VAR=ESGY_&INPUT_CHTIME._LOW_PICKING);

	%MERGE_CODE_2(INPUT_FILE_1=FILE_1, INPUT_FILE_2=FILE_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_3);

	DATA FILE_4;
		SET FILE_3;
		DROP _TYPE_ _FREQ_;
		ESGY_&INPUT_CHTIME._HML_PICKING = ESGY_&INPUT_CHTIME._HIGH_PICKING - ESGY_&INPUT_CHTIME._LOW_PICKING;
	RUN;
	
	%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_4, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

	PROC DATASETS LIB = WORK;						/*DELETING INTERMEDIARY DATASET FOR AVOIDING FILE CONFUSION*/
		DELETE FILE_1 FILE_2 FILE_3 FILE_4;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT; 
	
%MEND ESG_PICKING_VARS_ALPHA;

/* STEP 3: CREATING PICKING VARIABLES - AVERAGE YEARLY */
%ESG_PICKING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_1,  INPUT_CHTIME=CH4T1);
%ESG_PICKING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_3,  INPUT_CHTIME=CH4T3);
%ESG_PICKING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_6,  INPUT_CHTIME=CH4T6);
%ESG_PICKING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_12, INPUT_CHTIME=CH4T12);

/* STEP 4: CREATING MACRO TO CREATE AVERAGE CH4 VARIABLES FOR ESG FUNDS IN HIGH AND LOW TIMING ENVIRONMENT */
%MACRO ESG_TIMING_VARS_ALPHA(INPUT_VAR, INPUT_CHTIME);

	%PROC_SUMMARY_HIGH_TIMING(INPUT_FILE=ESG_DATA, CLASS_VARS=YEAR MONTH, VARIABLES=INPUT_VAR, OUTPUT_FILE=FILE_1, STATS_OPS=MEAN, CALCULATED_VAR=ESGY_&INPUT_CHTIME._HIGH_TIMING);

	%PROC_SUMMARY_LOW_TIMING(INPUT_FILE=ESG_DATA,  CLASS_VARS=YEAR MONTH, VARIABLES=INPUT_VAR, OUTPUT_FILE=FILE_2, STATS_OPS=MEAN, CALCULATED_VAR=ESGY_&INPUT_CHTIME._LOW_TIMING);

	%MERGE_CODE_2(INPUT_FILE_1=FILE_1, INPUT_FILE_2=FILE_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_3);

	DATA FILE_4;
		SET FILE_3;
		DROP _TYPE_ _FREQ_;
		ESGY_&INPUT_CHTIME._HML_TIMING = ESGY_&INPUT_CHTIME._HIGH_TIMING - ESGY_&INPUT_CHTIME._LOW_TIMING;
	RUN;
	
	%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_4, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

	PROC DATASETS LIB = WORK;						/*DELETING INTERMEDIARY DATASET FOR AVOIDING FILE CONFUSION*/
		DELETE FILE_1 FILE_2 FILE_3 FILE_4;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT; 
	
%MEND ESG_TIMING_VARS_ALPHA;

/* STEP 5: CREATING PICKING VARIABLES - AVERAGE YEARLY */
%ESG_TIMING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_1,  INPUT_CHTIME=CH4T1);
%ESG_TIMING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_3,  INPUT_CHTIME=CH4T3);
%ESG_TIMING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_6,  INPUT_CHTIME=CH4T6);
%ESG_TIMING_VARS_ALPHA(INPUT_VAR=CH4_ALPHA_12, INPUT_CHTIME=CH4T12);

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/

/* ******************************* PART C - CREATING TABLES ****************************************** */

/* ************________ PART A - PICKING __________************** */
/* CREATING DISTINCT YEAR LEVEL VALUES */
PROC SQL;
	CREATE TABLE DATA_ESG AS
	SELECT DISTINCT YEAR, MONTH, ESGY_CH4T1_HML_PICKING,  ESGY_CH4T1_HIGH_PICKING,   ESGY_CH4T1_LOW_PICKING,
								 ESGY_CH4T3_HML_PICKING,  ESGY_CH4T3_HIGH_PICKING,   ESGY_CH4T3_LOW_PICKING,
								 ESGY_CH4T6_HML_PICKING,  ESGY_CH4T6_HIGH_PICKING,   ESGY_CH4T6_LOW_PICKING,
								 ESGY_CH4T12_HML_PICKING, ESGY_CH4T12_HIGH_PICKING,  ESGY_CH4T12_LOW_PICKING
	FROM FUNDLEVEL_DATASET_TRUNCATED;
QUIT;

/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN HIGH PICKING ENVIRONMENT */
PROC MEANS DATA = DATA_ESG MEAN N;
	VAR ESGY_CH4T1_HIGH_PICKING ESGY_CH4T3_HIGH_PICKING ESGY_CH4T6_HIGH_PICKING ESGY_CH4T12_HIGH_PICKING
		ESGY_CH4T1_LOW_PICKING  ESGY_CH4T3_LOW_PICKING  ESGY_CH4T6_LOW_PICKING  ESGY_CH4T12_LOW_PICKING
		ESGY_CH4T1_HML_PICKING  ESGY_CH4T3_HML_PICKING  ESGY_CH4T6_HML_PICKING  ESGY_CH4T12_HML_PICKING;
RUN;

PROC TTEST DATA = DATA_ESG;
	VAR ESGY_CH4T1_HIGH_PICKING ESGY_CH4T3_HIGH_PICKING ESGY_CH4T6_HIGH_PICKING ESGY_CH4T12_HIGH_PICKING;
RUN;

/*  CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN LOW PICKING ENVIRONMENT */
PROC TTEST DATA = DATA_ESG;
	VAR ESGY_CH4T1_LOW_PICKING ESGY_CH4T3_LOW_PICKING ESGY_CH4T6_LOW_PICKING ESGY_CH4T12_LOW_PICKING;
RUN;

/* CH4 ALPHA DIFFERENCE IN LOW TIMING AND HIGH TIMING ENVIRONMENT */
PROC TTEST DATA = DATA_ESG;
	VAR ESGY_CH4T1_HML_PICKING ESGY_CH4T3_HML_PICKING ESGY_CH4T6_HML_PICKING ESGY_CH4T12_HML_PICKING;
RUN;


/* ************________ PART B - TIMING __________************** */
/* CREATING DISTINCT YEAR LEVEL VALUES */
PROC SQL;
	CREATE TABLE DATA_ESG_TIMING AS
	SELECT DISTINCT YEAR, MONTH, ESGY_CH4T1_HML_TIMING,  ESGY_CH4T1_HIGH_TIMING,   ESGY_CH4T1_LOW_TIMING,
								 ESGY_CH4T3_HML_TIMING,  ESGY_CH4T3_HIGH_TIMING,   ESGY_CH4T3_LOW_TIMING,
								 ESGY_CH4T6_HML_TIMING,  ESGY_CH4T6_HIGH_TIMING,   ESGY_CH4T6_LOW_TIMING,
								 ESGY_CH4T12_HML_TIMING, ESGY_CH4T12_HIGH_TIMING,  ESGY_CH4T12_LOW_TIMING
	FROM FUNDLEVEL_DATASET_TRUNCATED;
QUIT;

/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN HIGH TIMING ENVIRONMENT */
PROC MEANS DATA = DATA_ESG_TIMING MEAN N;
	VAR ESGY_CH4T1_HIGH_TIMING ESGY_CH4T3_HIGH_TIMING ESGY_CH4T6_HIGH_TIMING ESGY_CH4T12_HIGH_TIMING
		ESGY_CH4T1_LOW_TIMING  ESGY_CH4T3_LOW_TIMING  ESGY_CH4T6_LOW_TIMING  ESGY_CH4T12_LOW_TIMING
		ESGY_CH4T1_HML_TIMING  ESGY_CH4T3_HML_TIMING  ESGY_CH4T6_HML_TIMING  ESGY_CH4T12_HML_TIMING;
RUN;

PROC TTEST DATA = DATA_ESG_TIMING;
	VAR ESGY_CH4T1_HIGH_TIMING ESGY_CH4T3_HIGH_TIMING ESGY_CH4T6_HIGH_TIMING ESGY_CH4T12_HIGH_TIMING;
RUN;

/*  CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN LOW TIMING ENVIRONMENT */
PROC TTEST DATA = DATA_ESG_TIMING;
	VAR ESGY_CH4T1_LOW_TIMING ESGY_CH4T3_LOW_TIMING ESGY_CH4T6_LOW_TIMING ESGY_CH4T12_LOW_TIMING;
RUN;

/* CH4 ALPHA DIFFERENCE IN LOW TIMING AND HIGH TIMING ENVIRONMENT */
PROC TTEST DATA = FUNDLEVEL_DATASET_TRUNCATED;
	VAR ESGY_CH4T1_HML_TIMING ESGY_CH4T3_HML_TIMING ESGY_CH4T6_HML_TIMING ESGY_CH4T12_HML_TIMING;
RUN;



/* *****************************************___________________________________ TABLE G1 ___________________________________************************************************************** */

/* ****************************____________________________ ESG FUNDS ## EPU HIGH = 1 ____________________________************************** */
/* STEP 1: CREATING DATASET FOR ESG FUNDS AND EPU HIGH ENVIRONMENT */
DATA ESG_DATA_HIGH_EPU;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	WHERE NZD_ESG_WT_OF_FUND >= 50 AND EPU_HIGH = 1;
RUN;

/* ************************************* PART A - CREATING VARIABLES *************************************** */

/* STEP 2: CREATING MACRO TO CREATE AVERAGE CH4 VARIABLES IN HIGH AND LOW PICKING ENVIRONMENT */
%MACRO PICKING_VAR(INPUT_VAR, INPUT_CHTIME);

	%PROC_SUMMARY_HIGH_PICKING(INPUT_FILE=ESG_DATA_HIGH_EPU, CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_1, STATS_OPS=MEAN, CALCULATED_VAR=ESG_H_EPU_&INPUT_CHTIME._H_PIC);

	%PROC_SUMMARY_LOW_PICKING(INPUT_FILE=ESG_DATA_HIGH_EPU,  CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_2, STATS_OPS=MEAN, CALCULATED_VAR=ESG_H_EPU_&INPUT_CHTIME._L_PIC);

	%MERGE_CODE_2(INPUT_FILE_1=FILE_1, INPUT_FILE_2=FILE_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_3);

	DATA FILE_4;
		SET FILE_3;
		DROP _TYPE_ _FREQ_;
		ESG_H_EPU_&INPUT_CHTIME._HML_PIC = ESG_H_EPU_&INPUT_CHTIME._H_PIC - ESG_H_EPU_&INPUT_CHTIME._L_PIC;
	RUN;
		
	%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_4, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

	PROC DATASETS LIB = WORK;						/*DELETING INTERMEDIARY DATASET FOR AVOIDING FILE CONFUSION*/
		DELETE FILE_1 FILE_2 FILE_3 FILE_4;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT; 

%MEND PICKING_VAR;

/* STEP 3: CREATING PICKING VARIABLES - AVERAGE YEARLY */
%PICKING_VAR(INPUT_VAR=CH4_ALPHA_1, INPUT_CHTIME=CH4T1);
%PICKING_VAR(INPUT_VAR=CH4_ALPHA_3, INPUT_CHTIME=CH4T3);
%PICKING_VAR(INPUT_VAR=CH4_ALPHA_6, INPUT_CHTIME=CH4T6);
%PICKING_VAR(INPUT_VAR=CH4_ALPHA_12, INPUT_CHTIME=CH4T12);


/* STEP 4: CREATING MACRO TO CREATE AVERAGE CH4 VARIABLES IN HIGH AND LOW TIMING ENVIRONMENT */
%MACRO TIMING_VAR(INPUT_VAR, INPUT_CHTIME);
	%PROC_SUMMARY_HIGH_TIMING(INPUT_FILE=ESG_DATA_HIGH_EPU, CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_1, STATS_OPS=MEAN, CALCULATED_VAR=ESG_H_EPU_&INPUT_CHTIME._H_TIM);

	%PROC_SUMMARY_LOW_TIMING(INPUT_FILE=ESG_DATA_HIGH_EPU,  CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_2, STATS_OPS=MEAN, CALCULATED_VAR=ESG_H_EPU_&INPUT_CHTIME._L_TIM);

	%MERGE_CODE_2(INPUT_FILE_1=FILE_1, INPUT_FILE_2=FILE_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_3);

	DATA FILE_4;
		SET FILE_3;
		DROP _TYPE_ _FREQ_;
		ESG_H_EPU_&INPUT_CHTIME._HML_TIM = ESG_H_EPU_&INPUT_CHTIME._H_TIM - ESG_H_EPU_&INPUT_CHTIME._L_TIM;
	RUN;

	%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_4, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

	PROC DATASETS LIB = WORK;						/*DELETING INTERMEDIARY DATASET FOR AVOIDING FILE CONFUSION*/
		DELETE FILE_1 FILE_2 FILE_3 FILE_4;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT; 
	
%MEND TIMING_VAR;

/* STEP 5:  CREATING TIMING VARIABLES - AVERAGE YEARLY */
%TIMING_VAR(INPUT_VAR=CH4_ALPHA_1, INPUT_CHTIME=CH4T1);
%TIMING_VAR(INPUT_VAR=CH4_ALPHA_3, INPUT_CHTIME=CH4T3);
%TIMING_VAR(INPUT_VAR=CH4_ALPHA_6, INPUT_CHTIME=CH4T6);
%TIMING_VAR(INPUT_VAR=CH4_ALPHA_12, INPUT_CHTIME=CH4T12);


/* ************************************* PART B - CREATING TABLES *************************************** */
/* PICKING */
/* STEP 6: CREATING DISTINCT VALUES OF YEARLY VARIABLES */
PROC SQL;
	CREATE TABLE DATA_ESG_HIGH_EPU AS
	SELECT DISTINCT YEAR, MONTH, ESG_H_EPU_CH4T1_H_PIC,  ESG_H_EPU_CH4T3_H_PIC,   ESG_H_EPU_CH4T6_H_PIC, ESG_H_EPU_CH4T12_H_PIC,
								 ESG_H_EPU_CH4T1_L_PIC,  ESG_H_EPU_CH4T3_L_PIC,   ESG_H_EPU_CH4T6_L_PIC, ESG_H_EPU_CH4T12_L_PIC,
								 ESG_H_EPU_CH4T1_HML_PIC,  ESG_H_EPU_CH4T3_HML_PIC,   ESG_H_EPU_CH4T6_HML_PIC, ESG_H_EPU_CH4T12_HML_PIC
							
	FROM FUNDLEVEL_DATASET_TRUNCATED;
QUIT;

/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN HIGH EPU AND HIGH PICKING ENVIRONMENT */
PROC MEANS DATA = DATA_ESG_HIGH_EPU MEAN N;
	VAR ESG_H_EPU_CH4T1_H_PIC  ESG_H_EPU_CH4T3_H_PIC   ESG_H_EPU_CH4T6_H_PIC ESG_H_EPU_CH4T12_H_PIC
		ESG_H_EPU_CH4T1_L_PIC	ESG_H_EPU_CH4T3_L_PIC	ESG_H_EPU_CH4T6_L_PIC	ESG_H_EPU_CH4T12_L_PIC
		ESG_H_EPU_CH4T1_HML_PIC		ESG_H_EPU_CH4T3_HML_PIC 	ESG_H_EPU_CH4T6_HML_PIC		ESG_H_EPU_CH4T12_HML_PIC;
RUN;

PROC TTEST DATA = DATA_ESG_HIGH_EPU;
	VAR ESG_H_EPU_CH4T1_H_PIC  ESG_H_EPU_CH4T3_H_PIC   ESG_H_EPU_CH4T6_H_PIC ESG_H_EPU_CH4T12_H_PIC;
RUN;

/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN HIGH EPU AND LOW PICKING ENVIRONMENT */
PROC TTEST DATA = DATA_ESG_HIGH_EPU;
	VAR ESG_H_EPU_CH4T1_L_PIC	ESG_H_EPU_CH4T3_L_PIC	ESG_H_EPU_CH4T6_L_PIC	ESG_H_EPU_CH4T12_L_PIC;
RUN;

/* CH4 ALPHA DIFFERENCE FORWARD VALUES FOR ESG FUNDS ON HIGH EPU ENVIRONMENT */
PROC TTEST DATA = DATA_ESG_HIGH_EPU;
	VAR ESG_H_EPU_CH4T1_HML_PIC		ESG_H_EPU_CH4T3_HML_PIC 	ESG_H_EPU_CH4T6_HML_PIC		ESG_H_EPU_CH4T12_HML_PIC;
RUN;


/* STEP 7: CREATING DATASET FOR AVERGAE YEARLY TIMING VARIABLES */
PROC SQL;
	CREATE TABLE DATA_ESG_HIGH_EPU_TIM AS
	SELECT DISTINCT YEAR, MONTH, ESG_H_EPU_CH4T1_H_TIM, ESG_H_EPU_CH4T3_H_TIM, ESG_H_EPU_CH4T6_H_TIM, ESG_H_EPU_CH4T12_H_TIM,
								 ESG_H_EPU_CH4T1_L_TIM, ESG_H_EPU_CH4T3_L_TIM, ESG_H_EPU_CH4T6_L_TIM, ESG_H_EPU_CH4T12_L_TIM,
								 ESG_H_EPU_CH4T1_HML_TIM, ESG_H_EPU_CH4T3_HML_TIM, ESG_H_EPU_CH4T6_HML_TIM, ESG_H_EPU_CH4T12_HML_TIM
	FROM FUNDLEVEL_DATASET_TRUNCATED;
QUIT;

/* TIMING */
/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN HIGH EPU AND HIGH TIMING ENVIRONMENT */
PROC MEANS DATA = DATA_ESG_HIGH_EPU_TIM MEAN N;
	VAR ESG_H_EPU_CH4T1_H_TIM	ESG_H_EPU_CH4T3_H_TIM		ESG_H_EPU_CH4T6_H_TIM	ESG_H_EPU_CH4T12_H_TIM
		ESG_H_EPU_CH4T1_L_TIM	ESG_H_EPU_CH4T3_L_TIM	ESG_H_EPU_CH4T6_L_TIM	ESG_H_EPU_CH4T12_L_TIM
		ESG_H_EPU_CH4T1_HML_TIM		ESG_H_EPU_CH4T3_HML_TIM		ESG_H_EPU_CH4T6_HML_TIM		ESG_H_EPU_CH4T12_HML_TIM;
RUN;

PROC TTEST DATA = DATA_ESG_HIGH_EPU_TIM;
	VAR ESG_H_EPU_CH4T1_H_TIM	ESG_H_EPU_CH4T3_H_TIM		ESG_H_EPU_CH4T6_H_TIM	ESG_H_EPU_CH4T12_H_TIM;
RUN;

/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN HIGH EPU AND LOW TIMING ENVIRONMENT */
PROC TTEST DATA = DATA_ESG_HIGH_EPU_TIM;
	VAR ESG_H_EPU_CH4T1_L_TIM	ESG_H_EPU_CH4T3_L_TIM	ESG_H_EPU_CH4T6_L_TIM	ESG_H_EPU_CH4T12_L_TIM;
RUN;

/* CH4 ALPHA FORWARD VALUES DIFFERENCE FOR ESG FUNDS ON HIGH EPU ENVIRONMENT */
PROC TTEST DATA = DATA_ESG_HIGH_EPU_TIM;
	VAR ESG_H_EPU_CH4T1_HML_TIM		ESG_H_EPU_CH4T3_HML_TIM		ESG_H_EPU_CH4T6_HML_TIM		ESG_H_EPU_CH4T12_HML_TIM;
RUN;


/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/


/* *****************************************___________________________________ TABLE G2 ___________________________________************************************************************** */

/* ****************************____________________________ ESG FUNDS ## EPU HIGH = 0 ____________________________************************** */
/* STEP 1: CREATING DATASET FOR ESG FUNDS AND EPU LOW ENVIRONMENT */
DATA ESG_DATA_LOW_EPU;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	WHERE NZD_ESG_WT_OF_FUND >= 50 AND EPU_HIGH = 0;
RUN;

/* ************************************* PART A - CREATING VARIABLES *************************************** */

/* STEP 2: CREATING MACRO TO CREATE AVERAGE CH4 VARIABLES IN HIGH AND LOW PICKING ENVIRONMENT */
%MACRO PICKING_VAR_EPU_LOW(INPUT_VAR, INPUT_CHTIME);

	%PROC_SUMMARY_HIGH_PICKING(INPUT_FILE=ESG_DATA_LOW_EPU, CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_1, STATS_OPS=MEAN, CALCULATED_VAR=ESG_LOW_EPU_&INPUT_CHTIME._H_PIC);

	%PROC_SUMMARY_LOW_PICKING(INPUT_FILE=ESG_DATA_LOW_EPU,  CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_2, STATS_OPS=MEAN, CALCULATED_VAR=ESG_LOW_EPU_&INPUT_CHTIME._L_PIC);

	%MERGE_CODE_2(INPUT_FILE_1=FILE_1, INPUT_FILE_2=FILE_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_3);

	DATA FILE_4;
		SET FILE_3;
		DROP _TYPE_ _FREQ_;
		ESG_LOW_EPU_&INPUT_CHTIME._HML_PIC = ESG_LOW_EPU_&INPUT_CHTIME._H_PIC - ESG_LOW_EPU_&INPUT_CHTIME._L_PIC;
	RUN;
		
	%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_4, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

	PROC DATASETS LIB = WORK;						/*DELETING INTERMEDIARY DATASET FOR AVOIDING FILE CONFUSION*/
		DELETE FILE_1 FILE_2 FILE_3 FILE_4;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT; 
	
%MEND PICKING_VAR_EPU_LOW;

/* STEP 3: CREATING PICKING VARIABLES - AVERAGE YEARLY */
%PICKING_VAR_EPU_LOW(INPUT_VAR=CH4_ALPHA_1,  INPUT_CHTIME=CH4T1);
%PICKING_VAR_EPU_LOW(INPUT_VAR=CH4_ALPHA_3,  INPUT_CHTIME=CH4T3);
%PICKING_VAR_EPU_LOW(INPUT_VAR=CH4_ALPHA_6,  INPUT_CHTIME=CH4T6);
%PICKING_VAR_EPU_LOW(INPUT_VAR=CH4_ALPHA_12, INPUT_CHTIME=CH4T12);

/* STEP 4: CREATING MACRO TO CREATE AVERAGE CH4 VARIABLES IN HIGH AND LOW TIMING ENVIRONMENT */
%MACRO TIMING_VAR_EPU_LOW(INPUT_VAR, INPUT_CHTIME);
	%PROC_SUMMARY_HIGH_TIMING(INPUT_FILE=ESG_DATA_LOW_EPU, CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_1, STATS_OPS=MEAN, CALCULATED_VAR=ESG_LOW_EPU_&INPUT_CHTIME._H_TIM);

	%PROC_SUMMARY_LOW_TIMING(INPUT_FILE=ESG_DATA_LOW_EPU,  CLASS_VARS=YEAR MONTH, VARIABLES=&INPUT_VAR., OUTPUT_FILE=FILE_2, STATS_OPS=MEAN, CALCULATED_VAR=ESG_LOW_EPU_&INPUT_CHTIME._L_TIM);

	%MERGE_CODE_2(INPUT_FILE_1=FILE_1, INPUT_FILE_2=FILE_2, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FILE_3);

	DATA FILE_4;
		SET FILE_3;
		DROP _TYPE_ _FREQ_;
		ESG_LOW_EPU_&INPUT_CHTIME._HML_TIM = ESG_LOW_EPU_&INPUT_CHTIME._H_TIM - ESG_LOW_EPU_&INPUT_CHTIME._L_TIM;
	RUN;

	%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_4, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

	PROC DATASETS LIB = WORK;						/*DELETING INTERMEDIARY DATASET FOR AVOIDING FILE CONFUSION*/
		DELETE FILE_1 FILE_2 FILE_3 FILE_4;			/*COOMENT IT OUT IF WANT TO VIEW LINK_FILE*/
	QUIT; 
	
%MEND TIMING_VAR_EPU_LOW;

/* STEP 5:  CREATING TIMING VARIABLES - AVERAGE YEARLY */
%TIMING_VAR_EPU_LOW(INPUT_VAR=CH4_ALPHA_1,  INPUT_CHTIME=CH4T1);
%TIMING_VAR_EPU_LOW(INPUT_VAR=CH4_ALPHA_3,  INPUT_CHTIME=CH4T3);
%TIMING_VAR_EPU_LOW(INPUT_VAR=CH4_ALPHA_6,  INPUT_CHTIME=CH4T6);
%TIMING_VAR_EPU_LOW(INPUT_VAR=CH4_ALPHA_12, INPUT_CHTIME=CH4T12);


/* ************************************* PART B - CREATING TABLES *************************************** */

/* PICKING */
/* STEP 6: CREATING DISTINCT VALUES OF YEARLY VARIABLES */
PROC SQL;
	CREATE TABLE ESG_DATA_LOW_EPU AS
	SELECT DISTINCT YEAR, MONTH, ESG_LOW_EPU_CH4T1_H_PIC,  	 ESG_LOW_EPU_CH4T3_H_PIC,     ESG_LOW_EPU_CH4T6_H_PIC,   ESG_LOW_EPU_CH4T12_H_PIC,
								 ESG_LOW_EPU_CH4T1_L_PIC,    ESG_LOW_EPU_CH4T3_L_PIC,     ESG_LOW_EPU_CH4T6_L_PIC,   ESG_LOW_EPU_CH4T12_L_PIC,
								 ESG_LOW_EPU_CH4T1_HML_PIC,  ESG_LOW_EPU_CH4T3_HML_PIC,   ESG_LOW_EPU_CH4T6_HML_PIC, ESG_LOW_EPU_CH4T12_HML_PIC
							
	FROM FUNDLEVEL_DATASET_TRUNCATED;
QUIT;

/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN LOW EPU AND HIGH PICKING ENVIRONMENT */
PROC MEANS DATA = ESG_DATA_LOW_EPU MEAN N;
	VAR ESG_LOW_EPU_CH4T1_H_PIC  	 ESG_LOW_EPU_CH4T3_H_PIC     ESG_LOW_EPU_CH4T6_H_PIC   ESG_LOW_EPU_CH4T12_H_PIC
		ESG_LOW_EPU_CH4T1_L_PIC      ESG_LOW_EPU_CH4T3_L_PIC     ESG_LOW_EPU_CH4T6_L_PIC   ESG_LOW_EPU_CH4T12_L_PIC
		ESG_LOW_EPU_CH4T1_HML_PIC    ESG_LOW_EPU_CH4T3_HML_PIC   ESG_LOW_EPU_CH4T6_HML_PIC ESG_LOW_EPU_CH4T12_HML_PIC;
RUN;

PROC TTEST DATA = ESG_DATA_LOW_EPU;
	VAR ESG_LOW_EPU_CH4T1_H_PIC  	 ESG_LOW_EPU_CH4T3_H_PIC     ESG_LOW_EPU_CH4T6_H_PIC   ESG_LOW_EPU_CH4T12_H_PIC;
RUN;

/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN LOW EPU AND LOW PICKING ENVIRONMENT */
PROC TTEST DATA = ESG_DATA_LOW_EPU;
	VAR ESG_LOW_EPU_CH4T1_L_PIC    ESG_LOW_EPU_CH4T3_L_PIC     ESG_LOW_EPU_CH4T6_L_PIC   ESG_LOW_EPU_CH4T12_L_PIC;
RUN;

/* CH4 ALPHA FORWARD VALUES DIFFERENCE FOR ESG FUNDS IN LOW EPU ENVIRONMENT */
PROC TTEST DATA = ESG_DATA_LOW_EPU;
	VAR ESG_LOW_EPU_CH4T1_HML_PIC  ESG_LOW_EPU_CH4T3_HML_PIC   ESG_LOW_EPU_CH4T6_HML_PIC ESG_LOW_EPU_CH4T12_HML_PIC;
RUN;


/* STEP 7: CREATING DATASET FOR AVERGAE YEARLY TIMING VARIABLES */
PROC SQL;
	CREATE TABLE DATA_ESG_LOW_EPU_TIME AS
	SELECT DISTINCT YEAR, MONTH, ESG_LOW_EPU_CH4T1_H_TIM, 	ESG_LOW_EPU_CH4T3_H_TIM, 	   ESG_LOW_EPU_CH4T6_H_TIM, 	  ESG_LOW_EPU_CH4T12_H_TIM,
								 ESG_LOW_EPU_CH4T1_L_TIM, 	ESG_LOW_EPU_CH4T3_L_TIM, 	   ESG_LOW_EPU_CH4T6_L_TIM, 	  ESG_LOW_EPU_CH4T12_L_TIM,
								 ESG_LOW_EPU_CH4T1_HML_TIM, ESG_LOW_EPU_CH4T3_HML_TIM, 	   ESG_LOW_EPU_CH4T6_HML_TIM, 	  ESG_LOW_EPU_CH4T12_HML_TIM
	FROM FUNDLEVEL_DATASET_TRUNCATED;
QUIT;

/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN LOW EPU AND HIGH TIMING ENVIRONMENT */
PROC MEANS DATA = DATA_ESG_LOW_EPU_TIME MEAN N;
	VAR ESG_LOW_EPU_CH4T1_H_TIM 	ESG_LOW_EPU_CH4T3_H_TIM 	   ESG_LOW_EPU_CH4T6_H_TIM 	  ESG_LOW_EPU_CH4T12_H_TIM
		ESG_LOW_EPU_CH4T1_L_TIM 	ESG_LOW_EPU_CH4T3_L_TIM 	   ESG_LOW_EPU_CH4T6_L_TIM	  ESG_LOW_EPU_CH4T12_L_TIM
		ESG_LOW_EPU_CH4T1_HML_TIM	 ESG_LOW_EPU_CH4T3_HML_TIM	 ESG_LOW_EPU_CH4T6_HML_TIM	 ESG_LOW_EPU_CH4T12_HML_TIM;
RUN;

PROC TTEST DATA = DATA_ESG_LOW_EPU_TIME;
	VAR ESG_LOW_EPU_CH4T1_H_TIM 	ESG_LOW_EPU_CH4T3_H_TIM 	   ESG_LOW_EPU_CH4T6_H_TIM 	  ESG_LOW_EPU_CH4T12_H_TIM;
RUN;

/* CH4 ALPHA FORWARD VALUES FOR ESG FUNDS IN LOW EPU AND LOW TIMING ENVIRONMENT */
PROC TTEST DATA = DATA_ESG_LOW_EPU_TIME;
	VAR ESG_LOW_EPU_CH4T1_H_TIM 	ESG_LOW_EPU_CH4T3_H_TIM 	   ESG_LOW_EPU_CH4T6_H_TIM 	  ESG_LOW_EPU_CH4T12_H_TIM;
RUN;

/* CH4 ALPHA FORWARD VALUES DIFFERENCE FOR ESG FUNDS IN LOW EPU ENVIRONMENT */
PROC TTEST DATA = DATA_ESG_LOW_EPU_TIME;
	VAR ESG_LOW_EPU_CH4T1_HML_TIM	 ESG_LOW_EPU_CH4T3_HML_TIM	 ESG_LOW_EPU_CH4T6_HML_TIM	 ESG_LOW_EPU_CH4T12_HML_TIM;
RUN;

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/

/* *************_____________ CREATING ESG FLAG FOR STATA ______________*************** */
PROC SORT DATA = File_set.Fundlevel_dataset_stkret_win OUT = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	IF NZD_ESG_WT_OF_FUND >= 50	THEN ESG_FUND = 1;
	ELSE ESG_FUND = 0;
RUN;

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/

/* ***********_________ CREATING DATASET FOR STATA REGRESSION __________************ */
PROC SQL;
	CREATE TABLE File_set.YEARLY_FUNDSET_STATA AS
	SELECT DISTINCT YEAR, MONTH, YEAR_CH4T1_HIGH_PICKING, YEAR_CH4T3_HIGH_PICKING, YEAR_CH4T6_HIGH_PICKING, YEAR_CH4T12_HIGH_PICKING,
					CH4T1_HML_PICKING, CH4T3_HML_PICKING, CH4T6_HML_PICKING, CH4T12_HML_PICKING,
					YEAR_CH4T1_LOW_PICKING, YEAR_CH4T3_LOW_PICKING, YEAR_CH4T6_LOW_PICKING, YEAR_CH4T12_LOW_PICKING, 
					YEAR_CH4T1_HIGH_TIMING, YEAR_CH4T3_HIGH_TIMING, YEAR_CH4T6_HIGH_TIMING, YEAR_CH4T12_HIGH_TIMING,
					CH4T1_HML_TIMING, CH4T3_HML_TIMING, CH4T6_HML_TIMING, CH4T12_HML_TIMING,
					YEAR_CH4T1_LOW_TIMING, YEAR_CH4T3_LOW_TIMING, YEAR_CH4T6_LOW_TIMING, YEAR_CH4T12_LOW_TIMING,
					ESGY_CH4T1_HML_PICKING,  ESGY_CH4T1_HIGH_PICKING,   ESGY_CH4T1_LOW_PICKING,
					ESGY_CH4T3_HML_PICKING,  ESGY_CH4T3_HIGH_PICKING,   ESGY_CH4T3_LOW_PICKING,
					ESGY_CH4T6_HML_PICKING,  ESGY_CH4T6_HIGH_PICKING,   ESGY_CH4T6_LOW_PICKING,
					ESGY_CH4T12_HML_PICKING, ESGY_CH4T12_HIGH_PICKING,  ESGY_CH4T12_LOW_PICKING,
					ESGY_CH4T1_HML_TIMING,  ESGY_CH4T1_HIGH_TIMING,     ESGY_CH4T1_LOW_TIMING,
					ESGY_CH4T3_HML_TIMING,  ESGY_CH4T3_HIGH_TIMING,     ESGY_CH4T3_LOW_TIMING,
					ESGY_CH4T6_HML_TIMING,  ESGY_CH4T6_HIGH_TIMING,     ESGY_CH4T6_LOW_TIMING,
					ESGY_CH4T12_HML_TIMING, ESGY_CH4T12_HIGH_TIMING,    ESGY_CH4T12_LOW_TIMING,
					ESG_H_EPU_CH4T1_H_PIC,  ESG_H_EPU_CH4T3_H_PIC,      ESG_H_EPU_CH4T6_H_PIC, ESG_H_EPU_CH4T12_H_PIC,
					ESG_H_EPU_CH4T1_L_PIC,  ESG_H_EPU_CH4T3_L_PIC,      ESG_H_EPU_CH4T6_L_PIC, ESG_H_EPU_CH4T12_L_PIC,
					ESG_H_EPU_CH4T1_HML_PIC,  ESG_H_EPU_CH4T3_HML_PIC,  ESG_H_EPU_CH4T6_HML_PIC, ESG_H_EPU_CH4T12_HML_PIC,
					ESG_H_EPU_CH4T1_H_TIM, ESG_H_EPU_CH4T3_H_TIM, ESG_H_EPU_CH4T6_H_TIM, ESG_H_EPU_CH4T12_H_TIM,
					ESG_H_EPU_CH4T1_L_TIM, ESG_H_EPU_CH4T3_L_TIM, ESG_H_EPU_CH4T6_L_TIM, ESG_H_EPU_CH4T12_L_TIM,
					ESG_H_EPU_CH4T1_HML_TIM, ESG_H_EPU_CH4T3_HML_TIM, ESG_H_EPU_CH4T6_HML_TIM, ESG_H_EPU_CH4T12_HML_TIM,
					ESG_LOW_EPU_CH4T1_H_PIC,  	 ESG_LOW_EPU_CH4T3_H_PIC,     ESG_LOW_EPU_CH4T6_H_PIC,   ESG_LOW_EPU_CH4T12_H_PIC,
					ESG_LOW_EPU_CH4T1_L_PIC,    ESG_LOW_EPU_CH4T3_L_PIC,     ESG_LOW_EPU_CH4T6_L_PIC,   ESG_LOW_EPU_CH4T12_L_PIC,
					ESG_LOW_EPU_CH4T1_HML_PIC,  ESG_LOW_EPU_CH4T3_HML_PIC,   ESG_LOW_EPU_CH4T6_HML_PIC, ESG_LOW_EPU_CH4T12_HML_PIC,
					ESG_LOW_EPU_CH4T1_H_TIM, 	ESG_LOW_EPU_CH4T3_H_TIM, 	   ESG_LOW_EPU_CH4T6_H_TIM, 	  ESG_LOW_EPU_CH4T12_H_TIM,
					ESG_LOW_EPU_CH4T1_L_TIM, 	ESG_LOW_EPU_CH4T3_L_TIM, 	   ESG_LOW_EPU_CH4T6_L_TIM, 	  ESG_LOW_EPU_CH4T12_L_TIM,
					ESG_LOW_EPU_CH4T1_HML_TIM, ESG_LOW_EPU_CH4T3_HML_TIM, 	   ESG_LOW_EPU_CH4T6_HML_TIM, 	  ESG_LOW_EPU_CH4T12_HML_TIM
	FROM File_set.Fundlevel_dataset_stkret_win;
QUIT;



/* ***********************______________________ ANOTHER TABLE - Panel B: Fund styles, manager ability and EPU _______________________*********************** */
/* TTEST AND MEANS */

%MACRO TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH, FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS, OUTPUT_FILE);

    /* COUNTING NO OF FUND STYLES TO RUN THE DO LOOP */
    %LET FUND_STYLE_NUMS = %SYSFUNC(COUNTW(&FUND_STYLE_INPUT));

    /* INITIALIZE AN EMPTY FLAG TO TRACK THE FIRST ITERATION */
    %LET FIRST_ITER = 1;

    /* LOOPING THROUGH EACH FUND STYLE */
    %DO I = 1 %TO &FUND_STYLE_NUMS;
        %LET FUND_STYLE = %SCAN(&FUND_STYLE_INPUT, &I);

        /* RUNNING PROC TTESTS AND STORE THE FILES */
		ODS OUTPUT TTests = 	TTEST_&FUND_STYLE;			/* PUT RESULTS IN THIS FILE FIRST */
		ODS OUTPUT Statistics = MEAN_&FUND_STYLE;
		PROC TTEST DATA=FUNDLEVEL_DATASET_TRUNCATED;
            WHERE EPU_HIGH = &INPUT_EPU_HIGH. AND %UNQUOTE(&FUND_STYLE) = 1;
            VAR &INPUT_VAR_FOR_CALS.;
        RUN;
		
		/* MERGE BOTH THE FILES */
		%MERGE_CODE_2(INPUT_FILE_1=MEAN_&FUND_STYLE, INPUT_FILE_2=TTEST_&FUND_STYLE, SORT_VARS=Variable, OUTPUT_FILE=Results_&FUND_STYLE);

        /* ADD A FUND_STYLE IDENTIFIER IN ODS FILE AND CLEAN THE DATASET FOR REQUIRED VARIABLES ONLY */
        DATA Results_&FUND_STYLE;
			LENGTH FUND_STYLE $32;
            SET Results_&FUND_STYLE;
            FUND_STYLE = "&FUND_STYLE";  			/* ADD THE CURRENT FUND STYLE AS A VARIABLE */
			KEEP FUND_STYLE Variable Mean N tValue Probt;
		RUN;
		
		/* APPEND THE RESULTS IN ANOTHER DATABASE - THIS LOOP IS NEEDED TO MAKE DATA STRUCTURE PROPER IN THE FILE */
         %IF &FIRST_ITER = 1 %THEN %DO;
            DATA &OUTPUT_FILE.;
                SET Results_&FUND_STYLE;
            RUN;
            %LET FIRST_ITER = 0; /* MAKING FIRST_ITER FLLAG AS FALSE */
        %END;
        %ELSE %DO;
            /* APPEND RESULTS IN ANOTHER DATASET */
            PROC APPEND BASE=&OUTPUT_FILE. DATA=Results_&FUND_STYLE 	FORCE;
            RUN;
        %END;
		
		/* DELETE THE TEMPORARY DATASET SO THAT NO OVERWRITING HAPPENS */
		PROC DATASETS LIBRARY=WORK NOLIST;
            DELETE MEAN_&FUND_STYLE 	TTEST_&FUND_STYLE	Results_&FUND_STYLE;
        QUIT;

    %END;

%MEND TTEST_FUND_STYLES_FLAG_EPU;

/* DEFINE THE STYLE LIST */
%LET FUND_STYLE_INPUT = LARGEGROWTH LARGEVALUE LARGEBLEND MIDGROWTH MIDVALUE MIDBLEND SMALLGROWTH SMALLVALUE SMALLBLEND;

/* RUN THE MACRO */
/* PICKING */
%TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH = 0, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN, OUTPUT_FILE=PICKING_EPU_LOW_MEAN);		
%TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH = 1, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN, OUTPUT_FILE=PICKING_EPU_HIGH_MEAN);
 
/* TIMING */
%TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH = 0, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN, OUTPUT_FILE=TIMING_EPU_LOW_MEAN);
%TTEST_FUND_STYLES_FLAG_EPU(INPUT_EPU_HIGH = 1, FUND_STYLE_INPUT=&FUND_STYLE_INPUT, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN, OUTPUT_FILE=TIMING_EPU_HIGH_MEAN);



/* ***********************______________________ ANOTHER TABLE - Panel B: PART 2 _______________________*********************** */

%MACRO TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET, INPUT_EPU_HIGH, INPUT_BINARYVAR, INPUT_VAR_FOR_CALS, OUTPUT_FILE);

        /* RUNNING PROC TTESTS AND STORE THE FILES */
		/*ODS OUTPUT TTests = 	DATA_1;			 PUT RESULTS IN THIS FILE FIRST 
		  ODS OUTPUT Statistics = DATA_2;*/
		PROC TTEST DATA=&INPUT_DATASET.;
            WHERE EPU_HIGH = &INPUT_EPU_HIGH. AND BINARYVAR = &INPUT_BINARYVAR.;
            VAR &INPUT_VAR_FOR_CALS.;
        RUN;
		
		/* MERGE BOTH THE FILES */
		/*%MERGE_CODE_2(INPUT_FILE_1=DATA_1, INPUT_FILE_2=DATA_2, SORT_VARS=Variable, OUTPUT_FILE=Results_1);*/

        /* CLEAN THE DATASET FOR REQUIRED VARIABLES ONLY */
        /*DATA &OUTPUT_FILE.;
            SET Results_1;
			KEEP Variable Mean N tValue Probt;
		RUN;*/
		
		/* DELETE THE TEMPORARY DATASET SO THAT NO OVERWRITING HAPPENS */
		/*PROC DATASETS LIBRARY=WORK NOLIST;
            DELETE Results_1 DATA_1 DATA_2;
        QUIT;*/

%MEND TTEST_ALLFUNDS_FLAG_EPU;

/* RUN THE MACRO */
/* _______****** KIWISAVER ******_______ */
/* PICKING - */
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=FUNDLEVEL_DATASET_TRUNCATED, INPUT_EPU_HIGH = 0, INPUT_BINARYVAR=3, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN);		
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=FUNDLEVEL_DATASET_TRUNCATED, INPUT_EPU_HIGH = 1, INPUT_BINARYVAR=3, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN);

/* TIMING - */
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=FUNDLEVEL_DATASET_TRUNCATED, INPUT_EPU_HIGH = 0, INPUT_BINARYVAR=3, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN);		
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=FUNDLEVEL_DATASET_TRUNCATED, INPUT_EPU_HIGH = 1, INPUT_BINARYVAR=3, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN);		

/* _______****** OPENEND FUNDS ******_______ */
/* PICKING - */
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=FUNDLEVEL_DATASET_TRUNCATED, INPUT_EPU_HIGH = 0, INPUT_BINARYVAR=1, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN);		
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=FUNDLEVEL_DATASET_TRUNCATED, INPUT_EPU_HIGH = 1, INPUT_BINARYVAR=1, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN);

/* TIMING - */
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=FUNDLEVEL_DATASET_TRUNCATED, INPUT_EPU_HIGH = 0, INPUT_BINARYVAR=1, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN);		
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=FUNDLEVEL_DATASET_TRUNCATED, INPUT_EPU_HIGH = 1, INPUT_BINARYVAR=1, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN);		


/* CREATING DATASET FOR ESG FUNDS */
DATA ESG_FUNDS_DATASET;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	WHERE ESG_FUND = 1;
RUN;

/* _______****** KIWISAVER - ESG FUNDS ******_______ */
/* PICKING - */
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=ESG_FUNDS_DATASET, INPUT_EPU_HIGH = 0, INPUT_BINARYVAR=3, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN);		
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=ESG_FUNDS_DATASET, INPUT_EPU_HIGH = 1, INPUT_BINARYVAR=3, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN);

/* TIMING - */
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=ESG_FUNDS_DATASET, INPUT_EPU_HIGH = 0, INPUT_BINARYVAR=3, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN);		
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=ESG_FUNDS_DATASET, INPUT_EPU_HIGH = 1, INPUT_BINARYVAR=3, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN);		

/* _______****** OPENEND FUNDS - ESG FUNDS ******_______ */
/* PICKING - */
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=ESG_FUNDS_DATASET, INPUT_EPU_HIGH = 0, INPUT_BINARYVAR=1, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN);		
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=ESG_FUNDS_DATASET, INPUT_EPU_HIGH = 1, INPUT_BINARYVAR=1, INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN);

/* TIMING - */
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=ESG_FUNDS_DATASET, INPUT_EPU_HIGH = 0, INPUT_BINARYVAR=1, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN);		
%TTEST_ALLFUNDS_FLAG_EPU(INPUT_DATASET=ESG_FUNDS_DATASET, INPUT_EPU_HIGH = 1, INPUT_BINARYVAR=1, INPUT_VAR_FOR_CALS = SUM_TIMING_MED_WIN);		














/* MACRO ONLY FOR MEANS WITH FLAG INPUT */
%MACRO ONLY_FOR_MEANS_FLAG_EPU(INPUT_EPU_HIGH, FUND_STYLE_INPUT);

    /* COUNTING NO OF FUND STYLES TO RUN THE DO LOOP */
    %LET FUND_STYLE_NUMS = %SYSFUNC(COUNTW(&FUND_STYLE_INPUT));

    /* INITIALIZE AN EMPTY FLAG TO TRACK THE FIRST ITERATION */
    %LET FIRST_ITER = 1;

    /* LOOPING THROUGH EACH FUND STYLE */
    %DO I = 1 %TO &FUND_STYLE_NUMS;
        %LET FUND_STYLE = %SCAN(&FUND_STYLE_INPUT, &I);

        /* RUNNING PROC MEANS */
        PROC MEANS DATA=FUNDLEVEL_DATASET_TRUNCATED MEAN N;
            WHERE EPU_HIGH = &INPUT_EPU_HIGH. AND %UNQUOTE(&FUND_STYLE) = 1;
            VAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN;
            OUTPUT OUT=MEANS_&FUND_STYLE;
        RUN;

        /* ADD A FUND_STYLE IDENTIFIER */
        DATA MEANS_&FUND_STYLE;
			LENGTH FUND_STYLE $32;
            SET MEANS_&FUND_STYLE;
            FUND_STYLE = "&FUND_STYLE";  /* ADD THE CURRENT FUND STYLE AS A VARIABLE */
        RUN;

        /* IF IT'S THE FIRST ITERATION, CREATE THE BASE DATASET */
        %IF &FIRST_ITER = 1 %THEN %DO;
            DATA MEANS_COMBINED_EPUSET_&INPUT_EPU_HIGH;
                SET MEANS_&FUND_STYLE;
            RUN;
            %LET FIRST_ITER = 0; /* MAKING FIRST_ITER FLLAG AS FALSE */
        %END;
        %ELSE %DO;
            /* APPEND RESULTS IN ANOTHER DATASET */
            PROC APPEND BASE=MEANS_COMBINED_EPUSET_&INPUT_EPU_HIGH DATA=MEANS_&FUND_STYLE FORCE;
            RUN;
        %END;
		
		/* DELETE THE TEMPORARY DATASET SO THAT NO OVERWRITING HAPPENS */
		PROC DATASETS LIBRARY=WORK NOLIST;
            DELETE MEANS_&FUND_STYLE;
        QUIT;

    %END;

    /* JUST KEEPING MEAN VALUES IN ROWS */
    DATA MEANS_COMBINED_EPU_&INPUT_EPU_HIGH;
        SET MEANS_COMBINED_EPUSET_&INPUT_EPU_HIGH;
        WHERE _STAT_ = "MEAN";
    RUN;

%MEND ONLY_FOR_MEANS_FLAG_EPU;

/* DEFINE THE STYLE LIST */
%LET FUND_STYLE_INPUT = LARGEGROWTH LARGEVALUE LARGEBLEND MIDGROWTH MIDVALUE MIDBLEND SMALLGROWTH SMALLVALUE SMALLBLEND;

/* RUN THE MACRO */
%ONLY_FOR_MEANS_FLAG_EPU(INPUT_EPU_HIGH=0, FUND_STYLE_INPUT=&FUND_STYLE_INPUT);

%ONLY_FOR_MEANS_FLAG_EPU(INPUT_EPU_HIGH=1, FUND_STYLE_INPUT=&FUND_STYLE_INPUT);




%IMPORT_MACRO(INPUT_FILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\Supporting_files\fund_stata.dta', DBMS_TYPE=DTA, OUTPUT_DATASET=DATA_12);
PROC SORT DATA = DATA_12; BY FUNDID YEAR MONTH; RUN;
PROC CONTENTS DATA = DATA_12; RUN;

PROC SQL;
	CREATE TABLE SET_1 AS
	SELECT DISTINCT modate, YEAR, MONTH
	FROM DATA_12;
QUIT;


%IMPORT_MACROS(INPUTFILE='C:\Users\em18921\Documents\multivariate_tests.csv',
			   OUTPUT_FILE=data_14);


PROC SORT DATA = DATA_12; BY FUNDID YEAR MONTH; RUN;
PROC CONTENTS DATA = DATA_12; RUN;



/* CREATING EXTREME VARIABLE - WHICH IS 1 WHEN THE NZX50 IS BELOW -5% OR ABOVE +5% MONTHLY RETURNS, OTHERWISE ZERO */
DATA NZX50_RETURNS;
	SET Fund_set.Nzx50returns_nzd;
	DROP FUNDID;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=File_set.Fundlevel_dataset_stkret_win, INPUT_FILE_2=NZX50_RETURNS, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	IF NZX50returns_NZD1 >= 5 OR NZX50returns_NZD1 <= -5 THEN EXTREME = 1;
	ELSE EXTREME = 0;
RUN;

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/


/* **************________________ TABLES AS PER EPU&IIR PAPER ________________***************** */
/* TABLE 2 - PANEL A */
/* OVERALL */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED MEAN N;
	VAR Netassets_NZD Fundreturns_NZD1 IDIO_4FF V_RISK market_beta FLOW_PERCENT_WIN_NZD;
RUN;

/* OPEN-END FUNDS */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED MEAN N;
	WHERE BINARYVAR = 3;
	VAR Netassets_NZD Fundreturns_NZD1 IDIO_4FF V_RISK market_beta FLOW_PERCENT_WIN_NZD;
RUN;

/* KIWISAVER FUUNDS - PENSION FUNDS INCLUDED */
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED MEAN N;
	WHERE BINARYVAR = 1 OR BINARYVAR =2;
	VAR Netassets_NZD Fundreturns_NZD1 IDIO_4FF V_RISK market_beta FLOW_PERCENT_WIN_NZD;
RUN;


/* TABLE 2 - PANEL B */
PROC SQL;
	SELECT DISTINCT Global_Broad_Category_Group, COUNT(*) AS COUNT_1, MONTH, YEAR
	FROM FUNDLEVEL_DATASET_TRUNCATED
	GROUP BY Global_Broad_Category_Group, MONTH;
QUIT;



/* *******************************___________________________________________ ESG TRADING VARIABLE ________________________________________****************************************** */
/* ********************_____________________ PART 1 - CALCULATIONS WHILE USING PERCENTHOLDINGS DATA _____________________________*************************** */

DATA NZD_DATASET_FINAL;
	SET File_set.Nzd_dataset_final_stkret_win;
RUN;

DATA MONTHLYRETURNS_DATA;
	SET File_set.Refinitiv_all_data;
RUN;

/* CREATING LAG VALUES FOR MONTHLYRETURNS */
PROC SORT DATA = MONTHLYRETURNS_DATA; BY SECID YEAR MONTH; RUN;

DATA STOCK_RETURNS;
	SET MONTHLYRETURNS_DATA;
	LAG_STKRETURNS = LAG(monthlyreturns);

	IF FIRST.SECID THEN DO;
		LAG_STKRETURNS = .;
	END;
	KEEP SECID YEAR MONTH LAG_STKRETURNS;
RUN;

/* CREATING LAG VALUES FOR NETASSETS */
DATA NETASSETS_DATA;
	SET File_set.Fundlevel_merge_stkret_win;
RUN;

/* CREATING LAG VALUES FOR NETASSETS */
DATA NETASSETS_LAG_DATA;
	SET NETASSETS_DATA;
	LAG_NETASSETS = LAG(Netassets_NZD);

	IF FIRST.FUNDID THEN DO;
		LAG_NETASSETS = .;
	END;
	KEEP FUNDID YEAR MONTH LAG_NETASSETS;
RUN;

/* CLEANING DATASETS BEFORE MERGING WITH HOLDINGS LEVEL DATASET */
DATA STOCK_RETURNS_CLEAN;
	SET STOCK_RETURNS;
	IF LAG_STKRETURNS = . THEN DELETE;
RUN;

DATA NETASSETS_LAG_DATA_CLEAN;
	SET NETASSETS_LAG_DATA;
	IF LAG_NETASSETS = . THEN DELETE;
RUN;

/* HOLDINGS LEVEL DATASET */
DATA SET_1;
	SET NZD_DATASET_FINAL;
	WHERE SECID NE " ";
	KEEP FUNDID SECID YEAR MONTH Percentholdings STOCK_WEIGHT_DECIMAL ESGSCORE YY_MON LIQ_YR_MON ;
RUN;

/* MERGING MONTHLYRETURNS LAG VALUE DATASET WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=SET_1, INPUT_FILE_2=STOCK_RETURNS_CLEAN, SORT_VARS=SECID YEAR MONTH, OUTPUT_FILE=SET_1);

/* MERGING NETASSETS LAG VALUE DATASET WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=SET_1, INPUT_FILE_2=NETASSETS_LAG_DATA_CLEAN, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=SET_1);

/* CREATING A) ESG TRADING RETURNS B) ESG TRADING VALUES */
PROC SORT DATA = SET_1; BY FUNDID SECID YEAR MONTH; RUN;

DATA SET_2;
	SET SET_1;
	BY FUNDID SECID YEAR MONTH; 

	LAG_Percentholdings = LAG(Percentholdings);
	LAG_WT_HLDGS_DEC = LAG(STOCK_WEIGHT_DECIMAL);
	/* INITIALIZE BOTH THESE FLAGS */
	Fund_Old_Position_in_stk = 1;
	Fund_New_Position_in_stk = 0;

	IF FIRST.FUNDID OR FIRST.SECID THEN DO;
			LAG_Percentholdings = 0;
			LAG_WT_HLDGS_DEC = 0;
			Fund_New_Position_in_stk = 1;
			Fund_Old_Position_in_stk = 0;
	END;
	/* INITIALIZE SELL OFF FLAG */
	IF LAST.FUNDID OR LAST.SECID THEN DO;
		IF YY_MON < LIQ_YR_MON THEN DO:
			Stk_postion_sold_off = 1;
	END;
	ELSE DO;
		Stk_postion_sold_off = 0;
	END;
RUN;

PROC SORT DATA = SET_2; BY FUNDID SECID YEAR MONTH; RUN;

DATA SET_3;
	SET SET_2;
	BY FUNDID SECID YEAR MONTH; 
	
	PERCENT_CHNG_WT = Percentholdings - LAG_Percentholdings;	/* NEXT EQUATION IS (PERCENT * PERCENT ) */

	TRADING_RET = PERCENT_CHNG_WT * LAG_STKRETURNS;		/* ALL VARIABLES ARE IN PERCENTAGES, ANSWER IS IN DECIMAL */

	CHNG_WT_HLDGS_DEC = STOCK_WEIGHT_DECIMAL - LAG_WT_HLDGS_DEC;	/* NEXT EQUATION IS (DECIMAL * DECIAML) */

	TRADING_VAL = CHNG_WT_HLDGS_DEC * LAG_NETASSETS;	/* ALL VARIABLES ARE IN DECIMAL POINTS */

RUN;

/* DATA CHECK STEP */
/*DATA CHECK_1;
	SET SET_3;
	KEEP FUNDID SECID YEAR MONTH Percentholdings LAG_Percentholdings PERCENT_CHNG_WT TRADING_RET TRADING_VAL LAG_WT_HLDGS_DEC STOCK_WEIGHT_DECIMAL monthlyreturns_ORIGINAL LAG_STKRETURNS;
RUN;

PROC SORT DATA = CHECK_1; BY SECID YEAR MONTH; RUN;*/

/* SUMMATION OF FUND TRADING RETURN AND FUND TRADING VALUE */
PROC SORT DATA = SET_3; BY FUNDID YEAR MONTH; RUN;
PROC SUMMARY DATA = SET_3 NWAY MISSING;
	CLASS FUNDID YEAR MONTH;
	VAR TRADING_RET TRADING_VAL;
	OUTPUT OUT = DATA_1(DROP = _TYPE_ _FREQ_) SUM(TRADING_RET) = FUND_TRADING_RET
						SUM(TRADING_VAL) = FUND_TRADING_VAL;
RUN;

/* SUMMATION OF FUND ESG TRADING WHERE ESGSCORE IS GE 75 */
PROC SUMMARY DATA = SET_3 NWAY MISSING;
	WHERE NOT MISSING(ESGSCORE);
	CLASS FUNDID YEAR MONTH;
	VAR TRADING_RET TRADING_VAL;
	OUTPUT OUT = DATA_2(DROP = _TYPE_ _FREQ_) SUM(TRADING_RET) = ESG_TRDNG_RET
						SUM(TRADING_VAL) = ESG_TRDNG_VALUE;
RUN;

/* SUMMATION OF FUND ESG TRADING WHERE ESGSCORE IS GE 75 */
/* SUMMATION OF FUND ESG TRADING WHERE ESGSCORE IS GE 25 */
PROC SUMMARY DATA = SET_3 NWAY MISSING;
	WHERE ESGSCORE >= 75;
	CLASS FUNDID YEAR MONTH;
	VAR TRADING_RET TRADING_VAL;
	OUTPUT OUT = DATA_3(DROP = _TYPE_ _FREQ_) SUM(TRADING_RET) = HIGH_ESG_TRDNG_RET
						SUM(TRADING_VAL) = HIGH_ESG_TRDNG_VALUE;
RUN;

PROC SUMMARY DATA = SET_3 NWAY MISSING;
	WHERE ESGSCORE <= 25;
	CLASS FUNDID YEAR MONTH;
	VAR TRADING_RET TRADING_VAL;
	OUTPUT OUT = DATA_4(DROP = _TYPE_ _FREQ_) SUM(TRADING_RET) = LOW_ESG_TRDNG_RET
						SUM(TRADING_VAL) = LOW_ESG_TRDNG_VALUE;
RUN;


/* MERGING ABOVE TWO DATASETS */
%MERGE_CODE_2(INPUT_FILE_1=DATA_1, INPUT_FILE_2=DATA_2, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=MERGE_AVG_1);

%MERGE_CODE_2(INPUT_FILE_1=DATA_3, INPUT_FILE_2=DATA_4, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=MERGE_AVG_2);

%MERGE_CODE_2(INPUT_FILE_1=MERGE_AVG_1, INPUT_FILE_2=MERGE_AVG_2, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=MERGE_AVG);


/* CREATING ESG TRADING VARIABLE */
DATA TRADING_DATA;
	SET MERGE_AVG;
	
	RATIO_HIGH_ESG_TRADING_RET =   (HIGH_ESG_TRDNG_RET / FUND_TRADING_RET) *100;
	RATIO_HIGH_ESG_TRADING_VALUE = (HIGH_ESG_TRDNG_VALUE / FUND_TRADING_VAL) * 100;
	
	RATIO_LOW_ESG_TRADING_RET =   (LOW_ESG_TRDNG_RET / FUND_TRADING_RET) * 100;
	RATIO_LOW_ESG_TRADING_VALUE = (LOW_ESG_TRDNG_VALUE / FUND_TRADING_VAL) * 100;
	
	HML_ESG_TRADING_RET = COALESCE(HIGH_ESG_TRDNG_RET,0) - COALESCE(LOW_ESG_TRDNG_RET,0);
	HML_ESG_TRADING_VALUE = COALESCE(HIGH_ESG_TRDNG_VALUE,0) - COALESCE(LOW_ESG_TRDNG_VALUE,0); 

	/* INITIALIZE FLAG VARIABLES */
	HIGH_ESG_GREATER_TRADING_VALUE = 0;
	LOW_ESG_GREATER_TRADING_VALUE = 0;

	IF HML_ESG_trading_value > 0 THEN DO;
		HIGH_ESG_GREATER_TRADING_VALUE = 1;
	END;

	IF HML_ESG_trading_value < 0 THEN DO;
		LOW_ESG_GREATER_TRADING_VALUE = 1;
	END;

RUN;

/* SAVING FILE IN LIBRARY */
/*DATA File_set.TRADING_DATA;
	SET TRADING_DATA;
RUN; */

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_dataset_stkret_win;
RUN;

/* MERGING TRADING_DATA WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=File_set.TRADING_DATA, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_dataset_stkret_win;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/

/*DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_dataset_stkret_win;
	DROP FUND_TRADING_RET FUND_TRADING_VAL HIGH_ESG_TRDNG_RET HIGH_ESG_TRDNG_VALUE ESG_TRADING_RET ESG_TRADING_VAL;
RUN;*/

/* merging with p1 dataset which will be used in regression */
DATA FUNDLEVEL_P1_DATASET;
	SET FILE_SET.FUNDLEVEL_P1_DATASET;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_P1_DATASET, INPUT_FILE_2=File_set.TRADING_DATA, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_P1_DATASET);

/*DATA File_set.Fundlevel_p1_dataset;
	SET FUNDLEVEL_P1_DATASET;
RUN;*/

DATA Fundlevel_p1_dataset;
	SET File_set.Fundlevel_p1_dataset;
RUN;

/* CREATING RANKING FOR EACH FUND FOR TIMING VARAIBLES */
PROC SORT DATA = Fundlevel_p1_dataset; BY YEAR MONTH; RUN;

PROC RANK DATA = Fundlevel_p1_dataset OUT = DATA_1 GROUPS = 5;
	BY YEAR MONTH;
	VAR SUM_TIMING_MED_WIN;
	RANKS TIMING_RANK;
RUN;

/* CREATING RANKING FOR EACH FUND FOR PICKING VARAIBLES */
PROC SORT DATA = DATA_1; BY YEAR MONTH; RUN;

PROC RANK DATA = DATA_1 OUT = DATA_2 GROUPS = 5;
	BY YEAR MONTH;
	VAR SUM_PICKING_MED_WIN;
	RANKS PICKING_RANK;
RUN;

/* RANKING VARIABLE NAMING 1 TO 5 IN ASCENDING ORDER */
DATA Fundlevel_p1_dataset;
	SET DATA_2;
	TIMING_RANK = TIMING_RANK+1;
	PICKING_RANK = PICKING_RANK+1;
RUN;

/* COMPARING RANKING OF TIMING AND PICKING AND CREATING FLAG */
DATA Fundlevel_p1_dataset;
	SET Fundlevel_p1_dataset;
	QUINTILE_5_BOTH = 0;
	QUINTILE_1_BOTH = 0;

	IF (TIMING_RANK=5) AND (PICKING_RANK = 5) THEN DO;
		QUINTILE_5_BOTH = 1;
	END;
		
	IF (TIMING_RANK = 1) AND (PICKING_RANK = 1) THEN DO;
		QUINTILE_1_BOTH = 1;
	END; 
RUN;

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_p1_dataset;
	SET Fundlevel_p1_dataset;
RUN;*/

/* *********************************** code for averages ****************************** */
DATA Fundlevel_p1_set;
	SET File_set.Fundlevel_p1_dataset;
RUN;

/* CLEAN THE DATA FOR ESG TRADING VALUES AS IT HAVE LOT OF OUTLIERS */
DATA Fundlevel_p1_dataset;
	SET Fundlevel_p1_set;
	IF RATIO_HIGH_ESG_TRADING_VALUE > 1985.71 AND RATIO_HIGH_ESG_TRADING_VALUE NE . THEN DO;
		RATIO_HIGH_ESG_TRADING_VALUE = 1985.71;
	END;
	IF RATIO_HIGH_ESG_TRADING_VALUE < -950 AND RATIO_HIGH_ESG_TRADING_VALUE NE . THEN DO;
		RATIO_HIGH_ESG_TRADING_VALUE = -950;
	END;
RUN;

/* CLEAN THE DATASET AND DROP MISSING VALUES OF RATIO ESG TRADING */
DATA Q5_FUNDS;
	SET Fundlevel_p1_dataset;
	WHERE QUINTILE_5_BOTH = 1;

	IF MISSING(RATIO_HIGH_ESG_TRADING_RET) AND NOT MISSING(RATIO_HIGH_ESG_TRADING_VALUE) THEN DELETE;
	IF MISSING(RATIO_HIGH_ESG_TRADING_VALUE) AND NOT MISSING(RATIO_HIGH_ESG_TRADING_RET) THEN DELETE;
RUN;

/* CALCULATING AVERAGES PARAMENTERS FOR QUINTILE_5_BOTH FUNDS */
PROC MEANS DATA = Q5_FUNDS MEAN MEDIAN P1 P99 STD N;
	VAR ESG_SCORE_AVG NZD_ESG_WT_OF_FUND RATIO_HIGH_ESG_TRADING_RET RATIO_HIGH_ESG_TRADING_VALUE;
RUN;

/* CALCULATING AVERAGES PARAMENTERS FOR QUINTILE_1_BOTH FUNDS */
DATA Q1_FUNDS;
	SET Fundlevel_p1_dataset;
	WHERE QUINTILE_1_BOTH = 1;
	IF MISSING(RATIO_HIGH_ESG_TRADING_RET) AND NOT MISSING(RATIO_HIGH_ESG_TRADING_VALUE) THEN DELETE;
	IF MISSING(RATIO_HIGH_ESG_TRADING_VALUE) AND NOT MISSING(RATIO_HIGH_ESG_TRADING_RET) THEN DELETE;
RUN;

PROC MEANS DATA = Q1_FUNDS MEAN MEDIAN P1 P99 STD N;
	VAR ESG_SCORE_AVG NZD_ESG_WT_OF_FUND RATIO_HIGH_ESG_TRADING_RET RATIO_HIGH_ESG_TRADING_VALUE;
RUN;

/* CALCULATING AVERAGES PARAMENTERS FOR QUINTILE_5_BOTH FUNDS - KIWISAVER FUNDS*/
PROC MEANS DATA = Q5_FUNDS MEAN MEDIAN P1 P99 STD N;
	WHERE BINARYVAR IN (1,2);
	VAR ESG_SCORE_AVG NZD_ESG_WT_OF_FUND RATIO_HIGH_ESG_TRADING_RET RATIO_HIGH_ESG_TRADING_VALUE;
RUN;


/* CALCULATING AVERAGES PARAMENTERS FOR QUINTILE_1_BOTH FUNDS - KIWISAVER FUNDS*/
PROC MEANS DATA = Q1_FUNDS MEAN MEDIAN P1 P99 STD N;
	WHERE BINARYVAR IN (1,2);
	VAR ESG_SCORE_AVG NZD_ESG_WT_OF_FUND RATIO_HIGH_ESG_TRADING_RET RATIO_HIGH_ESG_TRADING_VALUE;
RUN;

/* DATA TEST FOR ESG TRADING VALUE */
DATA TEST_2;
	SET FILE_set.Fundlevel_p1_dataset;
	KEEP FUNDID YEAR MONTH RATIO_HIGH_ESG_TRADING_VALUE HIGH_ESG_TRDNG_VALUE FUND_TRADING_VAL Netassets_NZD;
RUN;
PROC SORT DATA = TEST_2; BY RATIO_HIGH_ESG_TRADING_VALUE; RUN;


DATA TEST_6;
	SET NETASSETS_LAG_DATA;
	WHERE LAG_NETASSETS NE . ;
RUN;

PROC SORT DATA = Fundlevel_p1_dataset; BY RATIO_HIGH_ESG_TRADING_RET; RUN;

DATA TEST_3;
	SET Fundlevel_p1_dataset;
	KEEP FUNDID YEAR MONTH RATIO_HIGH_ESG_TRADING_RET HIGH_ESG_TRDNG_RET FUND_TRADING_RET ;
RUN;

DATA SET_1;
	SET Fundlevel_p1_dataset;
	WHERE ((HIGH_ESG_TRDNG_RET < 0 AND FUND_TRADING_RET > 0) OR 
	       (HIGH_ESG_TRDNG_RET > 0 AND FUND_TRADING_RET < 0)) AND 
	      NOT MISSING(HIGH_ESG_TRDNG_RET);
	KEEP FUNDID YEAR MONTH HIGH_ESG_TRDNG_RET FUND_TRADING_RET RATIO_HIGH_ESG_TRADING_RET;
RUN;



/* ALTERNATE APPORACH TO ELIMINATE STOCKRETURNS EFFECT - FLOW PER STOCK MINUS MONTHLYRETURNS */
/*DATA SET_3;
	SET SET_2;

	CHANGE_IN_CAPITAL_INVESTED = CAPITAL_INVESTED_PER_HOLDING - LAG_CAPITAL_INVESTED_PER_HOLDING;
	RETURN_COMPONENT = CAPITAL_INVESTED_PER_HOLDING * (monthlyreturns_ORIGINAL /100);

	TRADING_VALUE = CHANGE_IN_CAPITAL_INVESTED - RETURN_COMPONENT;
RUN;*/

/* ********************_____________________ PART 2 - CALCULATIONS WHILE USING NUMBER OF SHARES DATA _____________________________*************************** */
/* THIS STEP CANT BE COMPLETED AS PRICE IS INDEPENDENT OF CURRENCY DENOMINATIONS, WHICH IS NETASSETS_NZD */

/*DATA hd_all_final_truncated;
	SET File_set.Nzd_hd_all_final_truncated;
RUN;*/

/* ESG STOCK TRADING */
/*DATA SET_HD_1;
	SET hd_all_final_truncated;
	WHERE SECID NE " ";
	KEEP FUNDID SECID YEAR MONTH Numberofshares  monthlyreturns Netassets_NZD; 	/* Binaryvar ESGSCORE ESG_CONTROVERSY ESG YY_MON SIN_STOCKS;*/
RUN;*/



/* CREATING A) ESG TRADING RETURNS B) ESG TRADING VALUES */
/*PROC SORT DATA = SET_HD_1; BY FUNDID SECID YEAR MONTH; RUN;

/*DATA SET_HD_2;
	SET SET_HD_1;
	BY FUNDID SECID YEAR MONTH; 
	No_of_shares = INPUT(COMPRESS(Numberofshares, ','), BEST32.);

	LAG_No_of_shares = LAG(No_of_shares);
	LAG_STKRETURNS = LAG(monthlyreturns);
	LAG_NETASSETS = LAG(Netassets_NZD);

	IF FIRST.FUNDID OR FIRST.SECID THEN DO;
			LAG_No_of_shares = .;
		 	LAG_STKRETURNS = .;
		 	LAG_NETASSETS = .;
	END;
RUN;

PROC SORT DATA = SET_HD_2; BY FUNDID SECID YEAR MONTH; RUN;

DATA SET_HD_3;
	SET SET_HD_2;
	BY FUNDID SECID YEAR MONTH; 
	
	DELTA_SHARES = No_of_shares - LAG_No_of_shares;	        
	TRADING_RET_SHRS = DELTA_SHARES * LAG_STKRETURNS;		
	TRADING_VAL_SHRS = DELTA_SHARES * LAG_NETASSETS;	   
*/


/* ESG FLOWS FOR GREATER THAN 75 */
/* STEP  (6.4)  :  CALCULATING VALUE WEIGHTED ESG FUND RETURN DECOMPOSED PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NAD_DATASET_FINAL NWAY MISSING;
	WHERE ESGSCORE >= 75 ;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR DECOMPOSED_STK_RET;
	OUTPUT OUT = VW_ESG_RETURNS_DECOMP MEAN (DECOMPOSED_STK_RET) = VW_ESG_RETS_DECOMP_GE75;
RUN;

/*STEP (8.1) : CALCULATING SUM_ESG_CAPITAL OF EACH FUND PER MONTH AND YEAR FOR OVERALL DATA*/

PROC SUMMARY DATA = NAD_DATASET_FINAL NWAY MISSING;
	WHERE ESGSCORE >= 75 ;
	CLASS FUNDID YEAR MONTH;
	VAR CAPITAL_INVESTED_PER_HOLDING;
	OUTPUT OUT = SUM_ESG_CAP_GE75 SUM (CAPITAL_INVESTED_PER_HOLDING) = SUM_ESG_CAP_GE75;
RUN;

PROC SORT DATA = VW_ESG_RETURNS_DECOMP; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = SUM_ESG_CAP_GE75; BY FUNDID YEAR MONTH; RUN;
DATA ESG_GE75_FLOW_CALSET;
	MERGE VW_ESG_RETURNS_DECOMP(IN=A) SUM_ESG_CAP_GE75(IN=B);
	BY FUNDID YEAR MONTH;
	DROP _TYPE_ _FREQ_;
RUN;

PROC SORT DATA = ESG_GE75_FLOW_CALSET; BY FUNDID YEAR MONTH; RUN;

/* STEP (11.2) : FUND ESG FLOW CALCULATIONS */
DATA ESGGE75_FUND_FLOW;
    SET ESG_GE75_FLOW_CALSET;
    BY FUNDID;
    LAGGED_ESGNETASSET = LAG(SUM_ESG_CAP_GE75); 		   			/*CREATING NEW VARIABLE LAGGED_NETASSET*/
  
  	IF FIRST.FUNDID THEN LAGGED_ESGNETASSET = 0;  	   			/*SET THE LAGGED VALUE FOR THE FIRST OBSERVATION AS FOR EACH NEW FUNDID*/
   	
   	CHANGE_ESGNETASSET = SUM_ESG_CAP_GE75 - LAGGED_ESGNETASSET; 	
   	
   	IF NOT MISSING(SUM_ESG_CAP_GE75) AND SUM_ESG_CAP_GE75 NE 0 AND NOT MISSING(CHANGE_ESGNETASSET) THEN DO;
	 															/*CHECK FOR AND HANDLE MISSING VALUES AND ZEROS*/
    	CHANGE_ESGNETASSET_PERCENT = (CHANGE_ESGNETASSET / LAGGED_ESGNETASSET) * 100 ;  	
	END;
	ELSE CHANGE_ESGNETASSET_PERCENT = .; 						/* SET CHANGE_NETASSET_PERCENT TO MISSING WHEN NETASSET IS ZERO */
	
	IF NOT MISSING(VW_ESG_RETS_DECOMP_GE75) AND VW_ESG_RETS_DECOMP_GE75 NE 0 THEN DO; 	/*CHECK FOR MISSING VALUES AND ZEROS*/
    	VW_ESG_RETURNS_DECIMAL = VW_ESG_RETS_DECOMP_GE75/100;	
    END;
	ELSE VW_ESG_RETURNS_DECIMAL = .; 
	
	ESGGE75_DOLLAR_FLOW = (SUM_ESG_CAP_GE75 - (LAGGED_ESGNETASSET * (1 + VW_ESG_RETURNS_DECIMAL))) ; 
	
	IF NOT MISSING(LAGGED_ESGNETASSET) AND LAGGED_ESGNETASSET NE 0 AND NOT MISSING(ESGGE75_DOLLAR_FLOW) THEN DO; /*CHECK FOR MISSING VALUES AND ZEROS*/
    	ESGGE75_FLOW_PRCNT = (ESGGE75_DOLLAR_FLOW / LAGGED_ESGNETASSET) * 100;
    END;
	ELSE ESGGE75_FLOW_PRCNT = .;
RUN;



/* STEP (11.10) : WINSORIZATION FOR OVERALL FLOW TO CALCULATE AVG_ESG_FLOW_PERCENT_WIN ACROSS MONTH AND YEAR */

PROC SORT DATA = ESGGE75_FUND_FLOW ; BY YEAR; RUN;

PROC SUMMARY DATA = ESGGE75_FUND_FLOW ;
	VAR ESGGE75_FLOW_PRCNT ;
	OUTPUT OUT=_STATS_ P1=FLOW_P1 P99=FLOW_P99;
RUN;

DATA WANT_ESG;
	if _N_ = 1 then set _STATS_;
	SET	ESGGE75_FUND_FLOW ; 
	IF ESGGE75_FLOW_PRCNT < FLOW_P1 AND ESGGE75_FLOW_PRCNT NE .  THEN ESGGE75_FLOW_PRCNT_WIN = FLOW_P1 ; 
	IF ESGGE75_FLOW_PRCNT > FLOW_P99 AND ESGGE75_FLOW_PRCNT NE .  THEN ESGGE75_FLOW_PRCNT_WIN = FLOW_P99 ; 
	IF ESGGE75_FLOW_PRCNT_WIN = . THEN ESGGE75_FLOW_PRCNT_WIN = ESGGE75_FLOW_PRCNT ;
	/*DROP _TYPE_ 	_FREQ_		ESG_FLOW_PERCENT_NZD		BINARYVAR 	FLOW_P1		FLOW_P99 ;*/
RUN;

/* ONLY KEEP THE MERGE REQUIRED VARIABLES */
DATA SET_1;
	SET WANT_ESG;
	KEEP FUNDID YEAR MONTH ESGGE75_DOLLAR_FLOW ESGGE75_FLOW_PRCNT ESGGE75_FLOW_PRCNT_WIN ;
RUN;

/* MERGE WITH FUNDLEVEL DATASET */
PROC SORT DATA = SET_1; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = File_set.TEST_FUNDLEVEL_20_NOV OUT = TEST_1; BY FUNDID YEAR MONTH; RUN;

DATA TEST_2;
	MERGE TEST_1(IN=A) SET_1(IN=B);
	BY FUNDID YEAR MONTH; 
	IF A;
	HIGH_ESG_FLOW_RATIO_DOLLAR = ESGGE75_DOLLAR_FLOW / FLOW_DOLLAR_VALUE_NZD;
	HIGH_ESG_FLOW_RATIO_PRCNT = ESGGE75_FLOW_PRCNT_WIN / FLOW_PERCENT_WIN_NZD;
RUN;

PROC SORT DATA = TEST_2; BY FUNDID YEAR MONTH; RUN;

DATA File_set.TEST_FUNDLEVEL_20_NOV;
	SET TEST_2;
RUN;

/* WINSORIZED VALUES */
DATA File_set.TEST_FUNDLEVEL_20_NOV_WIN_SET;
	SET File_set.TEST_FUNDLEVEL_20_NOV;

	IF RATIO_HIGH_ESG_TRADING_RET > 662.26858791 AND RATIO_HIGH_ESG_TRADING_RET NE . THEN DO;
		RATIO_HIGH_ESG_TRADING_RET = 662.2685879;
	END;
	IF RATIO_HIGH_ESG_TRADING_RET < -722.5750250 AND RATIO_HIGH_ESG_TRADING_RET NE . THEN DO;
		RATIO_HIGH_ESG_TRADING_RET = -722.5750250;
	END;

	IF HIGH_ESG_FLOW_RATIO_DOLLAR > 25.8548034 AND HIGH_ESG_FLOW_RATIO_DOLLAR NE . THEN DO;
		HIGH_ESG_FLOW_RATIO_DOLLAR = 25.8548034;
	END;
	IF HIGH_ESG_FLOW_RATIO_DOLLAR < -28.7721114 AND HIGH_ESG_FLOW_RATIO_DOLLAR NE . THEN DO;
		HIGH_ESG_FLOW_RATIO_DOLLAR = -28.7721114;
	END;

RUN;

DATA Q5_FUNDS;
	SET File_set.TEST_FUNDLEVEL_20_NOV_WIN_SET;
	WHERE QUINTILE_5_BOTH = 1;

	IF MISSING(RATIO_HIGH_ESG_TRADING_RET) AND NOT MISSING(RATIO_HIGH_ESG_TRADING_VALUE) THEN DELETE;
	IF MISSING(RATIO_HIGH_ESG_TRADING_VALUE) AND NOT MISSING(RATIO_HIGH_ESG_TRADING_RET) THEN DELETE;
RUN;


PROC MEANS DATA = Q5_FUNDS MEAN MEDIAN P1 P99 STD N;
	VAR 	RATIO_HIGH_ESG_TRADING_RET 		RATIO_HIGH_ESG_TRADING_VALUE 		HIGH_ESG_FLOW_RATIO_DOLLAR;
RUN;


DATA Q1_FUNDS;
	SET File_set.TEST_FUNDLEVEL_20_NOV_WIN_SET;
	WHERE QUINTILE_1_BOTH = 1;

	IF MISSING(RATIO_HIGH_ESG_TRADING_RET) AND NOT MISSING(RATIO_HIGH_ESG_TRADING_VALUE) THEN DELETE;
	IF MISSING(RATIO_HIGH_ESG_TRADING_VALUE) AND NOT MISSING(RATIO_HIGH_ESG_TRADING_RET) THEN DELETE;
RUN;

PROC MEANS DATA = Q1_FUNDS MEAN MEDIAN P1 P99 STD N;
	VAR 	RATIO_HIGH_ESG_TRADING_RET 		RATIO_HIGH_ESG_TRADING_VALUE 		HIGH_ESG_FLOW_RATIO_DOLLAR;
RUN;

PROC MEANS DATA = File_set.TEST_FUNDLEVEL_20_NOV MEAN MEDIAN P1 P99 MIN MAX STD N;
	VAR RATIO_HIGH_ESG_TRADING_RET HIGH_ESG_FLOW_RATIO_DOLLAR RATIO_HIGH_ESG_TRADING_VALUE;
RUN;

PROC MEANS DATA = Q5_FUNDS MEAN MEDIAN P1 P99 STD N;
	WHERE BINARYVAR IN (1,2);
	VAR 	RATIO_HIGH_ESG_TRADING_RET 		RATIO_HIGH_ESG_TRADING_VALUE 		HIGH_ESG_FLOW_RATIO_DOLLAR;
RUN;

PROC MEANS DATA = Q1_FUNDS MEAN MEDIAN P1 P99 STD N;
	WHERE BINARYVAR IN (1,2);
	VAR 	RATIO_HIGH_ESG_TRADING_RET 		RATIO_HIGH_ESG_TRADING_VALUE 		HIGH_ESG_FLOW_RATIO_DOLLAR;
RUN;

DATA NAD_DATASET_FINAL;
	SET FILE_SET.NZD_DATASET_FINAL;
RUN;

PROC SORT DATA = NAD_DATASET_FINAL; BY FUNDID YEAR MONTH; RUN;
/* STEP  (6.1)  :  CALCULATING VALUE WEIGHTED ESG FUND RETURN PER FUND PER MONTH PER YEAR */
PROC SUMMARY DATA = NAD_DATASET_FINAL NWAY MISSING;
	WHERE ESG = 1 AND  MONTHLYRETURNS NE . AND ESGSCORE >= 75;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR MONTHLYRETURNS;
	OUTPUT OUT = ESG_RETURNS_VW MEAN (MONTHLYRETURNS) = VW_HIGH_ESG_RETURNS;
RUN;

PROC SORT DATA = File_set.Fundlevel_p1_dataset; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = ESG_RETURNS_VW; BY FUNDID YEAR MONTH; RUN;
DATA File_set.TEST_FUNDLEVEL_20_NOV;
	MERGE File_set.Fundlevel_p1_dataset(IN=A) ESG_RETURNS_VW(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
RUN;


/* 2 */
/*PROC SUMMARY DATA = NAD_DATASET_FINAL NWAY MISSING;
	WHERE MONTHLYRETURNS NE .;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR MONTHLYRETURNS;
	OUTPUT OUT = ESG_RETURNS_VW_1 MEAN (MONTHLYRETURNS) = VW_TOTAL_RETURNS;
RUN;

DATA FUNDLEVEL_20_NOV;
	MERGE ESG_RETURNS_VW(IN=A) ESG_RETURNS_VW_1(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
RUN;

DATA FUNDLEVEL_20_NOV;
	SET FUNDLEVEL_20_NOV;
	VW_HIGH_ESG_RET_RATIO = VW_HIGH_ESG_RETURNS / VW_TOTAL_RETURNS;
	DROP _TYPE_ _FREQ_ VW_HIGH_ESG_RETURNS VW_TOTAL_RETURNS;
RUN;

PROC SORT DATA = File_set.TEST_FUNDLEVEL_20_NOV; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FUNDLEVEL_20_NOV; BY FUNDID YEAR MONTH; RUN;
DATA File_set.TEST_FUNDLEVEL_20_NOV;
	MERGE File_set.TEST_FUNDLEVEL_20_NOV(IN=A) FUNDLEVEL_20_NOV(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
RUN;*/


DATA NZD_DATASET_FINAL;
	SET File_set.Nzd_dataset_final;
RUN;

DATA Fundlevel_p1_dataset;
	SET File_set.Test_fundlevel_20_nov_win_set;
RUN;

/* Subset data for top quintile (RANK 5) FUNDS */
/* PICKING */
DATA File_set.TOP_QUINTILE_PICKING;
	SET File_set.Test_fundlevel_20_nov_win_set;
	WHERE PICKING_RANK = 5;
RUN;
PROC SORT DATA = File_set.TOP_QUINTILE_PICKING; BY FUNDID YEAR MONTH; RUN;

/* TIMING */
DATA File_set.TOP_QUINTILE_TIMING;
	SET File_set.Test_fundlevel_20_nov_win_set;
	WHERE TIMING_RANK = 5;
RUN;
PROC SORT DATA = File_set.TOP_QUINTILE_TIMING; BY FUNDID YEAR MONTH; RUN;

/* SUBSET DATA FOR BOTTOM QUINTILE (RANK 1) FUNDS */
/* PICKING */
DATA File_set.BOTTOM_QUINTILE_PICKING;
	SET File_set.Test_fundlevel_20_nov_win_set;
	WHERE PICKING_RANK = 1;
RUN;
PROC SORT DATA = File_set.BOTTOM_QUINTILE_PICKING; BY FUNDID YEAR MONTH; RUN;

/* TIMING */
DATA File_set.BOTTOM_QUINTILE_TIMING;
	SET File_set.Test_fundlevel_20_nov_win_set;
	WHERE TIMING_RANK = 1;
RUN;
PROC SORT DATA = File_set.BOTTOM_QUINTILE_TIMING; BY FUNDID YEAR MONTH; RUN;


/* *********************** ______ CREATING CH4_ALPHA_9 FOR 25TH NOV REGRESSION ______**************************** */
/******************************** PART A - CREATING FLAGS ****************************************** */
/* STEP 1: IMPORTING ALPHAS FILE */
%IMPORT_MACRO(INPUT_FILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\Supporting_files\Alphas_file_STKRET_WIN.dta', DBMS_TYPE=DTA, OUTPUT_DATASET=Alphas_file);
PROC SORT DATA = Alphas_file; BY FUNDID YEAR MONTH; RUN;
PROC CONTENTS DATA = Alphas_file; RUN;

/* STEP 2: CLEANING DATA */
DATA ALPHAS_FILE_1;
	SET ALPHAS_FILE;
	KEEP FUNDID YEAR MONTH ch4_alpha;
RUN;

/* STEP 3: CREATING FORWARD ALPHAS */
PROC SORT DATA = ALPHAS_FILE_1; BY FUNDID; RUN;

PROC EXPAND DATA=ALPHAS_FILE_1 OUT=EXPAND_1 METHOD=NONE;
    BY FUNDID;
	CONVERT ch4_alpha = CH4_ALPHA_9 / TRANSFORMOUT=(LEAD 9);
RUN;

/* STEP 4: CLEANING ABOVE DATASET */
DATA EXPAND_2;
	SET EXPAND_1;
	KEEP FUNDID YEAR MONTH CH4_ALPHA_9;
RUN;

/* STEP 5: MERGING CH4_ALPHA WITH FUNDLEVEL_DATASET_TRUNCATED */
%MERGE_CODE_1(INPUT_FILE_1=File_set.Test_fundlevel_20_nov_win_set, INPUT_FILE_2=EXPAND_2, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* CALCULATING PICKING FOR STOCKS WITH ESG SCORE GE 75 */
DATA PICKING_FILE_STKRET_WIN;
	SET FUND_SET.PICKING_FILE_STKRET_WIN;
RUN;

/* STEP 1: CALCULATING PICKING FOR STOCKS PER FUND WHERE ESGSCORE IS GE 75 */
/* STEP 2: CREATING DECOMPOSED NON ESG PICKING VARIABLE */
PROC SUMMARY DATA=Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE >= 75;
	CLASS FUNDID YEAR MONTH;
	OUTPUT OUT = FILE_6(DROP=_TYPE_ _FREQ_)  SUM(PICKING_PER_STOCK_MED)=PICKING_STKS_ESGGE75;
RUN;

/* WINSORIZING THE ABOVE DATASET FOR PICKING */
PROC SORT DATA = FILE_6; BY YEAR; RUN;
PROC MEANS DATA = FILE_6 P1 P99 N NOPRINT;
	BY YEAR;
	VAR PICKING_STKS_ESGGE75;
	OUTPUT OUT = DATA_12(DROP=_TYPE_ _FREQ_) P1=  PICKING_STKS_ESGGE75_P1	
						 					 P99= PICKING_STKS_ESGGE75_P99 ;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FILE_6, INPUT_FILE_2=DATA_12, SORT_VARS=YEAR, OUTPUT_FILE=DATA_1);

DATA DATA_FINAL;
	SET DATA_1;

	IF PICKING_STKS_ESGGE75 < PICKING_STKS_ESGGE75_P1 AND PICKING_STKS_ESGGE75 NE .  THEN PICKING_STKS_ESGGE75_WIN = PICKING_STKS_ESGGE75_P1;
	IF PICKING_STKS_ESGGE75 > PICKING_STKS_ESGGE75_P99 AND PICKING_STKS_ESGGE75 NE . THEN PICKING_STKS_ESGGE75_WIN = PICKING_STKS_ESGGE75_P99;
	IF PICKING_STKS_ESGGE75_WIN = . THEN PICKING_STKS_ESGGE75_WIN = PICKING_STKS_ESGGE75;
	DROP PICKING_STKS_ESGGE75_P1 PICKING_STKS_ESGGE75_P99;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_FINAL, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* CREATING PERMANENT DATASET IN LIBRARY */
DATA File_set.Test_fundlevel_20_nov_win_set;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;






DATA NZD_DATASET_FINAL;
	SET File_set.Nzd_dataset_final;
RUN;

DATA Fundlevel_p1_dataset;
	SET File_set.Test_fundlevel_20_nov_win_set;
RUN;

/* Subset data for top quintile (RANK 5) FUNDS */
/* PICKING */
DATA File_set.TOP_QUINTILE_PICKING;
	SET File_set.Test_fundlevel_20_nov_win_set;
	WHERE PICKING_RANK = 5;
RUN;
PROC SORT DATA = File_set.TOP_QUINTILE_PICKING; BY FUNDID YEAR MONTH; RUN;

/* TIMING */
DATA File_set.TOP_QUINTILE_TIMING;
	SET File_set.Test_fundlevel_20_nov_win_set;
	WHERE TIMING_RANK = 5;
RUN;
PROC SORT DATA = File_set.TOP_QUINTILE_TIMING; BY FUNDID YEAR MONTH; RUN;

/* SUBSET DATA FOR BOTTOM QUINTILE (RANK 1) FUNDS */
/* PICKING */
DATA File_set.BOTTOM_QUINTILE_PICKING;
	SET File_set.Test_fundlevel_20_nov_win_set;
	WHERE PICKING_RANK = 1;
RUN;
PROC SORT DATA = File_set.BOTTOM_QUINTILE_PICKING; BY FUNDID YEAR MONTH; RUN;

/* TIMING */
DATA File_set.BOTTOM_QUINTILE_TIMING;
	SET File_set.Test_fundlevel_20_nov_win_set;
	WHERE TIMING_RANK = 1;
RUN;
PROC SORT DATA = File_set.BOTTOM_QUINTILE_TIMING; BY FUNDID YEAR MONTH; RUN;


DATA File_set.Test_fundlevel_20_nov_win_set;
	SET Fundlevel_p1_dataset;
RUN;

/* ESG DATASET CREATION */
PROC SUMMARY DATA=FUNDLEVEL_P1_DATASET NWAY MISSING ;				
		CLASS YEAR MONTH;
		VAR ESGGE75_SUM_WT_NZD;
		OUTPUT OUT = FILE_1 /*(DROP=_TYPE_ _FREQ_)*/
		MEDIAN(ESGGE75_SUM_WT_NZD) = ESGGE_75_MEDIAN;
RUN;

PROC SORT DATA = FUNDLEVEL_P1_DATASET OUT = LINK_FILE; BY YEAR MONTH; RUN;
PROC SORT DATA = FILE_1; BY YEAR MONTH; RUN;

DATA FUNDLEVEL_P1_DATASET;
	MERGE LINK_FILE (IN=A) FILE_1 (IN=B);
	BY YEAR MONTH;
	IF A;
	DROP _TYPE_ _FREQ_;
RUN;


DATA SET_12;
	SET FUNDLEVEL_P1_DATASET;
	IF ESGGE_75_MEDIAN = . THEN DELETE;
	IF ESGGE75_SUM_WT_NZD > ESGGE_75_MEDIAN THEN ESG_75_FUND = 1;
	ELSE ESG_75_FUND = 0;
RUN;

DATA File_set.FUNDLEVEL_ESG75_DATASET;
	SET SET_12;
	WHERE ESG_75_FUND = 1;
RUN;





/* CREATING TOTAL COST RATIO DATASET */
DATA TOTAL_COST_RATIO;
	SET Fund_set.Nzd_fundlevel_masterfile;
	KEEP FUNDID YEAR MONTH TOTAL_COST_RATIO;
RUN;

/* CREATING FUNDLEVEL DATASET ONLY FOR THIS TABLES */
DATA FUNDLEVEL_DATASET_TRUNCATED_1;
	SET File_set.Fundlevel_dataset_stkret_win;
	KEEP FUNDID YEAR MONTH BINARYVAR SUM_TIMING_MED_WIN SUM_PICKING_MED_WIN EPU_HIGH EPU_HIGH NZD_ESG_WT_OF_FUND Netassets_NZD FLOW_PERCENT_WIN_NZD size_beta momentum_beta Firm_Name FIRM_NAME_FLAG TRACK_ERROR;  
RUN;

/* MERGING TOTAL COST RATIO FILE WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=TOTAL_COST_RATIO, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* CREATING TEMP DATASETS */
DATA Picking_file_stkret_win;
	SET Fund_set.Picking_file_stkret_win;
RUN;

/* Step 1: CREATING DECOMPOSED ESG PICKING VARIABLE */
%PROC_SUMMARY_ESG1(INPUT_FILE=Picking_file_stkret_win, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=PICKING_PER_STOCK_MED, OUTPUT_FILE=FILE_5, STATS_OPS=SUM, CALCULATED_VAR=PICKING_ESG_DECOMP);

/* STEP 2: CREATING DECOMPOSED NON ESG PICKING VARIABLE */
PROC SUMMARY DATA=Picking_file_stkret_win NWAY MISSING;
	WHERE ESG=0;
	CLASS FUNDID YEAR MONTH;
	OUTPUT OUT = FILE_6 SUM(PICKING_PER_STOCK_MED)=PICKING_NON_ESG_DECOMP;
RUN;

/* STEP 3: MERGING BOTH THE VARIABLES DATASET */
PROC SORT DATA = FILE_5; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FILE_6; BY FUNDID YEAR MONTH; RUN;

DATA FILE_7;
	MERGE FILE_5(IN=A) FILE_6(IN=B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_;
RUN;

/* STEP 4: CREATING VARIABLE ESG_PICKING - NON_ESG_PICKING */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_7, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* STEP 5: WINSORIZING THE ABOVE VALUES */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY YEAR; RUN;
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED P1 P99 NOPRINT;
	BY YEAR;
	VAR PICKING_ESG_DECOMP 	PICKING_NON_ESG_DECOMP ;
	OUTPUT OUT = DATA_15(DROP=_TYPE_ _FREQ_) P1=  PICKING_ESG_DECOMP_P1	    PICKING_NON_ESG_DECOMP_P1	
						 					 P99= PICKING_ESG_DECOMP_P99 	PICKING_NON_ESG_DECOMP_P99;
RUN;

/* STEP 6: MERGING WINSORIZED VALUES WITH DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_15, SORT_VARS=YEAR, OUTPUT_FILE=FUND_DATA_WIN_2);

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUND_DATA_WIN_2;

	IF PICKING_ESG_DECOMP < PICKING_ESG_DECOMP_P1  AND PICKING_ESG_DECOMP NE . THEN PICKING_ESG_DECOMP_WIN = PICKING_ESG_DECOMP_P1;
	IF PICKING_ESG_DECOMP > PICKING_ESG_DECOMP_P99 AND PICKING_ESG_DECOMP NE . THEN PICKING_ESG_DECOMP_WIN = PICKING_ESG_DECOMP_P99;
	IF PICKING_ESG_DECOMP_WIN = . THEN PICKING_ESG_DECOMP_WIN = PICKING_ESG_DECOMP;

	IF PICKING_NON_ESG_DECOMP < PICKING_NON_ESG_DECOMP_P1  AND PICKING_NON_ESG_DECOMP NE . THEN PICKING_NON_ESG_DECOMP_WIN = PICKING_NON_ESG_DECOMP_P1;
	IF PICKING_NON_ESG_DECOMP > PICKING_NON_ESG_DECOMP_P99 AND PICKING_NON_ESG_DECOMP NE . THEN PICKING_NON_ESG_DECOMP_WIN = PICKING_NON_ESG_DECOMP_P99;
	IF PICKING_NON_ESG_DECOMP_WIN = . THEN PICKING_NON_ESG_DECOMP_WIN = PICKING_NON_ESG_DECOMP;

	DROP PICKING_ESG_DECOMP_P1	    PICKING_NON_ESG_DECOMP_P1	PICKING_ESG_DECOMP_P99 	PICKING_NON_ESG_DECOMP_P99 	_TYPE_ _FREQ_;
RUN;

/* STEP 7: CREATING RATIO VARIABLE - ESG_PICKING/OVERALL_PICKING */
DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	ESG_MINUS_NON_ESG_P = COALESCE(PICKING_ESG_DECOMP_WIN, 0) - COALESCE(PICKING_NON_ESG_DECOMP_WIN, 0);
	RATIO_ESG_OVERALL_P = PICKING_ESG_DECOMP_WIN/SUM_PICKING_MED_WIN;
RUN;

/* STEP 8: CREAING PERMANENT DATASET IN LIBRARY */
/* DATA File_set.FUND_ESG_TIMING_TABLES;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/


/* **********************____________ (2). CALCULATING QUANTILE1 AND QUANTILE5 ESGSCORE STOCKS PICKING ____________________************************ */
/* ESGSCORE =< 25 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE <= 25;
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_18(DROP = _TYPE_ _FREQ_) SUM(PICKING_PER_STOCK_MED) = PICKING_STKS_Q1_SUM;
RUN;

/* ESGSCORE >= 75 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE >= 75;
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_19(DROP = _TYPE_ _FREQ_) SUM(PICKING_PER_STOCK_MED) = PICKING_STKS_Q5_SUM;
RUN;

/* MERGING BOTH THE FILES WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_18, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_19, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* CREATING WINSORIZED VALUES FOR BOTH THE DATASETS */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY YEAR; RUN;
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED P1 P99 N NOPRINT;
	BY YEAR;
	VAR PICKING_STKS_Q1_SUM		PICKING_STKS_Q5_SUM;
	OUTPUT OUT = DATA_90(DROP=_TYPE_ _FREQ_) P1=  PICKING_STKS_Q1_SUM_P1	    PICKING_STKS_Q5_SUM_P1
						 					 P99= PICKING_STKS_Q1_SUM_P99 		PICKING_STKS_Q5_SUM_P99;
RUN;


/* STEP : MERGING WINSORIZED VALUES WITH DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_90, SORT_VARS=YEAR, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;

	IF PICKING_STKS_Q1_SUM < PICKING_STKS_Q1_SUM_P1  AND PICKING_STKS_Q1_SUM NE . THEN PICKING_STKS_Q1_WIN = PICKING_STKS_Q1_SUM_P1;
	IF PICKING_STKS_Q1_SUM > PICKING_STKS_Q1_SUM_P99 AND PICKING_STKS_Q1_SUM NE . THEN PICKING_STKS_Q1_WIN = PICKING_STKS_Q1_SUM_P99;
	IF PICKING_STKS_Q1_WIN = . THEN PICKING_STKS_Q1_WIN = PICKING_STKS_Q1_SUM;

	IF PICKING_STKS_Q5_SUM < PICKING_STKS_Q5_SUM_P1  AND PICKING_STKS_Q5_SUM NE . THEN PICKING_STKS_Q5_WIN = PICKING_STKS_Q5_SUM_P1;
	IF PICKING_STKS_Q5_SUM > PICKING_STKS_Q5_SUM_P99 AND PICKING_STKS_Q5_SUM NE . THEN PICKING_STKS_Q5_WIN = PICKING_STKS_Q5_SUM_P99;
	IF PICKING_STKS_Q5_WIN = . THEN PICKING_STKS_Q5_WIN = PICKING_STKS_Q5_SUM;

	DROP PICKING_STKS_Q1_SUM_P1	    PICKING_STKS_Q1_SUM_P99		PICKING_STKS_Q5_SUM_P1		PICKING_STKS_Q5_SUM_P99 	_TYPE_ _FREQ_;
RUN;

/* CALCULATING RATIOS */
DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	PICKING_Q5_MINUS_Q1 = COALESCE(PICKING_STKS_Q5_WIN, 0) - COALESCE(PICKING_STKS_Q1_WIN, 0);
	RATIO_PICKING_Q1_OVERALL = PICKING_STKS_Q1_WIN/SUM_PICKING_MED_WIN;
	RATIO_PICKING_Q5_OVERALL = PICKING_STKS_Q5_WIN/SUM_PICKING_MED_WIN;
RUN;

/* CLEANING DATA */
DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	IF SUM_PICKING_MED_WIN = . THEN DO;
		ESG_MINUS_NON_ESG_P = .;
		PICKING_Q5_MINUS_Q1 = .;
	END;
RUN;

/* DATA TEST */
PROC SQL;
	CREATE TABLE TEST_1 AS
	SELECT *
	FROM FUNDLEVEL_1
	WHERE PICKING_Q5_MINUS_Q1 = . ;
QUIT;


/*DATA File_set.FUND_ESG_TIMING_TABLES;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/

/* ************************************_____________________________ TIMING ________________________********************************* */
/* Step 1: CREATING DECOMPOSED ESG TIMING VARIABLE */
%PROC_SUMMARY_ESG1(INPUT_FILE=Picking_file_stkret_win, CLASS_VARS=FUNDID YEAR MONTH, VARIABLES=TIMING_PER_STOCK_MED, OUTPUT_FILE=FILE_1, STATS_OPS=SUM, CALCULATED_VAR=TIMING_ESG_DECOMP);

PROC SUMMARY DATA=Picking_file_stkret_win NWAY MISSING;
	WHERE ESG=0;
	CLASS FUNDID YEAR MONTH;
	OUTPUT OUT = FILE_2 SUM(TIMING_PER_STOCK_MED)=TIMING_NON_ESG_DECOMP;
RUN;

PROC SORT DATA = FILE_1; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = FILE_2; BY FUNDID YEAR MONTH; RUN;

DATA FILE_3;
	MERGE FILE_1(IN=A) FILE_2(IN=B);
	BY FUNDID YEAR MONTH;
	IF A OR B;
	DROP _TYPE_ _FREQ_;
RUN;

/* MERGING ABOVE FILES AND REMOVING EXTRA COLUMNS */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_3, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* WINSORIZING THE ABOVE VALUES */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY YEAR; RUN;
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED P1 P99 NOPRINT;
	BY YEAR;
	VAR TIMING_ESG_DECOMP TIMING_NON_ESG_DECOMP;
	OUTPUT OUT = DATA_81(DROP=_TYPE_ _FREQ_) P1=  TIMING_ESG_DECOMP_P1		TIMING_NON_ESG_DECOMP_P1		
						 					 P99= TIMING_ESG_DECOMP_P99 	TIMING_NON_ESG_DECOMP_P99;
RUN;

/* STEP 7: MERGING WINSORIZED VALUES WITH DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_81, SORT_VARS=YEAR, OUTPUT_FILE=FUND_DATA_WIN);

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUND_DATA_WIN;

	IF TIMING_ESG_DECOMP < TIMING_ESG_DECOMP_P1  AND TIMING_ESG_DECOMP NE . THEN TIMING_ESG_DECOMP_WIN = TIMING_ESG_DECOMP_P1;
	IF TIMING_ESG_DECOMP > TIMING_ESG_DECOMP_P99 AND TIMING_ESG_DECOMP NE . THEN TIMING_ESG_DECOMP_WIN = TIMING_ESG_DECOMP_P99;
	IF TIMING_ESG_DECOMP_WIN = . THEN TIMING_ESG_DECOMP_WIN = TIMING_ESG_DECOMP;

	IF TIMING_NON_ESG_DECOMP < TIMING_NON_ESG_DECOMP_P1  AND TIMING_NON_ESG_DECOMP NE . THEN TIMING_NON_ESG_DECOMP_WIN = TIMING_NON_ESG_DECOMP_P1;
	IF TIMING_NON_ESG_DECOMP > TIMING_NON_ESG_DECOMP_P99 AND TIMING_NON_ESG_DECOMP NE . THEN TIMING_NON_ESG_DECOMP_WIN = TIMING_NON_ESG_DECOMP_P99;
	IF TIMING_NON_ESG_DECOMP_WIN = . THEN TIMING_NON_ESG_DECOMP_WIN = TIMING_NON_ESG_DECOMP;

	DROP TIMING_ESG_DECOMP_P1	TIMING_NON_ESG_DECOMP_P1	TIMING_ESG_DECOMP_P99 	TIMING_NON_ESG_DECOMP_P99	_TYPE_	_FREQ_;
RUN;

/* STEP 8: CREATING RATIO VARIABLE - ESG_PICKING/OVERALL_PICKING */
DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	ESG_MINUS_NON_ESG_TIM = COALESCE(TIMING_ESG_DECOMP_WIN, 0) - COALESCE(TIMING_NON_ESG_DECOMP_WIN, 0);
	RATIO_ESG_OVERALL_TIM = TIMING_ESG_DECOMP_WIN/SUM_TIMING_MED_WIN;
RUN;

/* STEP 8: CREAING PERMANEN DAASE IN LIBRARY */
/*DATA File_set.FUND_ESG_TIMING_TABLES;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/

/* **********************____________ (2). CALCULATING QUANTILE1 AND QUANTILE5 ESGSCORE STOCKS TIMING ____________________************************ */
/* ESGSCORE =< 25 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE <= 25;
	CLASS FUNDID YEAR MONTH;
	VAR TIMING_PER_STOCK_MED;
	OUTPUT OUT = DATA_20(DROP = _TYPE_ _FREQ_) SUM(TIMING_PER_STOCK_MED) = TIMING_STKS_Q1_SUM;
RUN;

/* ESGSCORE >= 75 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE >= 75;
	CLASS FUNDID YEAR MONTH;
	VAR TIMING_PER_STOCK_MED;
	OUTPUT OUT = DATA_21(DROP = _TYPE_ _FREQ_) SUM(TIMING_PER_STOCK_MED) = TIMING_STKS_Q5_SUM;
RUN;

/* MERGING BOTH THE FILES WITH MAIN DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_20, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_21, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* STEP : CREATING WINSORIZED VALUES DATASET */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY YEAR; RUN;
PROC MEANS DATA = FUNDLEVEL_DATASET_TRUNCATED P1 P99 N NOPRINT;
	BY YEAR;
	VAR TIMING_STKS_Q1_SUM		TIMING_STKS_Q5_SUM;
	OUTPUT OUT = DATA_90(DROP=_TYPE_ _FREQ_) P1=  TIMING_STKS_Q1_SUM_P1	    	TIMING_STKS_Q5_SUM_P1
						 					 P99= TIMING_STKS_Q1_SUM_P99 		TIMING_STKS_Q5_SUM_P99;
RUN;

/* STEP : MERGING WINSORIZED VALUES WITH DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_90, SORT_VARS=YEAR, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;

	IF TIMING_STKS_Q1_SUM < TIMING_STKS_Q1_SUM_P1  AND TIMING_STKS_Q1_SUM NE . THEN TIMING_STKS_Q1_WIN = TIMING_STKS_Q1_SUM_P1;
	IF TIMING_STKS_Q1_SUM > TIMING_STKS_Q1_SUM_P99 AND TIMING_STKS_Q1_SUM NE . THEN TIMING_STKS_Q1_WIN = TIMING_STKS_Q1_SUM_P99;
	IF TIMING_STKS_Q1_WIN = . THEN TIMING_STKS_Q1_WIN = TIMING_STKS_Q1_SUM;

	IF TIMING_STKS_Q5_SUM < TIMING_STKS_Q5_SUM_P1  AND TIMING_STKS_Q5_SUM NE . THEN TIMING_STKS_Q5_WIN = TIMING_STKS_Q5_SUM_P1;
	IF TIMING_STKS_Q5_SUM > TIMING_STKS_Q5_SUM_P99 AND TIMING_STKS_Q5_SUM NE . THEN TIMING_STKS_Q5_WIN = TIMING_STKS_Q5_SUM_P99;
	IF TIMING_STKS_Q5_WIN = . THEN TIMING_STKS_Q5_WIN = TIMING_STKS_Q5_SUM;

	DROP TIMING_STKS_Q1_SUM_P1	    TIMING_STKS_Q1_SUM_P99		TIMING_STKS_Q5_SUM_P1		TIMING_STKS_Q5_SUM_P99 	_TYPE_ _FREQ_;
RUN;


/* CALCULATING RATIOS */
DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	TIMING_Q5_MINUS_Q1 = COALESCE(TIMING_STKS_Q5_WIN, 0) - COALESCE(TIMING_STKS_Q1_WIN, 0);
	RATIO_TIMING_Q1_OVERALL = TIMING_STKS_Q1_WIN/SUM_TIMING_MED_WIN;
	RATIO_TIMING_Q5_OVERALL = TIMING_STKS_Q5_WIN/SUM_TIMING_MED_WIN;
RUN;

/* CLEANING DATA */
DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	IF SUM_TIMING_MED_WIN = . THEN DO;
		ESG_MINUS_NON_ESG_TIM = .;
		TIMING_Q5_MINUS_Q1 = .;
	END;
RUN;

/* DATA TEST */
PROC SQL;
	CREATE TABLE TEST_1 AS
	SELECT *
	FROM FUNDLEVEL_DATA
	WHERE ESG_MINUS_NON_ESG_TIM = . ;
QUIT;

/*DATA File_set.FUND_ESG_TIMING_TABLES;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/


/* *******************************________________________ RECESSION DUMMY & AGE DUMMY __________________________********************************** */
PROC SQL;
	CREATE TABLE SET_1 AS
	SELECT DISTINCT YEAR, MONTH
	FROM FUNDLEVEL_DATASET_TRUNCATED;
QUIT;

%IMPORT_MACROS(INPUTFILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\STOCKS_LEVEL_DATA_REFINITIVE\NZ_data\RECESSION_DUMMY.CSV',
			   OUTPUT_FILE=RECESSION_DUMMY);

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=RECESSION_DUMMY, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* SELECTING INCEPTION DATE FROM MAIN FUNDLEVEL DATASET */
DATA SET_2;
	SET File_set.Fundlevel_dataset_stkret_win;
	FUND_AGE_YEAR = YRDIF(INCEPTION_DATE, DATE_NUM, '360');
	FUND_AGE_MONTH = INTCK('MONTH', INCEPTION_DATE, DATE_NUM);
	KEEP FUNDID YEAR MONTH FUND_AGE_YEAR FUND_AGE_MONTH; 
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=SET_2, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;

DATA SET_1;
	SET Fund_set.Nzx50returns_nzd;
	IF NZX50returns_NZD1 <= -5 THEN NZX_XTREME = 1;
	ELSE NZX_XTREME = 0;
	KEEP YEAR MONTH NZX50returns_NZD1 NZX_XTREME;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=File_set.FUND_ESG_TIMING_TABLES_2, INPUT_FILE_2=SET_1, SORT_VARS=YEAR MONTH, OUTPUT_FILE=File_set.FUND_ESG_TIMING_TABLES_2);


/* **********************_____________________ ADDING VALUE BETA AND TRACKING ERROR IN THE DATASET _____________________********************** */
%IMPORT_MACRO(INPUT_FILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\Supporting_files\Alphas_file_14Oct.dta', DBMS_TYPE=DTA, OUTPUT_DATASET=Alphas_file);
PROC SORT DATA = Alphas_file; BY FUNDID YEAR MONTH; RUN;
PROC CONTENTS DATA = Alphas_file; RUN;

DATA SET_15;
	SET Alphas_file;
	KEEP FUNDID YEAR MONTH value_beta;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=SET_15, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

DATA File_set.FUND_ESG_TIMING_TABLES_2;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;


/* BACKWARD FILL OF TOTAL_COST_RATIO */

DATA FUNDLEVEL_DATASET_TRUNCATED;
   SET FUNDLEVEL_DATASET_TRUNCATED;
   BY FUNDID;
   RETAIN last_value;
   
   IF FIRST.FUNDID THEN last_value = .; 
   IF NOT missing(TOTAL_COST_RATIO) THEN last_value = TOTAL_COST_RATIO;
   ELSE TOTAL_COST_RATIO = last_value;
RUN;

/* FINDING AVERAGE COST */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	CLASS YEAR MONTH;
	VAR TOTAL_COST_RATIO;
	OUTPUT OUT = AVG_TCR MEAN(TOTAL_COST_RATIO) = AVG_TCR;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=AVG_TCR, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

PROC SQL;
	CREATE TABLE SET_90 AS
	SELECT FUNDID, YEAR, MONTH, TOTAL_COST_RATIO
	FROM SETUP_6
	WHERE TOTAL_COST_RATIO = . ;
QUIT;



DATA FUNDLEVEL_DATASET_TRUNCATED;
   SET FUNDLEVEL_DATASET_TRUNCATED;
   BY YEAR MONTH;
   IF TOTAL_COST_RATIO = . THEN TOTAL_COST_RATIO = AVG_TCR; 
   DROP _TYPE_ _FREQ_ AVG_TCR LAST_VALUE;
RUN;

/* DOING 0 FOR VALUES MISSING */
DATA FUNDLEVEL_DATASET_TRUNCATED;
   SET FUNDLEVEL_DATASET_TRUNCATED;
   BY YEAR MONTH;
   IF TOTAL_COST_RATIO = . THEN TOTAL_COST_RATIO = 0; 
RUN;

DATA File_set.FUND_ESG_TIMING_TABLES_2;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;

/* ADDING EPU_SCORES */
PROC SQL;
	CREATE TABLE DATA_123 AS
	SELECT DISTINCT YEAR, MONTH, EPU_Scores
	FROM File_set.Fundlevel_dataset_stkret_win;
QUIT;

%MERGE_CODE_1(INPUT_FILE_1=File_set.FUND_ESG_TIMING_TABLES_2, INPUT_FILE_2=DATA_123, SORT_VARS=YEAR MONTH, OUTPUT_FILE=File_set.FUND_ESG_TIMING_TABLES_2);



/* STEP 9: CALCULATING STATISTICS */ 
/* IMPORTING DATA FROM STATA WHICH IS FILTERED FOR p1 VALUES */
%IMPORT_MACRO(INPUT_FILE='R:\SAS - Research\SWARN_RESEARCH\SAS_DATASETS\FUND_MONTH_DATA\FUND_NZD\Supporting_files\timing_cals_final.dta', DBMS_TYPE=DTA, OUTPUT_DATASET=timing_cals_final);
PROC SORT DATA = timing_cals_final; BY FUNDID YEAR MONTH; RUN;
PROC CONTENTS DATA = timing_cals_final; RUN;


%MACRO TTEST_MACRO(INPUT_VAR_FOR_CALS, OUTPUT_FILE);
   /* INITIALIZE AN EMPTY FLAG TO TRACK THE FIRST ITERATION */
	/* COUNTING NO OF FUND STYLES TO RUN THE DO LOOP */
    	%LET INPUT_VAR_FOR_CALS_NUM = %SYSFUNC(COUNTW(&INPUT_VAR_FOR_CALS));

    /* INITIALIZE AN EMPTY FLAG TO TRACK THE FIRST ITERATION */
    	%LET FIRST_ITER = 1;

    /* LOOPING THROUGH EACH FUND STYLE */
    	%DO I = 1 %TO &INPUT_VAR_FOR_CALS_NUM;
        %LET INPUT_VAR = %SCAN(&INPUT_VAR_FOR_CALS, &I);
     /* RUNNING PROC TTESTS AND STORE THE FILES */
		ODS OUTPUT TTests = 	TTEST_&I;			/* PUT RESULTS IN THIS FILE FIRST */
		ODS OUTPUT Statistics = MEAN_&I;
		PROC TTEST DATA=timing_cals_final;
            VAR &INPUT_VAR.;
        RUN;
		
		/* MERGE BOTH THE FILES */
		%MERGE_CODE_2(INPUT_FILE_1=MEAN_&I, INPUT_FILE_2=TTEST_&I, SORT_VARS=Variable, OUTPUT_FILE=Results_&I);

        /* ADD A FUND_STYLE IDENTIFIER IN ODS FILE AND CLEAN THE DATASET FOR REQUIRED VARIABLES ONLY */
        DATA Results_&INPUT_VAR;
			LENGTH Variable $32;
			SET Results_&I;
            VARIABLE = "&INPUT_VAR";  			/* ADD THE CURRENT VARIABLE */
			KEEP VARIABLE Mean N tValue Probt;
		RUN;
		
		/* APPEND THE RESULTS IN ANOTHER DATABASE - THIS LOOP IS NEEDED TO MAKE DATA STRUCTURE PROPER IN THE FILE */
         %IF &FIRST_ITER = 1 %THEN %DO;
            DATA &OUTPUT_FILE.;
                SET Results_&INPUT_VAR;
            RUN;
            %LET FIRST_ITER = 0; /* MAKING FIRST_ITER FLLAG AS FALSE */
        %END;
        %ELSE %DO;
            /* APPEND RESULTS IN ANOTHER DATASET */
            PROC APPEND BASE=&OUTPUT_FILE. DATA=Results_&INPUT_VAR 	FORCE;
            RUN;
        %END;
		
		/* DELETE THE TEMPORARY DATASET SO THAT NO OVERWRITING HAPPENS */
		PROC DATASETS LIBRARY=WORK NOLIST;
            DELETE MEAN_&I	TTEST_&I	Results_&I;
        QUIT;

    %END;

%MEND TTEST_MACRO;

%LET INPUT_VAR_FOR_CALS = SUM_PICKING_MED_WIN		ESG_MINUS_NON_ESG_P		RATIO_ESG_OVERALL_P		PICKING_STKS_Q1_WIN		PICKING_STKS_Q5_WIN		RATIO_PICKING_Q5_OVERALL	PICKING_Q5_MINUS_Q1		
						  SUM_TIMING_MED_WIN		ESG_MINUS_NON_ESG_TIM	RATIO_ESG_OVERALL_TIM	TIMING_STKS_Q1_WIN		TIMING_STKS_Q5_WIN		RATIO_TIMING_Q5_OVERALL		TIMING_Q5_MINUS_Q1;

%TTEST_MACRO(INPUT_VAR_FOR_CALS=&INPUT_VAR_FOR_CALS, OUTPUT_FILE=MEANS_TABLE);

PROC TTEST DATA =  FUNDLEVEL_DATASET_TRUNCATED;
	VAR PICKING_NON_ESG_DECOMP_WIN	TIMING_NON_ESG_DECOMP_WIN ;
RUN;

PROC SQL;
	CREATE TABLE DATA_1 AS
	SELECT FUNDID, YEAR, MONTH, TRACK_ERROR, Fundreturns_NZD1, INDEX_RETURNS1
	FROM File_set.Fundlevel_dataset_stkret_win
	WHERE TRACK_ERROR = .;
RUN;



/* DATE OF CODE WRITING - 26/02/2025 */

DATA NZD_DATASET_FINAL;
	SET File_set.Nzd_dataset_final;
RUN;

PROC SORT DATA = NZD_DATASET_FINAL; BY FUNDID YEAR MONTH; RUN;

DATA Picking_file_stkret_win;
	SET Fund_set.Picking_file_stkret_win;
RUN;

PROC SORT DATA = Picking_file_stkret_win; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_final_dec2024;
RUN;

PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

/* ******* CREATING VARIABLE Picking from >75 Score AND Picking from <25 Score AND ESG returns (Equal-weighted)  ********* */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE >= 75; 
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_GE75 SUM(PICKING_PER_STOCK_MED) = PICKING_GE_75;
RUN;

PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE <= 25; 
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_LE25 SUM(PICKING_PER_STOCK_MED) = PICKING_LE_25;
RUN;

PROC SORT DATA = DATA_GE75; BY FUNDID YEAR MONTH; RUN;

PROC SORT DATA = DATA_LE25; BY FUNDID YEAR MONTH; RUN;

DATA STEP_MERGE_1;
	MERGE DATA_GE75(IN=A) DATA_LE25(IN=B);
	IF A OR B;
	BY FUNDID YEAR MONTH;
	DROP _TYPE_ _FREQ_;
RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE FUNDLEVEL_DATASET_TRUNCATED(IN=A) STEP_MERGE_1(IN=B);
	IF A;
	BY FUNDID YEAR MONTH;
	DROP _TYPE_ _FREQ_;
RUN;


PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESG = 1 AND  MONTHLYRETURNS NE . ;
	CLASS FUNDID YEAR MONTH;
	VAR MONTHLYRETURNS;
	OUTPUT OUT = ESG_RETURNS_EW MEAN (MONTHLYRETURNS) = EW_ESG_RETURNS;
RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE FUNDLEVEL_DATASET_TRUNCATED(IN=A) ESG_RETURNS_EW(IN=B);
	IF A;
	BY FUNDID YEAR MONTH;
	DROP _TYPE_ _FREQ_;
RUN;

/*DATA File_set.Fundlevel_final_dec2024;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;*/

/* VARIABLE CREATION - WEIGHTED ESG SCORES */
/* STEP 1: CREATE DATASET FOR COMPUTATION */
DATA NZD_DATASET_FINAL;
	SET File_set.Nzd_dataset_final;
RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_final_dec2024;
	drop VW_ESG_RATINGS WEIGHTED_ESGSCORE;
RUN;

PROC SORT DATA = NZD_DATASET_FINAL; BY FUNDID YEAR MONTH; RUN;

/* STEP 2: : CALCULATING VALUE WEIGHTED ESG SCORES  */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESG = 1;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE MEAN(ESGSCORE) = VW_ESG_RATINGS;
RUN;


PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED OUT = LINK_1; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = WEIGHTED_SCORE; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE LINK_1(IN=A) WEIGHTED_SCORE(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
	DROP _TYPE_ _FREQ_;
RUN;

/* COUNT TOTAL NO OF HOLDINGS WITH ESG SCORE IN THE PORTFOLIO */
PROC SQL;
	CREATE TABLE ESG_HOLDINGS AS
	SELECT FUNDID, YEAR, MONTH, COUNT(*) AS ESG_HOLDINGS_TOTAL
	FROM NZD_DATASET_FINAL
	WHERE ESG = 1
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED OUT = LINK_1; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = ESG_HOLDINGS; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE LINK_1(IN=A) ESG_HOLDINGS(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
	DROP _TYPE_ _FREQ_;
RUN;

/* CREATING WEIGHTED ESGSCORE */

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	WEIGHTED_ESGSCORE = ((ESG_HOLDINGS_TOTAL / COMPONENT_HOLDINGS_NZD) * VW_ESG_RATINGS); /* ESGHOLDINGS_EQUITY_NZD or TOTALHOLDINGS_EQUITY_NZD*/
	DROP _TYPE_ _FREQ_;
RUN;

/* STEP 3: VALUE WEIGHTED ESGSCORE FOR GE 75 */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESGSCORE >= 75;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE_GE75 MEAN(ESGSCORE) = VW_ESGGE75_RATINGS;
RUN;

PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED OUT = LINK_1; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = WEIGHTED_SCORE_GE75; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE LINK_1(IN=A) WEIGHTED_SCORE_GE75(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
	DROP _TYPE_ _FREQ_;
RUN;

/* HOLDINGS WITH ESGSCORE GE 75 */
PROC SQL;
	CREATE TABLE DATA_COUNT AS
	SELECT FUNDID, YEAR, MONTH, COUNT(*) AS ESGGE75_NZD_HOLDINGS
	FROM NZD_DATASET_FINAL
	WHERE ESGSCORE >= 75
	GROUP BY FUNDID, YEAR, MONTH;
QUIT;

PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED OUT = LINK_1; BY FUNDID YEAR MONTH; RUN;
PROC SORT DATA = DATA_COUNT; BY FUNDID YEAR MONTH; RUN;

DATA FUNDLEVEL_DATASET_TRUNCATED;
	MERGE LINK_1(IN=A) DATA_COUNT(IN=B);
	BY FUNDID YEAR MONTH;
	IF A;
RUN;

/* PROPORTION OF HOLDINGS WITH ESGGE 75 TO THE TOTAL HOLDINGS */
DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	RATIO_ESG75_H0LDINGS_NZD = (ESGGE75_NZD_HOLDINGS / COMPONENT_HOLDINGS_NZD) * 100;
RUN;


/* REWRITING PERMANENT DATASET IN THE LIBRARY */
PROC SORT DATA = FUNDLEVEL_DATASET_TRUNCATED; BY FUNDID YEAR MONTH; RUN;

DATA File_set.Fundlevel_final_dec2024;
	SET FUNDLEVEL_DATASET_TRUNCATED;
RUN;


DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_final_dec2024;
RUN;

/* STEP 3: VALUE WEIGHTED ESGSCORE FOR GE 50 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE < 50 AND ESGSCORE  >= 0;
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_19(DROP = _TYPE_ _FREQ_) SUM(PICKING_PER_STOCK_MED) = PICKING_STKS_ESGLE_50;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_19, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);



/* VALUE WEIGHTED ESG RATINGS OF DIFFERENT ESG GROUPS */


DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_final_dec2024;
RUN;

/* STEP 3: VALUE WEIGHTED ESGSCORE FOR GE 50 */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESGSCORE >= 50;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE_ESGGE50 MEAN(ESGSCORE) = VW_ESGGE50_RATINGS;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=WEIGHTED_SCORE_ESGGE50, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* VALUE WEIGHTED SCORE LE 50 */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESGSCORE < 50 AND ESGSCORE  >= 0;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE_ESGLESS50 MEAN(ESGSCORE) = VW_ESGLESS50_RATINGS;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=WEIGHTED_SCORE_ESGLESS50, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* VALUE WEIGHTED SCORE GE 25 */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESGSCORE >= 25;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE_ESGE25 MEAN(ESGSCORE) = VW_GE25_RATINGS;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=WEIGHTED_SCORE_ESGE25, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* VALUE WEIGHTED SCORE LE 25 */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESGSCORE < 25 AND ESGSCORE  >= 0;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE_ESGLESS25 MEAN(ESGSCORE) = VW_ESGLESS25_RATINGS;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=WEIGHTED_SCORE_ESGLESS25, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* VALUE WEIGHTED SCORE LE 75 */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESGSCORE < 75 AND ESGSCORE  >= 0;;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE_ESGLESS75 MEAN(ESGSCORE) = VW_ESGLESS75_RATINGS;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=WEIGHTED_SCORE_ESGLESS75, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/* DATA File_set.Fundlevel_final_dec2024;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	DROP _TYPE_ _FREQ_;
RUN; */



/* *********________ CALCULATING MEDIAN PICKING AND HIGH PICKING VARIABLE_________************ */


/* STEP 2: CALCULATING MEDIAN PICKING */
%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR MONTH, VARIABLES=SUM_PICKING_MED_WIN, OUTPUT_FILE=FILE_20, STATS_OPS=MEDIAN, CALCULATED_VAR=MEDIAN_PICKING_WIN);

/* STEP 4: MERGING ABOVE FILES WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=FILE_20, SORT_VARS=YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* STEP 5: CREATING FLAG FOR HIGH AND LOW PICKING FUNDS */
DATA SET_14;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	IF SUM_PICKING_MED_WIN = . THEN DELETE;
	IF SUM_PICKING_MED_WIN > MEDIAN_PICKING_WIN THEN HIGH_PICKING = 1;
	ELSE HIGH_PICKING =0;
	KEEP FUNDID YEAR MONTH HIGH_PICKING;
RUN;

/* STEP 6: MERGING ABOVE FILES WITH FUNDLEVEL DATASET */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=SET_14, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

DATA TEST_1;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	WHERE HIGH_PICKING = 0;
RUN;

/* REWRITING DATASET IN THE LIBRARY */
/* DATA File_set.Fundlevel_final_dec2024;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	DROP _TYPE_ _FREQ_ MEDIAN_PICKING_WIN;
RUN; */



/* PICKING FOR STOCKS WITH DIFFERENT ESGSCORE */

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_final_dec2024;
RUN;

/* PICKING FOR STOCKS WITH ESGSCORE FOR GE 50 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE < 50 AND ESGSCORE  >= 0;
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_19(DROP = _TYPE_ _FREQ_) SUM(PICKING_PER_STOCK_MED) = PICKING_STKS_ESGLE_50;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_19, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* PICKING FOR STOCKS WITH ESGSCORE LE 50 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE >= 50;
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_20(DROP = _TYPE_ _FREQ_) SUM(PICKING_PER_STOCK_MED) = PICKING_STKS_ESGGE_50;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_20, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* PICKING FOR STOCKS WITH ESGSCORE GE 25 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE >= 25;
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_21(DROP = _TYPE_ _FREQ_) SUM(PICKING_PER_STOCK_MED) = PICKING_STKS_ESGGE_25;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_21, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* PICKING FOR STOCKS WITH ESGSCORE LE 25 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE < 25 AND ESGSCORE  >= 0;
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_22(DROP = _TYPE_ _FREQ_) SUM(PICKING_PER_STOCK_MED) = PICKING_STKS_ESGLE_25;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_22, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* PICKING FOR STOCKS WITH ESGSCORE LE 75 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE < 75 AND ESGSCORE  >= 0;
	CLASS FUNDID YEAR MONTH;
	VAR PICKING_PER_STOCK_MED;
	OUTPUT OUT = DATA_23(DROP = _TYPE_ _FREQ_) SUM(PICKING_PER_STOCK_MED) = PICKING_STKS_ESGLE_75;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_23, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/* DATA File_set.Fundlevel_final_dec2024;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	DROP _TYPE_ _FREQ_;
RUN; */

/* ************ CREATING PICKING VARIABLE WITH  WEIGHT OF STOCKS GROUPED BY ESG SCORE *************** */

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_final_dec2024;
RUN;

/* FOR ESGSCORE LESS THAN 25 */

PROC SORT DATA = Picking_file_stkret_win; BY FUNDID YEAR MONTH; RUN;

/* STEP 1 - CALCULATING WEIGHT OF STOCKS WITH ESGSCORE LE 25 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE <= 25;
	CLASS FUNDID YEAR MONTH;
	VAR Percentholdings;
	OUTPUT OUT = DATA_1 SUM(Percentholdings) = ESG_WT_LE25;
RUN;

/* STEP 2: CALCULATING WEIGHT OF STOCKS WITH ESGSCORE LE 75 */
PROC SUMMARY DATA = Picking_file_stkret_win NWAY MISSING;
	WHERE ESGSCORE <= 75;
	CLASS FUNDID YEAR MONTH;
	VAR Percentholdings;
	OUTPUT OUT = DATA_2 SUM(Percentholdings) = ESG_WT_LE75;
RUN;

/* STEP 3: CREATING THE VARIABLES */
%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_1, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=DATA_2, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	PICKING_ESGLE25_WT = (PICKING_STKS_Q1_WIN * ESG_WT_LE25) / 100;
	PICKING_ESGLE75_WT = (PICKING_STKS_ESGLE_75 * ESG_WT_LE75) / 100;
	PICKING_ESGGE75_WT = (PICKING_STKS_Q5_WIN * ESGGE75_SUM_WT_NZD) / 100;
	DROP _TYPE_ _FREQ_;
RUN;

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/* DATA File_set.Fundlevel_final_dec2024;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	DROP _TYPE_ _FREQ_;
RUN; */


/* GRAPHS */
/* OVERALL */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	CLASS YEAR MONTH;
	VAR SUM_PICKING_MED_WIN PICKING_ESG_DECOMP_WIN PICKING_NON_ESG_DECOMP_WIN;
	OUTPUT OUT = AVG_1 MEAN(SUM_PICKING_MED_WIN) = AVG_YEARLY_P
					   MEAN(PICKING_ESG_DECOMP_WIN) = AVG_ESG_YEARLY_P;
RUN;


/* KIWISAVER */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	WHERE BINARYVAR=1 OR BINARYVAR=2;
	CLASS YEAR MONTH;
	VAR SUM_PICKING_MED_WIN PICKING_ESG_DECOMP_WIN PICKING_NON_ESG_DECOMP_WIN;
	OUTPUT OUT = AVG_KIWISAVER MEAN(SUM_PICKING_MED_WIN) = AVG_YEARLY_P
					   MEAN(PICKING_ESG_DECOMP_WIN) = AVG_ESG_YEARLY_P;
RUN;


/* ESG GE 75 MEAN PICKING */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	CLASS YEAR MONTH;
	VAR SUM_PICKING_MED_WIN PICKING_GE_75;
	OUTPUT OUT = AVG_3 MEAN(SUM_PICKING_MED_WIN) = AVG_YEARLY_P
					   MEAN(PICKING_GE_75) = AVG_ESGGE75_YEARLY_P;
RUN;


/* KIWISAVER */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	WHERE BINARYVAR=1 OR BINARYVAR=2;
	CLASS YEAR MONTH;
	VAR SUM_PICKING_MED_WIN PICKING_GE_75;
	OUTPUT OUT = AVG_KIWISAVER_12 MEAN(SUM_PICKING_MED_WIN) = KS_AVG_YEARLY_P
					    MEAN(PICKING_GE_75) = KS_AVG_ESGGE75_YEARLY_P;
RUN;


DATA GRAPH;
	SET AVG_1;
	KEY = YEAR * 100 + MONTH;
	DROP _TYPE_ _FREQ_ YEAR MONTH;
RUN;

proc sgplot data=GRAPH noautolegend;
  vbar KEY / response=AVG_YEARLY_P barwidth=0.5;
  series x=KEY y=AVG_YEARLY_P/ lineattrs=(color=red) y2axis;	/*SYNTAX ERROR*/
  series x=KEY y=AVG_ESG_YEARLY_P / lineattrs=(color=blue) y2axis;
  xaxis label="KEY";
  yaxis label="AVG_YEARLY_P";
  y2axis label="AVG_ESG_YEARLY_P";
run;



proc sgplot data=GRAPH;
    vbarparm category=KEY response=AVG_YEARLY_P;  /* Works with numeric KEY */
    series x=KEY y=AVG_YEARLY_P / lineattrs=(color=red) y2axis;
    series x=KEY y=AVG_ESG_YEARLY_P / lineattrs=(color=blue) y2axis;
    xaxis label="Year-Month (YYYYMM)";
    yaxis label="AVG_YEARLY_P";   
    y2axis label="AVG_ESG_YEARLY_P";  
run;


proc contentS data = GRAPH; RUN;
proc CONTENTS DATA = AVG_1; RUN;

proc sort data=GRAPH nodupkey;
    by KEY;
run;

proc sql;
    select distinct KEY from GRAPH where AVG_YEARLY_P is missing;
quit;

proc sgplot data=GRAPH;
    /* Line for AVG_YEARLY_P */
    loess x=KEY y=AVG_YEARLY_P / lineattrs=(color=red thickness=2);

    /* Line for AVG_ESG_YEARLY_P (on secondary Y-axis) */
    loess x=KEY y=AVG_ESG_YEARLY_P / lineattrs=(color=blue thickness=2) y2axis;

    /* Axis Labels */
    xaxis label="Year-Month (YYYYMM)";
    yaxis label="AVG_YEARLY_P";   
    y2axis label="AVG_ESG_YEARLY_P";  

    title "Comparison of AVG_YEARLY_P and AVG_ESG_YEARLY_P Over Time";
run;


proc expand data=GRAPH out=GRAPH_SMOOTH method=none;
    id KEY; /* Ensures data is sorted by time */
    convert AVG_YEARLY_P = AVG_YEARLY_P_SMOOTH / transformout=(movave 3);
    convert AVG_ESG_YEARLY_P = AVG_ESG_YEARLY_P_SMOOTH / transformout=(movave 3);
run;


proc sgplot data=GRAPH_SMOOTH;
    /* Smoothed Line for AVG_YEARLY_P */
    series x=KEY y=AVG_YEARLY_P_SMOOTH / lineattrs=(color=red thickness=2);

    /* Smoothed Line for AVG_ESG_YEARLY_P */
    series x=KEY y=AVG_ESG_YEARLY_P_SMOOTH / lineattrs=(color=blue thickness=2) y2axis;

    /* Axis Labels */
    xaxis label="Year-Month (YYYYMM)";
    yaxis label="Smoothed AVG_YEARLY_P";   
    y2axis label="Smoothed AVG_ESG_YEARLY_P";  

    title "Smoothed Line using Moving Average";
run;



%PROC_SUMMARY_OVERALL(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR, VARIABLES=ESGGE75_SUM_WT_NZD, OUTPUT_FILE=data_45, STATS_OPS=MEAN, CALCULATED_VAR=esg_wt_ge75);

%PROC_SUMMARY_OPENEND(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR, VARIABLES=ESGGE75_SUM_WT_NZD, OUTPUT_FILE=data_openend, STATS_OPS=MEAN, CALCULATED_VAR=esg_wt_ge75);

%PROC_SUMMARY_KIWIPENSION(INPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED, CLASS_VARS=YEAR, VARIABLES=ESGGE75_SUM_WT_NZD, OUTPUT_FILE=data_ks, STATS_OPS=MEAN, CALCULATED_VAR=esg_wt_ge75);


proc sort data = FUNDLEVEL_DATASET_TRUNCATED; by year month; run;


/* VARIABLE 1: CALCULATING VALUE WEIGHTED ESGcontroversyscore */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESGcontroversyscore >= 0;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE MEAN(ESGcontroversyscore) = VW_ESGcontro;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=WEIGHTED_SCORE, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);



/* VARIABLE 3: VALUE WEIGHTED ESGcontroversyscore FOR GE 75 */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESGcontroversyscore >= 75;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE_GE75 
	MEAN(ESGcontroversyscore) = VW_ESGcontro_ESGGE75;
RUN;

%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=WEIGHTED_SCORE_GE75, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);


/* VARIABLE 3: VALUE WEIGHTED ESGcontroversyscore FOR GE 75 */
PROC SUMMARY DATA = NZD_DATASET_FINAL NWAY MISSING;
	WHERE ESGcontroversyscore <= 25 AND ESGcontroversyscore >=0;
	CLASS FUNDID YEAR MONTH;
	WEIGHT CAPITAL_INVESTED_PER_HOLDING;
	VAR ESGSCORE;
	OUTPUT OUT = WEIGHTED_SCORE_LE75 
	MEAN(ESGcontroversyscore) = VW_ESGcontro_ESGLE25;
RUN;


%MERGE_CODE_1(INPUT_FILE_1=FUNDLEVEL_DATASET_TRUNCATED, INPUT_FILE_2=WEIGHTED_SCORE_LE75, SORT_VARS=FUNDID YEAR MONTH, OUTPUT_FILE=FUNDLEVEL_DATASET_TRUNCATED);

/* REWRITING PERMANENT DATASET IN THE LIBRARY */
/*DATA File_set.Fundlevel_final_dec2024;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	DROP _TYPE_ _FREQ_;
RUN; */



/* MATCHING CS_GVK_LR FILE WITH NZD_HD_ALL DATASET BY ISIN */

DATA NZD_HD_ALL_FINAL_TRUNCATED;
	SET File_set.Nzd_hd_all_final_truncated;
RUN;


DATA Refinitiv_all_data;
	SET File_set.Refinitiv_all_data;
RUN;

PROC SQL;
	CREATE TABLE DATA_12345 AS
	SELECT DISTINCT RICCODE, ISIN, COMBINED_NAME_1, COMBINED_NAME_2, COMBINED_NAME_3
	FROM Refinitiv_all_data;
RUN;

/* import ticker downloaded from refinitiv file */
PROC IMPORT DATAFILE="R:\SAS - Research\SWARN_RESEARCH\NZ_ESG_PROJECT\DATASETS\ticker_refinitiv_file.XLSX"
    OUT=ticker_refinitiv_file
    DBMS=XLSX
    REPLACE;
    GETNAMES=YES;
RUN;

PROC CONTENTS DATA = ticker_refinitiv_file; RUN;

/* merge this file NZD_HD_ALL dataset to add Tickers to corresponding RICCode */
PROC SORT DATA = ticker_refinitiv_file; BY RICCODE; RUN;
PROC SORT DATA = NZD_HD_ALL_FINAL_TRUNCATED; BY RICCODE; RUN;

DATA NZD_RIC_TICKER;
	MERGE NZD_HD_ALL_FINAL_TRUNCATED(IN=A) ticker_refinitiv_file(IN=B);
	BY RICCODE;
	IF A;
RUN;


/* IMPORT CS_GV_KEY_LR FILE */
PROC IMPORT DATAFILE="C:\Users\em18921\Downloads\CS_GVK_LR.XLSX"
    OUT=CS_GVK_LR
    DBMS=XLSX
    REPLACE;
    GETNAMES=YES;
RUN;

PROC CONTENTS DATA = CS_GVK_LR; RUN;


/* MERGE CS_GVK_LR FILE WITH NZD_RIC_TICKER FILE BY TICKERSYMBOL */
PROC SORT DATA = CS_GVK_LR OUT = UNIQUE_CS_GVK_12 NODUPKEY; BY TICKERSYMBOL GVKEY SYMBOLID COMPANYNAME; RUN;
PROC SORT DATA = NZD_RIC_TICKER; BY TICKERSYMBOL; RUN;

DATA NZD_RIC_TICKER_CS_GVK;
	MERGE NZD_RIC_TICKER(IN=A) UNIQUE_CS_GVK_12(IN=B);
	BY TICKERSYMBOL;
	IF A;
RUN;
	
PROC SQL;
	CREATE TABLE TICKER_SYMBOL_DATASET AS
	SELECT DISTINCT TICKERSYMBOL
	FROM NZD_RIC_TICKER_CS_GVK
	WHERE TICKERSYMBOL NE "" ;
RUN;


/* APPROACH TWO */
PROC SQL;
	CREATE TABLE DATA_090 AS
	SELECT DISTINCT SECID, NAME, TICKERSYMBOL, ISIN, ISO_CODE, Country_of_Exchange, Country_of_Headquarters, Business_Sector_Name
	FROM NZD_RIC_TICKER
	WHERE TICKERSYMBOL NE "" ;
RUN;

PROC SORT DATA = DATA_090; BY TICKERSYMBOL; RUN;
PROC SORT DATA = UNIQUE_CS_GVK_12 NODUPKEY; BY TICKERSYMBOL; RUN;
DATA DATA_090010;
	MERGE DATA_090(IN=A) UNIQUE_CS_GVK_12(IN=B);
	BY TICKERSYMBOL;
	IF A;
RUN;








/* CODE FOR TOTAL NUMBER OF SECIDs IN THE DATASET */
PROC SQL;
	CREATE TABLE SECID_1 AS
	SELECT DISTINCT SECID
	FROM NZD_HD_ALL_FINAL_TRUNCATED;
RUN;




DATA FILE_HD;
	SET NZD_HD_ALL_FINAL_TRUNCATED;
	IF ISIN = "" THEN DELETE;
RUN;


DATA CS_GVK_LR_CLEANED;
	SET CS_GVK_LR;
	IF ISIN = "" THEN DELETE;
RUN;

PROC SORT DATA = FILE_HD out = file_1234 nodupkey; BY ISIN; RUN;

PROC SORT DATA = CS_GVK_LR_CLEANED OUT = UNIQUE_CS_GVK NODUPKEY; BY ISIN GVKEY SYMBOLID COMPANYNAME; RUN;

DATA FILE_HD_FINAL_1234;
	MERGE file_1234(IN=A) CS_GVK_LR_CLEANED(IN=B);
	BY ISIN;
	IF A;
	keep NAME ISIN ISO_CODE Country_of_Exchange Country_of_Headquarters Business_Sector_Name COMPANYNAME SYMBOLID GVKEY CIQCOMPANYID TICKERSYMBOL EXCHANGEID TRADINGITEMID SYMBOLSTARTDATE SYMBOLENDDATE;
RUN;



PROC SORT DATA = FILE_HD_FINAL; BY SECID YEAR MONTH; RUN;

PROC SQL;
	CREATE TABLE ISIN_COUNT AS
	SELECT DISTINCT SECID, COMPANYNAME, SYMBOLID, GVKEY, CIQCOMPANYID, TICKERSYMBOL, EXCHANGEID, TRADINGITEMID, SYMBOLSTARTDATE, SYMBOLENDDATE, ISIN, COUNT(*) AS ISIN_COUNT
	FROM FILE_HD_FINAL
	GROUP BY SECID;
RUN;

/* CREATING PERMANENT DATASET IN THER LIBRARY */
DATA FILE_SET.ISIN_COUNT_;
	SET ISIN_COUNT;
RUN;




/* CODE FOR GRAPHS YEAR, MONTH FOR PICKING_GE_75 AND PICKING_LE_25 */

DATA FUNDLEVEL_DATASET_TRUNCATED;
	SET File_set.Fundlevel_final_dec2024;
RUN;

/* OVERALL */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	CLASS YEAR MONTH;
	VAR PICKING_GE_75 PICKING_LE_25;
	OUTPUT OUT = AVG_3 MEAN(PICKING_GE_75) = AVG_YEARLY_PICKING_GE75
					   MEAN(PICKING_LE_25) = AVG_YEARLY_PICKING_LE25;
RUN;


/* KIWISAVER */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	WHERE BINARYVAR=1 OR BINARYVAR=2;
	CLASS YEAR MONTH;
	VAR PICKING_GE_75 PICKING_LE_25;
	OUTPUT OUT = AVG_KIWISAVER_12 MEAN(PICKING_GE_75) = KS_AVG_Y_PICKING_GE75
					    MEAN(PICKING_LE_25) = KS_AVG_Y_PICKING_LE25;
RUN;

/* OPEN END FUNDS */
PROC SUMMARY DATA = FUNDLEVEL_DATASET_TRUNCATED NWAY MISSING;
	WHERE BINARYVAR=3;
	CLASS YEAR MONTH;
	VAR PICKING_GE_75 PICKING_LE_25;
	OUTPUT OUT = AVG_OPEN_FUNDS MEAN(PICKING_GE_75) = OP_AVG_Y_PICKING_GE75
					    MEAN(PICKING_LE_25) = OP_AVG_Y_PICKING_LE25;
RUN;

proc sort data = FUNDLEVEL_DATASET_TRUNCATED; by year month; run;


DATA TEST;
	SET FUNDLEVEL_DATASET_TRUNCATED;
	KEEP FUNDID YEAR MONTH PICKING_GE_75;
	WHERE BINARYVAR = 3;
RUN; 


